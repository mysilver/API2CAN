{
    "get/x-open-banking/v1.2/atms/country/{country}/town/{town}": "get the list of all atms by town being << town >> and country being << country >>",
    "get/v1/getLatestFeedVersion": "get latest feed version",
    "get/2.0/tags": "get the list of tags",
    "get/x-open-banking/v1.2/atms/country/{country}": "get the list of all atms by country being << country >>",
    "get/api/reports/events": "get the list of events reports",
    "get/v2/nodes/{node_id}/children/": "get the list of children nodes with node id being << node_id >>",
    "get/2.0/tags/required": "get the list of required tags",
    "get/api/transportation-incentives-laws/v1/category-list.{output_format}": "get the law categories for a given category type for output format being << output_format >>",
    "get/v2/airports/nearest": "get the list of nearest airports",
    "get/Rating/ByID/{AccessToken}/{imdbID}": "get ratings by imdb id being << imdbID >>",
    "get/fmedatastreaming/TrafficLoopCount/TrafficLoops.fmw": "get traffic loops fmw",
    "get/api/dataset/2/OpenSearchDescription": "get open search description",
    "get/api/applications/status/": "get the status of the API",
    "put//user/favorites/{id}": "replace the favorite with id being << id >>",
    "get/v2/taxonomies/{taxonomy_id}/": "get a taxonomy with taxonomy id being << taxonomy_id >>",
    "get/v2/nodes/{node_id}/files/providers/{provider}/": "get a storage providers being << providers >> for a node with node id being << node_id >>",
    "get/2.0/users/{ids}": "get the list of users with ids being << ids >>",
    "post//api/v1/transactions/{key}/unconfirm": "unconfirm a transaction with key being << key >>",
    "get/2.0/me/reputation-history": "get my reputation history",
    "post/api/groups": "create a new group",
    "get/2.0/users/{ids}/answers": "get the list of answers for users with ids being << ids >>",
    "get/api/v1/export/pdf/belege/{belegUuid}": "export the belege with be leg uuid being << belegUuid >>",
    "get/domains/{owner}/{domain}/{version}/domain.json": "get the definition for the specified domain being << domain >> and version for owner being << owner >>",
    "get/v2/nodes/{node_id}/comments/": "get the list of comments for a node with node id being << node_id >>",
    "get/svc/books/v3/lists/names.{format}": "get names of lists of books",
    "post/v2/nodes/{node_id}/contributors/": "create a contributor for a node with node id being << node_id >>",
    "get/api/v2/shop_account_requests": "get the list of shop account requests",
    "delete//user/ratings/{itemType}/{itemId}": "delete an item type of a rating with item type being << itemType >> and item id being << itemId >>",
    "get/v3/platform/public/evidence": "get evidence",
    "get//data/v1/constraint/{variable}": "get constraint permutations for variable being << variable >>",
    "post/api/v1/auth/logout": "logout from open api",
    "get/api/v1/validate": "validate url of an open API 3 definition",
    "delete/api/notifications/{id}": "delete a notification with id being << id >>",
    "get/v2/users/{user_id}/addons/": "get the list of user addons with user id being << user_id >>",
    "get/2.0/questions/no-answers": "get the list of no answer questions",
    "get/x-open-banking/v1.2/branches/country/{country}": "get the list of all branches by country being << country >>",
    "get/v3/platform/docs": "get the list of API docs",
    "get/2.0/search": "search",
    "get/v2/registrations/{registration_id}/institutions/": "get the list of registration institutions for registration id being << registration_id >>",
    "post/api/gen/clients/{language}": "generate a client library for language being << language >>",
    "patch/v2/files/{file_id}/": "update the file with file id being << file_id >>",
    "patch/v2/registrations/{registration_id}/": "update a registration with registration id being << registration_id >>",
    "post/api/session": "create a new session",
    "post/api/v2/invoice_submissions/preflight": "check whether store cove can deliver an invoice submissions",
    "get/api/v1/registrierkassen/{registrierkasseUuid}/belege": "get the belege of registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
    "get/2.0/questions/{ids}/comments": "get the list of comments for questions with ids being << ids >>",
    "get/api/v2/purchase_invoices/{guid}": "get a purchase invoice for guid being << guid >>",
    "get/v2/nodes/{node_id}/contributors/{user_id}/": "get a contributor with user id being << user_id >> for a node with node id being << node_id >>",
    "get/x-open-banking/v1.2/personal-current-accounts/segment/{segment}": "get the list of all personal current accounts by segment being << segment >>",
    "get/single-pixel/send/saveData": "download daymet data",
    "get/open-banking/v1.2/personal-current-accounts": "get the list of all personal current accounts",
    "get/api/v1/devices": "get the list of devices",
    "get/2.0/inbox/unread": "get the list of unread messages",
    "get//series/{id}/episodes/query/params": "get the list of episodes query params for the series with id being << id >>",
    "post/v3/platform/private/besthitsearch": "find the best hit",
    "get//credit_cards/{id}": "get a credit card with id being << id >>",
    "get//languages": "get the list of languages",
    "get/v2/nodes/{node_id}/draft_registrations/{draft_id}/": "get a draft registration for node id being << node_id >> and draft id being << draft_id >>",
    "get/v2/wikis/{wiki_id}/versions/": "get the list of wiki versions for wiki id being << wiki_id >>",
    "get//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates": "get the list of the daily rates for hotel id being << hotelId >> and rate plan code being << rateplanCode >>",
    "get/2.0/badges/recipients": "get the list of recently badge recipients",
    "post//api/v1/transactions/{key}/refunds": "create a refund of a transactions with key being << key >>",
    "get/v1//organizations/{id}": "get a organization with id being << id >>",
    "get/2.0/questions": "get the list of questions",
    "get/api/v1/user/devices": "get the list of devices",
    "get/api/reports/trips": "get the list of trip reports",
    "get//user": "get my information",
    "get/api/reports/": "get the list of reports",
    "get/Music/Artist/{AccessToken}/{Name}": "get an artist with name being << Name >>",
    "get//api/v1/stats/settlement/by_taxation_type": "get settlement stats by taxation type",
    "post//api/v1/transactions/{key}/invoice/send_email": "send email about an invoice of a transaction with key being << key >>",
    "get//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}": "get the list of daily rates for a specific business day being << businessDay >> and rate plans for hotel id being << hotelId >> and rate plan code being << rateplanCode >>",
    "get/v1//payment-providers": "get the list of payment providers",
    "patch/v2/nodes/{node_id}/settings/": "update a node setting with node id being << node_id >>",
    "get/api/reports/status/": "get the list of generated reports",
    "delete/api/devices/{id}": "delete a device by id being << id >>",
    "delete/api/v2/shop_account_requests/{id}": "delete a shop account requests by id being << id >>",
    "get/apis/{owner}/{api}/.collaboration": "get a collaboration api by owner being << owner >> and API being << api >>",
    "get/v2/registrations/{registration_id}/linked_nodes/": "get the list of linked nodes for registration id being << registration_id >>",
    "get/single-pixel/visualize": "visualize daymet data in a web browser",
    "get/2.0/me/write-permissions": "get the list of my write permissions",
    "post/v3/platform/private/relation": "find related entities",
    "get/api/v1/user/accessTokens": "get the list of access tokens",
    "post/v2/wikis/{wiki_id}/versions/": "update a wiki for wiki id being << wiki_id >>",
    "get/api/gen/clients": "get the list of languages supported by the clients generator",
    "put/api/geofences/{id}": "replace a geo fence by id being << id >>",
    "get/sociodemo/sandbox/api/age/{location}": "get the count of people in a given location being << location >>",
    "get//api/v1/transactions/{key}/payments": "get the list of payments of a transaction by key being << key >>",
    "get/2.0/me/notifications/unread": "get the list of my unread notifications",
    "get//api/v1/tax/vat_numbers/{tax_number}/validate": "validate vat numbers by tax number being << tax_number >>",
    "get/2.0/me/associated": "get the list of my associated accounts",
    "get/2.0/filters/{filters}": "get the list of filters for filters being << filters >>",
    "get/2.0/answers": "get the list of answers",
    "get/2.0/users/{ids}/reputation-history": "get the users' reputation history with ids being << ids >>",
    "post/2.0/comments/{id}/edit": "edit a comment with id being << id >>",
    "get//collection/{id}": "get a collection by id being << id >>",
    "get/Music/Albums/{AccessToken}/{ArtistID}": "get the list of albums with artist id being << ArtistID >>",
    "get/v2/nodes/{node_id}/": "get a node with node id being << node_id >>",
    "get/svc/news/v3/content/{source}/{section}.json": "get the list of articles by source being << source >> and section being << section >>",
    "get//api/v1/transactions": "get the list of transactions",
    "get//data/v1/availability/": "find all available data",
    "get/svc/books/v3/lists/overview.{format}": "get the lists of overview",
    "get//api/v1/transactions/{key}/refunds": "get the list of refunds of a transaction with key being << key >>",
    "get/v2/files/{file_id}/": "get a file with file id being << file_id >>",
    "get/api/devices": "get the list of devices",
    "get/apis": "get the list of apis",
    "get/2.0/users/{ids}/reputation": "get the list of the reputation changes for users with ids being << ids >>",
    "get/v2/nodes/{node_id}/citation/": "get a citation for the nodes with node id being << node_id >>",
    "post/v3/platform/private/target": "find information about a list of targets",
    "get/v2/providers/preprints/{preprint_provider_id}/preprints/": "get the list of pre prints with pre print provider id being << preprint_provider_id >>",
    "get//series/{id}/actors": "get the list of actors for series with id being << id >>",
    "get/svc/movies/v2/reviews/{resource-type}.json": "search for movie reviews",
    "delete/domains/{owner}/{domain}/{version}": "delete a version of the domains with domain being << domain >>, owner being << owner >> and version being << version >>",
    "get/2.0/users/{ids}/suggested-edits": "get the list of suggested edits for users with ids being << ids >>",
    "post/api/maintenances": "create a new maintenance",
    "get/Trailers/CountByID/{AccessToken}/{imdbID}": "get the count of trailers by imdb id being << imdbID >>",
    "get/2.0/users/{ids}/questions": "get the list of users questions with ids being << ids >>",
    "delete/api/v1/apis/{owner}/{api}/{version}": "delete an api version by version being << version >> and API with being << api >> for owner being << owner >>",
    "get/Aliases/ByName/{AccessToken}/{Title}": "get the list of aliases for movies or television shows with access token being << AccessToken >>",
    "get/2.0/badges/name": "get the list of named badges",
    "post/api/v1/tax/byaddress": "get the list of tax rates by address",
    "patch/v2/wikis/{wiki_id}/": "update a wiki for wiki id being << wiki_id >>",
    "get/Music/Artist/Extended/{AccessToken}/{Name}": "get action controller 1 information about an artist with name being << Name >>",
    "get/api/v1/registrierkassen/{registrierkasseUuid}/monatsbelege": "get the list of monatsbelege of an registrierkassen with << registrierkasseUuid >> being << registrierkasseUuid >>",
    "get/x-open-banking/v1.2/commercial-credit-cards/segment/{segment}": "get the list of all commercial credit cards by segment being << segment >>",
    "get/api/v2/shop_account_requests/{id}": "get a shop account requests by id being << id >>",
    "get//api/v1/settlement/{quarter}": "get settlement for quarter being << quarter >>",
    "get/api/reports/custom/create/": "create a new custom report",
    "post/api/v1/user/devices": "create a new device",
    "get/api/info": "get info about groov",
    "get//icons/{term}": "get an icon by term being << term >>",
    "put//api/v1/transactions/{key}": "update a transaction by key being << key >>",
    "post//addresses/places_details": "get address places details",
    "get/2.0/users/{ids}/comments": "get the list of comments for users with ids being << ids >>",
    "get//products": "get the list of products",
    "get//suggest/v1/{type}": "get suggestions for type being << type >>",
    "get/2.0/users/{ids}/questions/no-answers": "get the list of no answer questions for users with ids being << ids >>",
    "post/api/v1/data-store/read": "get selected tags from the data store",
    "get/2.0/users/{ids}/associated": "get the list of users' associated accounts with ids being << ids >>",
    "put/v2/comments/{comment_id}/": "update a comment with comment id being << comment_id >>",
    "get/2.0/questions/{ids}/answers": "get the list of answers for questions with ids being << ids >>",
    "get/svc/news/v3/content/{source}/{section}/{time-period}.json": "get the list of articles by section being << section >> and time period being << time-period >> and source being << source >>",
    "delete/api/v1/user/devices/{serial}/remoteConnect": "remote disconnect user device by serial being << serial >>",
    "put//user/ratings/{itemType}/{itemId}/{itemRating}": "replace the item rating being << itemRating >> with item id being << itemId >> and item type being << itemType >>",
    "delete/apis/{owner}/{api}": "delete an api by API being << api >> and owner being << owner >>",
    "get/2.0/answers/{ids}": "get the list of answers with ids being << ids >>",
    "get/svc/archive/v1/{year}/{month}.json": "get the list of articles by year being << year >> and month being << month >>",
    "get//api/hotel/v0/hotels/{hotelId}/room_types/{code}": "get a room with hotel id being << hotelId >> for code being << code >>",
    "get/v2/preprints/": "get the list of pre prints",
    "get/v2/citations/styles/{style_id}/": "get a citation styles with style id being << style_id >>",
    "get/x-open-banking/v1.2/atms/postcode/{postcode}": "get the list of atms by postcode being << postcode >>",
    "delete/api/v1/apis/{owner}/{api}": "delete the API with api being << api >> for owner being << owner >>",
    "post/api/v1/data-store/write/{id}": "create a new value to the tag with id being << id >>",
    "get/Music/Artist/Art/Name/{AccessToken}/{Name}": "get art for artist with name being << Name >>",
    "get/v2/airports/countrycode/{countryCode}": "get the list of airports by country code being << countryCode >>",
    "get/svc/semantic/v2/geocodes/query.json": "query geocodes",
    "get/v1//merchant-industries/{id}": "get a merchant industry for id being << id >>",
    "post/api/v1/auth/register": "register to open api",
    "get/v2/users/": "get the list of users",
    "get/api/drivers": "get the list of drivers",
    "get//api/hotel/v0/hotels/{hotelId}": "get a hotel with hotel id being << hotelId >>",
    "get/Trailers/ByID/{AccessToken}/{imdbID}": "get trailers by imdb id being << imdbID >>",
    "post/v2/nodes/{node_id}/wikis/": "create a wiki for a node with node id being << node_id >>",
    "get/v2/nodes/{node_id}/addons/": "get the list of addons for node id being << node_id >>",
    "get/Calendar/Networks/{AccessToken}": "get the list of available networks",
    "get/Episodes/BySeason/{AccessToken}/{ID}/{Season}": "get the list of episodes for imdb ID being << ID >> and season being << Season >>",
    "get/sociodemo/sandbox/api/gender/{location}": "get the count of people in a given location being << location >>",
    "get/api/geofences": "get the list of geo fences",
    "delete/api/v2/legal_entities/{legal_entity_id}/peppol_identifiers/{superscheme}/{scheme}/{identifier}": "delete a peppol with identifier being << identifier >> for legal entity id being << legal_entity_id >>, super scheme being << superscheme >>, and scheme being << scheme >>",
    "get//api/v1/settlement/detailed_refunds": "get the list of detailed refunds",
    "post//login": "get a session token",
    "get/v2/registrations/{registration_id}/contributors/{user_id}/": "get a contributor with user id being << user_id >> for registration id being << registration_id >>",
    "get/2.0/tags/{tags}/synonyms": "get the list of synonyms for tags with tags being << tags >>",
    "post//v1/charitygeolocation": "get charity geo location",
    "get/api/v{version}/sitetypes/{siteType_Id}/sites": "get the site type for site type id being << siteType_Id >>",
    "get//series/{id}/episodes/summary": "get a summary of the episodes for the series with id being << id >>",
    "get//api/hotel/v0/hotels/{hotelId}/rooms/$count": "get the count of all rooms in a hotel with hotel id being << hotelId >>",
    "get/v2/institutions/": "get the list of institutions",
    "post//v1/charitypremium": "get charity premium",
    "get/v2/registrations/{registration_id}/identifiers/": "get the list of identifiers for a registration with registration id being << registration_id >>",
    "post/api/v1/convert": "convert a swagger 2 to open API 3",
    "get/2.0/me/questions/featured": "get the list of featured questions",
    "get/x-open-banking/v1.2/branches/postcode/{postcode}": "get the list of all branches by postcode being << postcode >>",
    "get/2.0/users/{id}/notifications/unread": "get the list of unread notifications for a user with id being << id >>",
    "get//api/v1/reports/eu/vies": "get the list of eu vies reports",
    "get//icon/{id}": "get an icon by id being << id >>",
    "post//accounts/password": "get password with email",
    "get/api/v1/export/xls/registrierkassen/{registrierkasseUuid}/belege": "export xls of the registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
    "get/2.0/me/questions/unanswered": "get the list of my unanswered questions",
    "get/open511/areas": "get the list of areas",
    "get/api/v1/oauth/token": "get oauth token",
    "get/api/v2/purchase_invoices/{guid}/ubl": "get a purchase invoice as ubl for guid being << guid >>",
    "get/api/v2/shop_accounts/{id}": "get a shop account by id being << id >>",
    "get//api/v1/settlement/refunds": "get the list of refunds",
    "get/v2/wikis/{wiki_id}/content/": "get the content of a wiki for wiki id being << wiki_id >>",
    "get/v1//currencies": "get the list of currencies",
    "get/2.0/tags/moderator-only": "get the list of moderator only tags",
    "get//api/v1/transactions/{key}": "get a transaction by key being << key >>",
    "get/2.0/me/mentioned": "get the list of the comments i am mentioned in",
    "get/api/v{version}/sites": "get the list of sites",
    "get/api/v1/auth": "get an auth token",
    "get/api/dataset/2/suggest": "suggest search terms",
    "get//user/{username}/uploads": "get the list of uploads with user with username being << username >>",
    "get//api/hotel/v0/hotels/{hotelId}/codes": "get the list of codes for a hotel with hotel id being << hotelId >>",
    "get/api/v1/export/thermal-print/belege/{belegUuid}": "export the belege with beleg uuid being << belegUuid >>",
    "get/v2/comments/{comment_id}/": "get a comment with comment id being << comment_id >>",
    "get/v2/registrations/{registration_id}/contributors/": "get the list of contributors for registration id being << registration_id >>",
    "get/api/reports/tweet/create/": "create a tweet report",
    "get/v2/actions/": "get the list of actions",
    "get//collections": "get teh list of collections",
    "delete/api/maintenances/{id}": "delete a maintenance by id being << id >>",
    "get/domains/{owner}/{domain}/{version}/domain.yaml": "get  the definition of a domain being << domain >> and version in yaml format for owner being << owner >>",
    "get/2.0/users/{ids}/questions/unanswered": "get the list of unanswered questions for users with ids being << ids >>",
    "get/v2/users/{user_id}/settings/identities/": "get the list of identities for user id being << user_id >>",
    "get/api/v1/export/csv/registrierkassen/{registrierkasseUuid}/belege": "get a registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
    "get//icons/recent_uploads": "get the list of recent upload icons",
    "get/api/gen/servers/{framework}": "get the list of options for a server framework being << framework >>",
    "get/v2/providers/preprints/": "get the list of pre prints providers",
    "get/v2/nodes/{node_id}/addons/{provider}/folders/": "get the list of addon folders for node id being << node_id >> and provider being << provider >>",
    "get/v2/nodes/{node_id}/contributors/": "get the list of contributors for a node with node id being << node_id >>",
    "patch/v2/nodes/{node_id}/": "update a node with node id being << node_id >>",
    "post//api/v1/tax/calculate": "calculate tax",
    "get/v2/registrations/{registration_id}/forks/": "get the list of forks for registration id being << registration_id >>",
    "get/Crew/ByShowName/{AccessToken}/{ShowName}": "get crew list by show name being << ShowName >>",
    "get/2.0/users/{ids}/favorites": "get the list of favorites for users with ids being << ids >>",
    "get/v3/platform/docs/swagger-ui": "get API swagger ui",
    "get/v2/nodes/{node_id}/institutions/": "get the list of institutions for node id being << node_id >>",
    "post/v1/video/update": "update a video's metadata",
    "put/api/devices/{id}/distance": "replace the distance of a device by id being << id >>",
    "get/2.0/users/{ids}/badges": "get the list of badges for users with ids being << ids >>",
    "post//accounts/settings": "update the account settings",
    "get/2.0/me/top-question-tags": "get the list of my top question tags",
    "get//entity/v1": "get entity",
    "get/x-open-banking/v1.2/atms/geo-location/lat/{latitude}/long/{longitude}": "get the list of atms by longitude being << longitude >> and latitude being << latitude >>",
    "get/Crew/ByID/{AccessToken}/{ID}": "get crew list for ID being << ID >>",
    "get/v2/registrations/{registration_id}/": "get a registration with registration id being << registration_id >>",
    "get/2.0/users/{id}/privileges": "get the list of privileges for a user with id being << id >>",
    "get/2.0/answers/{ids}/comments": "get a comment on a set of answers with ids being << ids >>",
    "get/v2/addons/": "get the list of addons",
    "get//series/{id}/episodes": "get the list of episodes of the series with id being << id >>",
    "get/2.0/me/badges": "get the list of my badges",
    "get//v1.0/getWebCams/": "get the list of web cams",
    "get/api/notifications": "get the list of notifications",
    "post/api/users": "create a new user",
    "get//api/hotel/v0/hotels/{hotelId}/rooms": "get the list of rooms by hotel id being << hotelId >>",
    "get/apis/{owner}/{api}": "get an api by API being << api >> and owner being << owner >>",
    "post/api/reports/custom/create/": "create a custom report",
    "patch/v2/nodes/{node_id}/draft_registrations/{draft_id}/": "update a draft registration for node id being << node_id >> and draft id being << draft_id >>",
    "get/2.0/users/{ids}/merges": "get the list of merges by users with ids being << ids >>",
    "post/api/commands": "create the list of commands",
    "get/Music/Lyrics/BySong/{AccessToken}/{Song}": "get the list of lyrics by song being << Song >>",
    "get/apis/{owner}/{api}/{version}": "get a version of an api by API with being << api >>, owner being << owner >>, and version being << version >>",
    "get/2.0/errors": "get the list of error codes",
    "put/api/attributes/computed/{id}": "update a computed attributes by id being << id >>",
    "post/api/reports/custom/insert/": "insert a custom report",
    "get/api/reports/dates/": "get report dates",
    "post/api/notifications/test": "test notifications",
    "post/api/v2/legal_entities": "create a new legal entity",
    "get//episodes/{id}": "get an episode with id being << id >>",
    "put/api/commands/{id}": "replace a command by id being << id >>",
    "get/Music/Lyrics/ByName/{AccessToken}/{Name}": "get the list of lyrics for an artist by name being << Name >>",
    "get//v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/": "get forecast time series wrf by longitude being << longitude >>",
    "get/Music/Lyrics/AlbumID/{AccessToken}/{AlbumID}": "get the list of lyrics by album id being << AlbumID >>",
    "get//api/v1/reports/domestic/summary": "get the summary of a domestic report",
    "delete/api/permissions": "delete permissions link",
    "get/v2/metaschemas/registrations/": "get the list of registration meta schemas",
    "put/api/users/{id}": "update a user with id being << id >>",
    "get/2.0/users/{ids}/questions/unaccepted": "get the list of unaccepted questions for users with ids being << ids >>",
    "patch/api/v2/legal_entities/{id}": "update a legal entity for id being << id >>",
    "get/domains/{owner}/{domain}": "get a domain by domain being << domain >> and owner being << owner >>",
    "get/2.0/posts/{ids}/suggested-edits": "get the list of suggested edits for posts by ids being << ids >>",
    "get//api/hotel/v0/hotels/{hotelId}/codes/{id}": "get a code with id being << id >> for the hotel with id being << hotelId >>",
    "get/v2/users/{user_id}/nodes/": "get the list of nodes for user id being << user_id >>",
    "get/v2/wikis/{wiki_id}/versions/{version_id}/content/": "get the content of a wiki version for wiki id being << wiki_id >> and version being << version >>",
    "get/api/notifications/types": "get the list of notification types",
    "get/v3/platform/private/disease/{disease}": "get a disease being << disease >>",
    "get//api/v1/dictionaries/currencies": "get the list of dictionary currencies",
    "get/apis/{owner}/{api}/{version}/swagger.json": "get a swagger of an api by API with being << api >>, owner being << owner >>, and version being << version >>",
    "post/v2/preprints/": "create a pre print",
    "get/api/users": "get the list of users",
    "post/v1/video/query": "query videos",
    "get/api/v2/shop_accounts": "get the list of shop accounts",
    "get/api/v1/badge": "get a badge",
    "get/v2/users/{user_id}/registrations/": "get the list of registrations for user id being << user_id >>",
    "get//promotional_codes": "get the list of promotional codes",
    "get/v2/registrations/{registration_id}/logs/": "get the list of logs for registration id being << registration_id >>",
    "get/2.0/inbox": "get a my inbox",
    "post/v2/nodes/{node_id}/draft_registrations/": "create a draft registration for a node with node id being << node_id >>",
    "get/v2/nodes/{node_id}/files/": "get the list of storage providers for node id being << node_id >>",
    "post/v1/video/uploader": "get the embeddable url to an uploader widget",
    "get//api/v1/stats/transactions/by_country": "get the list of stats of transactions by country",
    "patch/v2/preprints/{preprint_id}/": "update a pre prints for pre print id being << preprint_id >>",
    "get/sociodemo/sandbox/api/info": "get info of an API",
    "get/v1//payment-methods/{id}": "get a payment method by id being << id >>",
    "delete//user/favorites/{id}": "delete a favorite by id being << id >>",
    "post//accounts": "create a new account",
    "get/v3/platform/private/relation/target/{target}": "find related entities by target being << target >>",
    "get/api/reports/custom/insert/": "insert custom reports",
    "post/v2/nodes/{node_id}/registrations/": "create a registration for node id being << node_id >>",
    "post/api/reports/custom/generate/": "generate custom reports",
    "get/api/events/{id}": "get an event with id being << id >>",
    "post/v2/nodes/": "create a node",
    "get/2.0/access-tokens/{accessTokens}/invalidate": "invalidate the access tokens with access tokens being << accessTokens >>",
    "post/apis/{owner}/{api}": "create an api by owner being << owner >> and API being << api >>",
    "delete/v2/comments/{comment_id}/": "delete a comment with comment id being << comment_id >>",
    "post//api/v1/transactions/{key}/payments/capture": "capture payments of a transaction with key being << key >>",
    "get/v2/nodes/{node_id}/settings/": "get the list of settings of a node with node id being << node_id >>",
    "get/2.0/notifications/unread": "get the list of unread notifications",
    "get/2.0/questions/featured": "get the list of featured questions",
    "get/x-open-banking/v1.2/branches/sortcode/{sortcode}": "get the list of branches by sort code being << sortcode >>",
    "get/geocode/v{version}/{format}": "geocode a query for format being << format >>",
    "delete//api/v1/transactions/{key}": "delete a transaction with key being << key >>",
    "get/v3/platform/public/utils/stats": "get stats about the current data release",
    "get//series/{id}/filter/params": "get the list of filter params for the series with id being << id >>",
    "get/api/reports/custom/generate/": "generate a custom report",
    "get/v2/preprints/{preprint_id}/citation/": "get citation for a pre print with pre print id being << preprint_id >>",
    "get/v2/preprints/{preprint_id}/citation/{style_id}/": "get a styled citation with style id being << style_id >> for pre print id being << preprint_id >>",
    "post/api/reports/twitter/create/": "create a twitter report",
    "get/api/v2/shops": "get the list of shops",
    "post/api/v2/shop_account_requests": "create a new shop account request",
    "post/api/v2/invoice_submissions": "create a new invoice submission",
    "get/2.0/users/{ids}/questions/featured": "get the list of featured users questions with ids being << ids >>",
    "get//data/v1/map/new": "create a map",
    "get/2.0/users/{ids}/comments/{toid}": "get the list of comments for users with ids being << ids >> in reply to the single user with id being << toid >>",
    "get//series/{id}": "get a series by id being << id >>",
    "get/2.0/privileges": "get the list of privileges",
    "post/v3/platform/public/association/filter": "filter available associations",
    "get/apis/{owner}/{api}/{version}/swagger.yaml": "get a swagger of aa api by API with being << api >>, owner being << owner >>, and version being << version >>",
    "get/v1//countries/{id}": "get a country with id being << id >>",
    "get/x-open-banking/v1.2/business-current-accounts/segment/{segment}": "get the list of business current accounts for segment being << segment >>",
    "get//accounts": "get current user",
    "get//series/{id}/images/query/params": "get the query params for the series with id being << id >> id images query route",
    "get/Crew/Search/{AccessToken}/{Phrase}": "search crew by phrase being << Phrase >>",
    "get/v2/registrations/{registration_id}/files/{provider}/": "get the list of files for registration id being << registration_id >> and provider being << provider >>",
    "get/api/v1/data-store/tags": "get the list of data store tags",
    "get//icon/{term}": "get an icon by term being << term >>",
    "get/2.0/apps/{accessTokens}/de-authenticate": "de authenticate apps with access tokens being access tokens",
    "get//v1.0/getSocibWeatherStation/{stationName}/{period}/": "get socib weather station by station name being << stationName >> and period being << period >>",
    "get//rides/{id}/cancel_fees": "cancel fees of a rides with id being << id >>",
    "get/api/maintenances": "get the list of maintenances",
    "get/2.0/similar": "get the list of similar questions",
    "get/v2/nodes/{node_id}/logs/": "get the list of logs for node id being << node_id >>",
    "delete/v2/wikis/{wiki_id}/": "delete a wiki for wiki id being << wiki_id >>",
    "get/domains": "get the list of domains",
    "post/api/drivers": "create a new driver",
    "post//addresses/places_autocomplete": "get places autocomplete for addresses",
    "get/api/v1/tax/ip": "get the tax rate by ip",
    "get/v2/institutions/{institution_id}/users/": "get the list of affiliated users for institution id being << institution_id >>",
    "post/v1/video/create": "create a video",
    "get/api/v{version}/areas": "get the list of areas",
    "get//api/v1/stats/transactions": "get the list of stats of transactions",
    "patch/api/v2/shop_accounts/{id}": "update a shop account by id being << id >>",
    "get/2.0/me/reputation-history/full": "get my full reputation history",
    "get/v2/nodes/{node_id}/draft_registrations/": "get the list of draft registrations for a nodes with node id being << node_id >>",
    "get/2.0/me/reputation": "get my reputation",
    "get/api/v1/apis": "get the list of apis",
    "get/api/dataset/2/Facets": "get the list of facets",
    "post//api/v1/transactions/{key}/payments": "create a payment of a transaction with key being << key >>",
    "get/2.0/me/tags/{tags}/top-answers": "get the list of top answers for tags with tags being << tags >>",
    "get/Calendar/ByDate/{AccessToken}/{Date}/{Country}": "get tv schedule when country being << Country >>, and date being << Date >>",
    "get/2.0/me/answers": "get the list of my answers",
    "get/v2/registrations/{registration_id}/comments/": "get the list of comments for registration id being << registration_id >>",
    "get/api/server": "get server information",
    "get/2.0/suggested-edits": "get the list of the suggested edits",
    "get/Movie/ByID/{accesstoken}/{imdbID}": "get movie by imdb id being << imdbID >>",
    "get/v3/platform/public/utils/ping": "check if the API is up",
    "post//rides/{id}/reserve": "reserve a ride with id being << id >>",
    "get/2.0/badges/tags": "get the list of badges that are awarded for participation in specific tags",
    "get//collection/{id}/icons": "get the list of icons of a collection with id being << id >>",
    "get/v2/nodes/{node_id}/view_only_links/{link_id}/": "get a view only link for node id being << node_id >> and link id being << link_id >>",
    "get//search/series": "search for a series",
    "get/api/v1/data-store/devices/{id}/tags": "get the list of tags of a device with id being << id >>",
    "get/api/positions": "get the list of positions",
    "get/2.0/questions/unanswered": "get the list of unanswered questions",
    "get/2.0/users/{ids}/tags": "get the list of tags for users with ids being << ids >>",
    "post/api/v2/legal_entities/{legal_entity_id}/peppol_identifiers": "create a new peppol identifiers for legal entity id being << legal_entity_id >>",
    "get/v2/users/{user_id}/addons/{provider}/accounts/{account_id}/": "get  an addon account with account id being << account_id >> for provider being << provider >> and user id being << user_id >>",
    "get/2.0/users": "get the list of users",
    "get/v2/metaschemas/{metaschema_id}": "get a meta schema for meta schema id being << metaschema_id >>",
    "get//user/{user_id}/collections": "get the list of collections for user id being << user_id >>",
    "patch/v2/users/{user_id}/": "update a user with user id being << user_id >>",
    "get/open511/jurisdiction": "get the list of jurisdictions",
    "post/api/v1/auth/login/apinf_token": "login using apinf token",
    "delete/apis/{owner}/{api}/{version}": "delete a version of an api by API with being << api >>, owner being << owner >>, and version being << version >>",
    "get/api/commands/send": "get the list of commands",
    "get/Cast/ByActor/{AccessToken}/{Actor}": "get the list of show actor being << Actor >> is appearing in for access token being << AccessToken >>",
    "get/Images/ByID/{AccessToken}/{imdbID}": "get the list of images of a movie by imdb id being << imdbID >>",
    "get/v2/users/{user_id}/": "get a user with user id being << user_id >>",
    "get//api/v1/verification/sms/{token}": "verify sms token",
    "get/2.0/me/questions/no-answers": "get the list of my no answers questions",
    "get/v2/users/{user_id}/addons/{provider}/": "get a user addons with user id being << user_id >> for provider being << provider >>",
    "get/api/reports/summary": "get the list of summary reports",
    "get/2.0/badges": "get the list of badges",
    "post/api/devices": "create a device",
    "get//catchement_areas/{id}": "get a catchement area for id being << id >>",
    "post/api/calendars": "create a calendar",
    "post/api/v1/auth/ping": "check if I am authenticated",
    "get/v2/licenses/": "get the list of licenses",
    "get//entity/v1/{relation}": "find the relatives of an entity for relation being << relation >>",
    "get/api/v1/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}": "get a belege of a registrierkassen for beleg uuid being << belegUuid >> and registrierkasse uuid being << registrierkasseUuid >>",
    "get/v3/platform/private/target/expression": "get the list of expression objects",
    "get/api/v1/user/devices/{serial}": "get a device with serial being << serial >>",
    "get/Awards/ByWinner/{AccessToken}/{Nominee}": "get the list of awards by nominee being << Nominee >>",
    "get//api/v1/stats/settlement/daily": "get daily settlement stats",
    "get/api/v1/convert": "convert a swagger 2 to open API 3",
    "get/2.0/revisions/{ids}": "get the list of the revisions with ids being << ids >>",
    "post/v3/platform/public/evidence/filter": "filter available evidence",
    "get/api/v1/export/qr/belege/{belegUuid}": "export the belege with beleg uuid being << belegUuid >> in qr",
    "get/specs": "get the list of apis and domains",
    "get/Actors/Search/{accesstoken}/{Query}": "search for << Query >>",
    "get/v2/metaschemas/registrations/{metaschema_id}": "get a registration with meta schema id being << metaschema_id >>",
    "get//": "get the version API",
    "get/v3/platform/public/association/filter": "filter available association s",
    "put/apis/{owner}/{api}/.collaboration": "replace a collaboration api by owner being << owner >> and API being << api >>",
    "get/Trailers/CountByName/{AccessToken}/{Name}": "get the count of trailers for name being << Name >>",
    "post/api/notifications": "create a new notification",
    "get/svc/semantic/v2/concept/search.json": "search for concepts",
    "get/Music/Albums/MusicBrainzID/{AccessToken}/{MBID}": "get artist band information on music brainz id for MBID being << MBID >>",
    "get/Music/Albums/CoverArt/{AccessToken}/{MBID}": "get cover art by MBID being << MBID >>",
    "get/svc/books/v3/lists/{date}/{list}.json": "get the list of books by date being << date >>",
    "get/v2/view_only_links/{link_id}/": "get a view only link for link id being << link_id >>",
    "get/Episodes/LatestSeason/{AccessToken}/{ID}": "get last season for imdb ID being << ID >>",
    "get/2.0/users/{ids}/timeline": "get the list of actions for users with ids being << ids >>",
    "get//api/v1/geoip/{ip}": "locate given ip with ip being << ip >>",
    "get/v1/getFeeds": "get the list of feeds",
    "get/2.0/comments": "get the list of comments",
    "get/open-banking/v1.2/business-current-accounts": "get the list of business current accounts",
    "get/v2/files/{file_id}/versions/": "get the list of file versions with file id being << file_id >>",
    "get/v3/platform/private/quicksearch": "search",
    "get/v2/airports/nearest/{id}": "get the nearest airport with id being << id >>",
    "get//products/{id}": "get a product with id being << id >>",
    "get/svc/movies/v2/critics/{resource-type}.json": "get the list of movie critics by resource type being << resource-type >>",
    "get//api/v1/tax/calculate": "calculate tax",
    "get/v2/registrations/{registration_id}/files/{provider}/{path}/": "get a file for path being << path >>, registration id being << registration_id >>, and provider being << provider >>",
    "get/v2/institutions/{institution_id}/": "get an institution with institution id being << institution_id >>",
    "get/2.0/tags/{tag}/top-answerers/{period}": "get the list of top answers for tags being << tag >> and period being << period >>",
    "get//{version}": "get the entry point on version",
    "get//api/hotel/v0/hotels/{hotelId}/rateplans/$count": "get the count of rate plans in a hotel with hotel id being << hotelId >>",
    "get/Episodes/SeasonCount/{AccessToken}/{ID}": "get the count of seasons for ID being << ID >>",
    "get//refresh_token": "refresh token",
    "get/v2/nodes/{node_id}/citation/{style_id}/": "get  a styled citation with style id being << style_id >> for node id being << node_id >>",
    "get/api/v{version}/quality/daily": "get site daily quality",
    "get//user/favorites": "get the list of favorite series",
    "get//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/$count": "get the count of active daily rates for hotel id being << hotelId >> and rate plan code being << rateplanCode >>",
    "get/v1//exchangers/{id}": "get an exchanger with id being << id >>",
    "get/v1//countries": "get the list of countries",
    "get/2.0/events": "get the list of events",
    "get/v3/platform/public/search": "search for diseases",
    "get/v3/platform/public/evidence/filter": "filter available evidence",
    "delete/api/geofences/{id}": "delete a geo fence by id being << id >>",
    "put/api/calendars/{id}": "replace a calendar by id being << id >>",
    "get//updated/query/params": "get the list of query keys for the updated query params route",
    "get/open-banking/v1.2/unsecured-sme-loans": "get the list of unsecured sme loans",
    "get/api/v{version}/areas/{area_Ids}": "get areas with area ids being << area_Ids >>",
    "get/api/gen/download/{fileId}": "download by file id being << fileId >>",
    "delete/v2/users/{user_id}/identities/{identities_id}/": "delete an identity with identities id being << identities_id >> for user id being << user_id >>",
    "get/v3/platform/swagger": "get open API schema",
    "get//v1.0/getEasyWind/{easywindId}/": "get easy wind with easy wind id being << easywindId >>",
    "delete/v2/nodes/{node_id}/draft_registrations/{draft_id}/": "delete a draft registration for node id being << node_id >> and draft id being << draft_id >>",
    "get/Aliases/ByID/{AccessToken}/{imdbID}": "get the list of aliases for a show with imdb id being << imdbID >>",
    "get/2.0/me": "get my information",
    "get//user/ratings/query/params": "get the list of query params in my ratings",
    "get/v2/nodes/{node_id}/preprints/": "get the list of pre prints for node id being << node_id >>",
    "get/v2/taxonomies/": "get the list of taxonomies",
    "get/api/v1/user": "get user",
    "get/2.0/users/{id}/tags/{tags}/top-questions": "get the list of top questions for tags being << tags >> and the user with id being << id >>",
    "get/2.0/users/{ids}/mentioned": "get the list of comments that the users with ids being << ids >> has been mentioned in",
    "delete/api/users/{id}": "delete a user with id being << id >>",
    "post/api/v1/auth/login/apinf": "login using apinf account",
    "get/open511/events": "get the list of traffic events",
    "get/2.0/users/{id}/inbox": "get the inbox of a user with id being << id >>",
    "post/api/reports/tweet/create/": "create a tweet report",
    "get/v2/wikis/{wiki_id}/versions/{version_id}/": "get a wiki version for wiki id being << wiki_id >>",
    "get/v2/nodes/{node_id}/forks/": "get the list of forks of the node with node id being << node_id >>",
    "get/x-open-banking/v1.2/branches/country/{country}/town/{town}": "get the list of branches by town being << town >> and country being << country >>",
    "get/v1//currencies/{id}": "get a currency with id being << id >>",
    "get//api/v1/settlement/summary/{quarter}": "get settlement summary for quarter being << quarter >>",
    "post/v3/platform/private/enrichment/targets": "get an enrichment target for a list of targets",
    "put//accounts/update_password": "update password",
    "get//rides/{id}/estimate": "estimate a ride with id being << id >>",
    "get/v1//deposit-methods/{id}": "get a deposit method by id being << id >>",
    "get//rides/{id}": "get a ride with id being << id >>",
    "get/2.0/me/comments/{toId}": "get the list of my comments on a user with id being << toId >>",
    "get/2.0/users/{id}/top-answer-tags": "get the list of top answer tags for a user with id being << id >>",
    "get/Magnets/ByDate/{AccessToken}/{Date}": "get available magnet hashes for date being << Date >>",
    "get/v2/nodes/{node_id}/files/{provider}/": "get the list of node files with node id being << node_id >> for provider being << provider >>",
    "post/v2/nodes/{node_id}/comments/": "create a comment for a node with node id being << node_id >>",
    "get/v1//banks": "get the list of banks",
    "get/2.0/badges/{ids}": "get the list of badges with ids being << ids >>",
    "get/v2/users/{user_id}/identities/{identities_id}/": "get an identity with identities id being << identities_id >> for user id being << user_id >>",
    "get//search/v1/question": "search questions",
    "get/api/v1/registrierkassen/{registrierkasseUuid}": "get a registrierkassen for registrierkasse uuid being << registrierkasseUuid >>",
    "get/api/v1/apis/{owner}/{api}/{version}/swagger.yaml": "get yaml definition of the API with being << api >> and version being << version >> for owner being << owner >>",
    "get/open-banking/v1.2/atms": "get the list of atms",
    "post//v1/charitybasic": "get charity basic",
    "get//search/series/params": "get the list of parameters to query by in the search series route",
    "post/v1/video/details": "get details of a video",
    "get/Movie/Search/{AccessToken}/{Query}": "search for movies with query being << Query >>",
    "get/v3/platform/private/autocomplete": "get autocomplete objects",
    "get/api/commands/types": "get the list of command types",
    "get//v1.0/getEventStations/{eventId}/": "get event stations with event id being << eventId >>",
    "post/api/permissions": "create a new permission",
    "post/api/commands/send": "send commands",
    "get/2.0/tags/{tags}/info": "get info of tags with tags being << tags >>",
    "get/domains/{owner}/{domain}/{version}": "get the swagger of the domains with domain being << domain >>, owner being << owner >> and version being << version >>",
    "get/v2/view_only_links/{link_id}/nodes/": "get the list of nodes for link id being << link_id >>",
    "get/svc/books/v3/lists.{format}": "get the list of best seller books",
    "post/AddTVShow": "add a new show",
    "delete/api/calendars/{id}": "delete a calendar by id being << id >>",
    "get/api/whoami": "get my user information",
    "post//api/v1/verification/sms": "create sms token",
    "get//series/{id}/filter": "filter the list of series with id being << id >>",
    "get//accounts/payment_methods": "get the list of account payment methods",
    "get/api/v1/data-store/devices": "get the list of devices available in the data store",
    "get//v1.0/compareStation/{stationName}/": "compare station with station name being << stationName >>",
    "get/v2/nodes/{node_id}/addons/{provider}/": "get a node addon for node id being << node_id >> and provider being << provider >>",
    "get//series/{id}/episodes/query": "query the episodes of the series with id being << id >>",
    "get//api/hotel/v0/hotels": "get the list of hotels",
    "delete/api/v2/shop_accounts/{id}": "delete a shop accounts by id being << id >>",
    "post/v1/video/stream": "get the list urls of streaming",
    "get/api/transportation-incentives-laws/v1/{id}.{output_format}": "get a transportation incentive law by id being << id >> and output format being << output_format >>",
    "get/v1//merchant-industries": "get the list of merchant industries",
    "get/v2/registrations/{registration_id}/wikis/": "get the list of wikis for registration id being << registration_id >>",
    "post/AddActor": "create a new actor",
    "get/Calendar/Countries/{AccessToken}": "get the list of available countries in calendar database",
    "get/v2/registrations/{registration_id}/children/": "get the list of children registrations with registration id being << registration_id >>",
    "get/v2/nodes/{node_id}/registrations/": "get the list of registrations for node id being << node_id >>",
    "get/2.0/me/favorites": "get the list of my favorites questions",
    "delete/api/v2/legal_entities/{id}": "delete a legal entity by id being << id >>",
    "put/api/notifications/{id}": "update a notification with id being << id >>",
    "put/api/drivers/{id}": "replace a driver by id being << id >>",
    "get/v1//deposit-methods": "get the list of deposit methods",
    "get/svc/news/v3/content.json": "get the list of articles",
    "get/2.0/users/{id}/notifications": "get the list of notifications for a user with id being << id >>",
    "post/api/v1/apis/{owner}/{api}/{version}": "publish API version of the API with being << api >> for owner being << owner >>",
    "put//accounts": "update current user",
    "get/v1//banks/{id}": "get a bank with id being << id >>",
    "delete/api/session": "delete a session",
    "get//api/v1/stats/settlement/by_country": "get settlement stats by country",
    "get/api/groups": "get the list of groups",
    "get/v2/registrations/": "get the list of registrations",
    "get/Music/Tracks/{AccessToken}/{AlbumID}": "get the list of tracks by album id being << AlbumID >>",
    "post/v3/platform/private/disease": "get the list of diseases",
    "get/api/v1/status": "get status",
    "get/api/attributes/computed": "get the list of computed attributes",
    "get/v1//exchangers": "get the list of exchangers",
    "get//series/{id}/images/query": "query the images of the series with id being << id >>",
    "post//promotional_codes": "create a promotional code",
    "delete/api/groups/{id}": "delete a group by id being << id >>",
    "get//catchement_areas": "get the list of catchement areas",
    "put/api/groups/{id}": "update a group by id being << id >>",
    "get/2.0/tags/synonyms": "get the list of tag synonyms",
    "get/GetIMDBid/ByID/{AccessToken}/{Query}": "get the list of imdb ids by query being << Query >>",
    "post/api/v1/apis/{owner}/{api}": "create an API for owner being << owner >>",
    "get/api/v2/shop_accounts/auth_failures": "get auth failures of shop accounts",
    "get/2.0/users/{id}/tags/{tags}/top-answers": "get the list of top answers for tags being << tags >> and a user with id being << id >>",
    "get/Cast/ActorBySearch/{AccessToken}/{Actor}": "get the list of shows for an actor being << Actor >>",
    "get/svc/books/v3/reviews.{format}": "get the list of reviews of a book",
    "get/2.0/me/questions/unaccepted": "get the list of my unaccepted questions",
    "get/v2/nodes/{node_id}/identifiers/": "get the list of identifiers for node id being << node_id >>",
    "get/v1//payment-providers/{id}": "get a payment provider for id being << id >>",
    "get/v1//organizations": "get the list of organizations",
    "get/Awards/ByYear/{Year}": "get the list of awards for year being << Year >>",
    "put/api/v1/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}": "add beleg of a registrierkassen for beleg uuid being << belegUuid >> and registrierkasse uuid being << registrierkasseUuid >>",
    "delete/v2/nodes/{node_id}/contributors/{user_id}/": "delete a contributor with user id being << user_id >> for a node with node id being << node_id >>",
    "get//api/v1/dictionaries/countries": "get the list of dictionary countries",
    "get/svc/search/v2/articlesearch.json": "search articles",
    "get/Status/{AccessToken}/{Query}": "get status of a show by query being << Query >>",
    "get/2.0/questions/{ids}/timeline": "get the list of events of the questions with ids being << ids >>",
    "get/2.0/users/moderators": "get the list of moderator users",
    "get/v3/platform/private/target/{target}": "get a target with target being << target >>",
    "delete/domains/{owner}/{domain}": "delete a domain by domain being << domain >> and owner being << owner >>",
    "put/api/server": "update server information",
    "post/api/geofences": "create a new geo fence",
    "patch/v2/nodes/{node_id}/contributors/{user_id}/": "update a contributor with user id being << user_id >> for a node with node id being << node_id >>",
    "get/api/v{version}/sitetypes": "get the list of site types",
    "get/v3/platform/private/eco/{ECO_ID}": "get eco by eco id being << ECO_ID >>",
    "put/api/maintenances/{id}": "update a maintenance by id being << id >>",
    "post/api/v1/auth/login": "login",
    "patch/v2/nodes/{node_id}/addons/{provider}/": "update an addon for node id being << node_id >> and provider being << provider >>",
    "get/2.0/posts/{ids}": "get the list of posts by ids being << ids >>",
    "get/single-pixel/preview": "preview daymet data in a web browser",
    "get//api/hotel/v0/hotels/{hotelId}/room_types": "get the list of room types for a hotel with hotel id being << hotelId >>",
    "get/v1//payment-methods": "get the list of payment methods",
    "post//v1/charityfinancial": "get charity financial",
    "get/2.0/users/{id}/reputation-history/full": "get the list of reputation history a user with id being << id >>",
    "get/v2/license/{license_id}/": "get a license with license id being << license_id >>",
    "get/api/v1/apis/{owner}/{api}/{version}/swagger.json": "get json definition for the API with being << api >> and version being << version >> for owner being << owner >>",
    "get/v2/files/{file_id}/versions/{version_id}/": "get a file version with file id being << file_id >> and version id being << version_id >>",
    "get//data/v1/values": "get values for variables",
    "get/api/v1/tax/countrycode": "get the tax rate for country",
    "post/api/reports/": "get the list of reports",
    "get/v2/wikis/{wiki_id}/": "get a wiki by id being << wiki_id >>",
    "get/v2/providers/preprints/{preprint_provider_id}/licenses/": "get the list of licenses for a pre print with pre print provider id being << preprint_provider_id >>",
    "get/2.0/sites": "get the list of sites",
    "get/Images/Search/{Accesstoken}/{Query}": "get images of a movie with query being << Query >>",
    "post//api/v1/transactions/{key}/confirm": "confirm a transaction by key being << key >>",
    "get//api/v1/tax/location/calculate": "calculate tax location",
    "get/2.0/tags/{tags}/related": "get the list of related tags for tags being << tags >>",
    "get/apis/{owner}": "get the list of apis by owner being << owner >>",
    "get/2.0/notifications": "get the list of notifications",
    "get/v2/registrations/{registration_id}/citations/": "get the list of citation styles for registration id being << registration_id >>",
    "get//v1.0/getForecastPoints/{yatchclubid}/language/{language}": "get forecast points by yatch club id being << yatchclubid >> and language being << language >>",
    "get/api/gen/servers": "get the list of languages supported by the servers generator",
    "get/v2/citations/styles/": "get the list of citation styles",
    "get//user/{user_id}/collections/{slug}": "get a user slug collection by slug being << slug >> and user id being << user_id >>",
    "get/api/v1/tax/rates": "get the list of tax rates",
    "get/2.0/search/advanced": "search",
    "post//accounts/sign_in": "sign in to the account",
    "get/Episodes/ByShowName/{AccessToken}/{Showname}": "get the list of episodes for show name being << Showname >>",
    "get/v2/nodes/{node_id}/view_only_links/": "get the list of view only links for node id being << node_id >>",
    "post//v1/charitysearch": "get summary of charity search",
    "post/api/v2/shop_accounts": "create a new shop account",
    "get/2.0/users/{id}/top-question-tags": "get the list of top question tags for a user with id being << id >>",
    "get/fmedatastreaming/TrafficLoopCount/TrafficLoopCounts.fmw": "get traffic loop counts",
    "get/v2/users/{user_id}/addons/{provider}/accounts/": "get the list of addon accounts for provider being << provider >> and user id being << user_id >>",
    "post/2.0/posts/{id}/comments/add": "add a comment for a post with id being << id >>",
    "get/api/gen/clients/{language}": "get options for a client library for language being << language >>",
    "delete/api/commands/{id}": "delete a command by id being << id >>",
    "get/open511/jurisdictiongeography": "get the list of jurisdiction geography",
    "get/2.0/questions/{ids}": "get the list of questions with ids being << ids >>",
    "get/2.0/me/suggested-edits": "get the list of my suggested edits",
    "get/2.0/tags/{tags}/faq": "get the faq for tags with tags being << tags >>",
    "get/v2/registrations/{registration_id}/view_only_links/{link_id}/": "get a view only link for registration id being << registration_id >> and link id being << link_id >>",
    "post//api/v1/transactions/{key}/invoice/refunds/{refund_note_number}/send_email": "send email about a refund of a transaction with refund note number being << refund_note_number >> and key being << key >>",
    "patch/api/v2/shop_account_requests/{id}": "update a shop account request by id being << id >>",
    "get/v2/registrations/{registration_id}/view_only_links/": "get the list of view only links for registration id being << registration_id >>",
    "get/v3/platform/private/relation/disease/{disease}": "find related entities by disease with disease being << disease >>",
    "get/v2/nodes/{node_id}/linked_nodes/": "get the list of linked nodes with node id being << node_id >>",
    "get/api/calendars": "get the list of calendars",
    "get/2.0/users/{id}/inbox/unread": "get the list of unread messages for a user by id being << id >>",
    "get/v1/getLocations": "get the list of locations",
    "get/2.0/errors/{id}": "get an error with id being << id >>",
    "get/2.0/access-tokens/{accessTokens}": "get the list of access tokens for access tokens being << accessTokens >>",
    "get/2.0/me/merges": "get the list of merges involving me",
    "get//api/hotel/v0/hotels/{hotelId}/rooms/{roomNumber}": "get a room with room number being << roomNumber >> in a hotel with hotel id being << hotelId >>",
    "get/api/v1/belege/{belegUuid}": "get a belege with beleg uuid being << belegUuid >>",
    "get//series/{id}/images": "get the list of images for a particular series with id being << id >>",
    "post//v1/categories": "get the list of categories",
    "get/Music/Videos/{AccessToken}/{ArtistID}": "get the list of videos by artist id being << ArtistID >>",
    "post/api/reports/status/": "get the list of generated reports",
    "get/2.0/filters/create": "create a filter",
    "get/v1/getFeedVersions": "get the list of feed versions",
    "get/2.0/questions/{ids}/related": "get the list of related questions for questions with ids being << ids >>",
    "get/2.0/me/questions": "get the list of my questions",
    "get/api/commands": "get the list of commands",
    "get/v2/registrations/{registration_id}/files/": "get the list of storage providers for registration id being << registration_id >>",
    "get/TV/ByID/{accesstoken}/{imdbID}": "get tv show by imdb id being << imdbID >>",
    "post/v3/platform/private/target/expression": "get the list of gene expression objects",
    "get/v2/registrations/{registration_id}/citations/{citation_id}/": "get a citation with citation id being << citation_id >> for registration id being << registration_id >>",
    "get/api/session": "get session information",
    "get/x-open-banking/v1.2/branches/geo-location/lat/{latitude}/long/{longitude}": "get the list of branches by longitude being << longitude >> and latitude being << latitude >>",
    "delete/api/v1/user/devices/{serial}": "delete a device with serial being << serial >>",
    "get/api/dataset/2/OpenSearch": "search documents",
    "get/2.0/tags/{tags}/wikis": "get the list of wikis for tags in tags being << tags >>",
    "get/2.0/me/tags/{tags}/top-questions": "get the list of top questions for tags with tags being << tags >>",
    "get/Magnets/ByIMDB/{AccessToken}/{imdbID}": "get the list of magnet hashes for imdb id being << imdbID >>",
    "get/2.0/questions/{ids}/linked": "get the list of linked questions with ids being << ids >>",
    "get/2.0/me/privileges": "get the list of my privileges",
    "get//languages/{id}": "get a language with id being << id >>",
    "get/v2/nodes/{node_id}/wikis/": "get the list of wikis for node id being << node_id >>",
    "get//collection/{slug}/icons": "get the list of icons by slug being << slug >>",
    "get/v2/nodes/{node_id}/files/{provider}/{path}/": "get a file by path being << path >>, node id being << node_id >>, and provider being << provider >>",
    "get/Episodes/ByID/{AccessToken}/{ID}": "get all episodes by ID being << ID >>",
    "post/api/gen/servers/{framework}": "generate a server library for framework being << framework >>",
    "get/2.0/users/moderators/elected": "get the list of elected moderator users",
    "get/v3/platform/public/association": "get association",
    "get/svc/topstories/v2/{section}.{format}": "get the list of top stories articles by section being << section >>",
    "get/v2/metaschemas/": "get the list of meta schemas",
    "get/api/statistics": "get server statistics",
    "post/v2/nodes/{node_id}/forks/": "create a fork of a node with node id being << node_id >>",
    "get/domains/{owner}": "get the list of domains by owner being << owner >>",
    "put//api/hotel/v0/hotels/{hotelId}/yieldable_rateplans/{rateplanCode}/$rates": "save yieldable rates prices for existing yieldable rate plans for hotel id being << hotelId >> and rate plan code being << rateplanCode >>",
    "get/x-open-banking/v1.2/unsecured-sme-loans/segment/{segment}": "get the list of unsecured sme loans by segment being << segment >>",
    "get/v2/providers/preprints/{preprint_provider_id}/": "get a pre print provider for pre print provider id being << preprint_provider_id >>",
    "get//oauth/usage": "get the usage status",
    "get/api/v1/oauth/dialog": "get oauth string",
    "post/api/attributes/computed": "create a computed attribute",
    "get//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}": "get a rate plan of a hotel with hotel id being << hotelId >> for rate plan code being << rateplanCode >>",
    "get/v2/airports/{id}": "get an airport with id being << id >>",
    "post/api/v1/user/devices/{serial}/remoteConnect": "remote connect user device by serial being << serial >>",
    "get/api/v{version}/quality/overall": "get site overall quality",
    "get//api/v1/dictionaries/product_types": "get the list of dictionary product types",
    "get/api/v{version}/reports/{start_date}/to/{end_date}/{report_type}": "get the daily reports for end date being << end_date >>, report type being << report_type >>, and start date being << start_date >>",
    "get/svc/movies/v2/reviews/search.json": "search for movie reviews",
    "delete/apis/{owner}/{api}/.collaboration": "delete a collaboration api by owner being << owner >> and API being << api >>",
    "get/2.0/me/inbox": "get my inbox",
    "get/v2/institutions/{institution_id}/nodes/": "get the list of affiliated nodes for an institution with institution id being << institution_id >>",
    "get/2.0/badges/{ids}/recipients": "get recently awarded badges constrained to badges with ids being << ids >>",
    "get//forecast": "get hourly forecast",
    "get/2.0/posts/{ids}/comments": "get the list of comments for posts by ids being << ids >>",
    "get/open-banking/v1.2/branches": "get the list of branches",
    "get/api/v1/data-store/read/{id}": "get a tag by id being << id >>",
    "get/single-pixel/api/data": "download daymet data",
    "get/open-banking/v1.2/commercial-credit-cards": "get the list of commercial credit cards",
    "get/v2/users/{user_id}/institutions/": "get the list of institutions for a user with user id being << user_id >>",
    "get/Magnets/TVShow/{AccessToken}/{TVShow}": "search for magnet hashes with access token being << AccessToken >>",
    "get/TV/ByName/{AccessToken}/{Query}": "get the list of tv show information by query being << Query >>",
    "get/2.0/me/tags": "get the list of my tags",
    "get/Crew/ByPerson/{AccessToken}/{PersonName}": "get the list of productions for person with person name being << PersonName >>",
    "get/v2/institutions/{institution_id}/registrations/": "get the list of affiliated registrations for institution with institution id being << institution_id >>",
    "get/v2/nodes/": "get the list of nodes",
    "get/api/v2/legal_entities/{id}": "get a legal entity for id being << id >>",
    "get/v2/providers/preprints/{preprint_provider_id}/taxonomies/": "get the list of taxonomies for pre print provider id being << preprint_provider_id >>",
    "patch//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates/{businessDay}": "partially update a rate of a rate plan with business day being << businessDay >> for hotel id being << hotelId >> and rate plan code being << rateplanCode >>",
    "get/v2/users/{user_id}/preprints/": "get the list of pre prints for a user with user id being << user_id >>",
    "get/v2/logs/{log_id}/": "get a log with log id being << log_id >>",
    "patch//api/hotel/v0/hotels/{hotelId}/rateplans/{rateplanCode}/rates": "partially update a rate of rate plan for hotel id being << hotelId >> and rate plan code being << rateplanCode >>",
    "get/api/transportation-incentives-laws/v1/pocs.{output_format}": "get the list of points of contact",
    "delete/v2/nodes/{node_id}/": "delete a node with node id being << node_id >>",
    "get/2.0/me/comments": "get the list of my comments",
    "get//rides?page={page}&per_page={per_page}": "get the list of rides",
    "get/v2/airports/": "get the list of airports",
    "get//rides/{id}/cancel": "cancel a ride with id being << id >>",
    "delete/api/drivers/{id}": "delete a driver by id being << id >>",
    "get/2.0/me/top-answer-tags": "get the list of my top answer tags",
    "get/2.0/posts/{ids}/revisions": "get the list of revisions for posts by ids being << ids >>",
    "get//v1.0/getAemetStation/{stationName}/{period}/": "get aemet station with station name being << stationName >> and period being << period >>",
    "get/api/transportation-incentives-laws/v1.{output_format}": "get the list of transportation incentive laws",
    "post/2.0/comments/{id}/delete": "delete a comment with id being << id >>",
    "get/svc/suggest/v1/timestags": "get the list of time tags",
    "get/2.0/posts": "get the list of posts",
    "post//rides?page={page}&per_page={per_page}": "create a page",
    "get/Magnets/Search/{AccessToken}/{Query}": "search for magnet links by query being << Query >>",
    "get/2.0/me/notifications": "get the list of my notifications",
    "post/domains/{owner}/{domain}": "create a domain by domain being << domain >> and owner being << owner >>",
    "post/api/v1/validate": "validate an open API 3 definition",
    "get//v1.0/getWeatherDisplay/{stationName}/": "get weather display by station name being << stationName >>",
    "get/api/v1/apis/{owner}/{api}": "get the list of API versions by owner being << owner >>",
    "get/2.0/users/{id}/write-permissions": "get the list of write permissions for a user by id being << id >>",
    "get//user/ratings/query": "query the list of ratings",
    "get/v3/platform/public/utils/version": "get API version",
    "get/2.0/comments/{ids}": "get comments with ids being << ids >>",
    "get//api/v1/geoip": "locate my ip",
    "post/v2/nodes/{node_id}/children/": "create a children node with node id being << node_id >>",
    "get/Trailers/Search/{AccessToken}/{Phrase}": "search trailers by phrase being << Phrase >>",
    "get//search/v1/dataset": "search for datasets",
    "get/api/v1/export/html/belege/{belegUuid}": "export a belege with beleg uuid being << belegUuid >>",
    "post/api/reports/dates/": "get the list of report dates",
    "get//collection/{slug}": "get a collection by slug being << slug >>",
    "post/v3/platform/public/evidence": "get evidence",
    "put/api/devices/{id}": "replace a device by id being << id >>",
    "get//updated/query": "get the list of updated series",
    "get/Rating/ByName/{AccessToken}/{Name}": "get rating by name being << name >>",
    "post/v1/video/upload": "get the list of parameters needed for uploading a video",
    "get/2.0/tags/{tag}/top-askers/{period}": "get the list of top askers for tags being << tag >> and period being << period >>",
    "delete/api/attributes/computed/{id}": "delete a computed attribute by id being << id >>",
    "get/api/reports/stops": "get the list of report stops",
    "get//user/ratings": "get the list of my ratings",
    "get//v1.0/getForecastTimeSeries/{latitude}/{longitude}/": "get forecast time series by latitude being << latitude >> and longitude being << longitude >>",
    "get//api/hotel/v0/hotels/{hotelId}/rateplans": "get the list of rate plans for a hotel with id being << hotelId >>",
    "get/2.0/me/timeline": "get my actions' timeline",
    "get/Music/Artist/Art/ID/{AccessToken}/{ArtistID}": "get art for artist with artist id being << ArtistID >>",
    "put//api/hotel/v0/hotels/{hotelId}/rateplans/batch/$rates": "update a list of base rate plans for a hotel with hotel id being << hotelId >>",
    "get/Calendar/Today/{AccessToken}": "return a list of schedules for today for all countries",
    "get/v2/preprints/{preprint_id}/": "get a pre print by pre print id being << preprint_id >>",
    "get/api/v1/devices/{serial}": "get a device by << serial >> being << serial >>",
    "get/api/reports/twitter/create/": "create a twitter report",
    "get/Cast/ByTVShow/{accesstoken}/{ShowName}": "get the list of actors in a tv show with << ShowName >> being << ShowName >>",
    "get/Music/Albums/Art/{AccessToken}/{AlbumID}": "get albums art for album id being << AlbumID >>",
    "get/api/v1/apis/{owner}": "get the list of apis by owner being << owner >>",
    "get/api/v{version}/sites/{site_Ids}": "get sites with site ids being << site_Ids >>",
    "get/api/v{version}/reports/{report_type}": "get the list of daily reports with report type being << report_type >>",
    "get/2.0/info": "get a collection of statistics about the site",
    "get/2.0/suggested-edits/{ids}": "get the list of suggested edits with ids being << ids >>",
    "post/v2/registrations/{registration_id}/forks/": "create a fork for a registration with registration id being << registration_id >>",
    "get/svc/semantic/v2/concept/name/{concept-type}/{specific-concept}.json": "get a specific concept by specific concept being << specific-concept >> and concept type being << concept-type >>",
    "get/2.0/me/inbox/unread": "get the list of unread messages in inbox",
    "get//credit_cards": "get the list of credit cards",
    "post/api/v1/registrierkassen/{registrierkasseUuid}/abschluss": "create an abschluss of registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
    "get/svc/books/v3/lists/best-sellers/history.json": "get the history of best sellers books",
    "get/v2/": null,
    "post//api/v1/transactions": "create a new transaction",
    "get/api/Root": null,
    "post/api/Root": null,
    "get/api/reports/route": "get the list of positions",
    "get/buy/feed/v1_beta/item": "get item feed",
    "get/buy/feed/v1_beta/item_description": "get item description feed",
    "get/buy/feed/v1_beta/item_group": "get item group feed",
    "get/buy/feed/v1_beta/item_snapshot": "get item snapshot feed",
    "get/buy/marketing/v1_beta/merchandised_product": "get merchandised products",
    "get/buy/marketing/v1_beta/merchandised_product/get_also_bought_products": "get also bought products",
    "get/buy/marketing/v1_beta/merchandised_product/get_also_viewed_products": "get also viewed products",
    "get/sell/fulfillment/v1/order": "get orders",
    "get/sell/fulfillment/v1/order/{orderId}": "get an order with id being << orderId >>",
    "get/sell/fulfillment/v1/order/{orderId}/shipping_fulfillment": "get shipping fulfillments for order id being << orderId >>",
    "post/sell/fulfillment/v1/order/{orderId}/shipping_fulfillment": "create a new shipping fulfillment for order id being << orderId >>",
    "get/sell/fulfillment/v1/order/{orderId}/shipping_fulfillment/{fulfillmentId}": "get a shipping fulfillment with with order id being << orderId >> fulfillment id being << fulfillmentId >>",
    "get/api/client/all": "get the list of all clients",
    "get/api/client/candelete": "check if the provided client can be deleted",
    "post/api/client/delete": "delete a client",
    "get/api/client/details": "get the details of a client",
    "post/api/client/new": "create a new client",
    "post/api/client/update": "update a client",
    "get/api/general/countries": "get the list of countries",
    "get/api/general/currencies": "get the list of currencies",
    "get/api/general/dateformats": "get the list of date formats",
    "get/api/general/uilanguages": "get the list of ui languages",
    "get/api/invoice/all": "get the list of all invoices",
    "post/api/invoice/changestatus": "change invoice status",
    "post/api/invoice/delete": "delete an invoice",
    "get/api/invoice/details": "get the details of an invoice",
    "post/api/invoice/new": "create a new invoice",
    "post/api/invoice/sendtoaccountant": "send the invoice to the accountant",
    "post/api/invoice/sendtoclient": "send the invoice to the client",
    "get/api/invoice/status": "get the status of the invoice",
    "post/api/invoice/update": "update an invoice",
    "get/api/invoice/uri": "get the invoice uri",
    "get/api/order/all": "get the list of all orders",
    "post/api/order/changeshippingdetails": "change order shipping details",
    "post/api/order/changestatus": "change order status",
    "post/api/order/delete": "delete an order",
    "get/api/order/details": "get the details of an order",
    "post/api/order/new": "create a new order",
    "get/api/payment/supported": "get the list of supported payment gateways",
    "get/api/product/all": "get the list of products",
    "post/api/product/delete": "delete a product",
    "get/api/product/details": "get the details of product",
    "post/api/product/new": "create a new product",
    "post/api/product/update": "update a product",
    "get/api/tax/all": "get the list of taxes",
    "post/api/tax/delete": "delete a tax",
    "post/api/tax/new": "create a new tax",
    "post/api/tax/update": "update a tax",
    "get/api/worktype/all": "get the list of work types",
    "post/api/worktype/delete": "delete a work type",
    "get/api/worktype/details": "get the details of work type",
    "post/api/worktype/new": "create a new work type",
    "get/api/worktype/search": "search for the list of work types",
    "post/api/worktype/update": "update a work type",
    "get/echo/dfr_rest_services.get_air_compliance": "get the air compliance statuses",
    "post/echo/dfr_rest_services.get_air_compliance": "get the air compliance statuses",
    "get/echo/dfr_rest_services.get_air_quality": "get air quality",
    "post/echo/dfr_rest_services.get_air_quality": "get air quality",
    "get/echo/dfr_rest_services.get_case_formal_actions": "get case formal actions",
    "post/echo/dfr_rest_services.get_case_formal_actions": "get case formal actions",
    "get/echo/dfr_rest_services.get_compliance_history": "get compliance history",
    "post/echo/dfr_rest_services.get_compliance_history": "get compliance history",
    "get/echo/dfr_rest_services.get_compliance_summary": "get compliance summary",
    "post/echo/dfr_rest_services.get_compliance_summary": "get compliance summary",
    "get/echo/dfr_rest_services.get_cwa_3yr_compliance": "get cwa 3yr compliance",
    "post/echo/dfr_rest_services.get_cwa_3yr_compliance": "get cwa 3yr compliance",
    "get/echo/dfr_rest_services.get_cwa_3yr_d80d90_counts": "get cwa 3yr d80d90 counts",
    "post/echo/dfr_rest_services.get_cwa_3yr_d80d90_counts": "get cwa 3yr d80d90 counts",
    "get/echo/dfr_rest_services.get_cwa_cs_compliance": "get cwa cs compliance",
    "post/echo/dfr_rest_services.get_cwa_cs_compliance": "get cwa cs compliance",
    "get/echo/dfr_rest_services.get_cwa_eff_alr": "get cwa eff alr",
    "post/echo/dfr_rest_services.get_cwa_eff_alr": "get cwa eff alr",
    "get/echo/dfr_rest_services.get_cwa_eff_compliance": "get cwa eff compliance",
    "post/echo/dfr_rest_services.get_cwa_eff_compliance": "get cwa eff compliance",
    "get/echo/dfr_rest_services.get_cwa_ps_compliance": "get cwa ps compliance",
    "post/echo/dfr_rest_services.get_cwa_ps_compliance": "get cwa ps compliance",
    "get/echo/dfr_rest_services.get_cwa_rnc_compliance": "get cwa rnc compliance",
    "post/echo/dfr_rest_services.get_cwa_rnc_compliance": "get cwa rnc compliance",
    "get/echo/dfr_rest_services.get_cwa_se_compliance": "get cwa se compliance",
    "post/echo/dfr_rest_services.get_cwa_se_compliance": "get cwa se compliance",
    "get/echo/dfr_rest_services.get_demographics_by_id": "get demographics by id",
    "post/echo/dfr_rest_services.get_demographics_by_id": "get demographics by id",
    "get/echo/dfr_rest_services.get_dfr": "get dfr",
    "post/echo/dfr_rest_services.get_dfr": "get dfr",
    "get/echo/dfr_rest_services.get_enforcement_summary": "get enforcement summary",
    "post/echo/dfr_rest_services.get_enforcement_summary": "get enforcement summary",
    "get/echo/dfr_rest_services.get_extract_dates": "get extract dates",
    "post/echo/dfr_rest_services.get_extract_dates": "get extract dates",
    "get/echo/dfr_rest_services.get_formal_actions": "get formal actions",
    "post/echo/dfr_rest_services.get_formal_actions": "get formal actions",
    "get/echo/dfr_rest_services.get_icis_formal_actions": "get icis formal actions",
    "post/echo/dfr_rest_services.get_icis_formal_actions": "get icis formal actions",
    "get/echo/dfr_rest_services.get_inspections": "get inspections",
    "post/echo/dfr_rest_services.get_inspections": "get inspections",
    "get/echo/dfr_rest_services.get_map": "get map",
    "post/echo/dfr_rest_services.get_map": "get map",
    "get/echo/dfr_rest_services.get_naics": "get naics",
    "post/echo/dfr_rest_services.get_naics": "get naics",
    "get/echo/dfr_rest_services.get_notices": "get notices",
    "post/echo/dfr_rest_services.get_notices": "get notices",
    "get/echo/dfr_rest_services.get_permits": "get permits",
    "post/echo/dfr_rest_services.get_permits": "get permits",
    "get/echo/dfr_rest_services.get_rcra_compliance": "get rcra compliance",
    "post/echo/dfr_rest_services.get_rcra_compliance": "get rcra compliance",
    "get/echo/dfr_rest_services.get_sdwa_lead_and_copper": "get sdwa lead and copper",
    "post/echo/dfr_rest_services.get_sdwa_lead_and_copper": "get sdwa lead and copper",
    "get/echo/dfr_rest_services.get_sdwa_sanitary_surveys": "get sdwa sanitary surveys",
    "post/echo/dfr_rest_services.get_sdwa_sanitary_surveys": "get sdwa sanitary surveys",
    "get/echo/dfr_rest_services.get_sdwa_site_visits": "get sdwa site visits",
    "post/echo/dfr_rest_services.get_sdwa_site_visits": "get sdwa site visits",
    "get/echo/dfr_rest_services.get_sdwa_violations": "get sdwa violations",
    "post/echo/dfr_rest_services.get_sdwa_violations": "get sdwa violations",
    "get/echo/dfr_rest_services.get_sdwis_compliance": "get sdwis compliance",
    "post/echo/dfr_rest_services.get_sdwis_compliance": "get sdwis compliance",
    "get/echo/dfr_rest_services.get_sic_codes": "get sic codes",
    "post/echo/dfr_rest_services.get_sic_codes": "get sic codes",
    "get/echo/dfr_rest_services.get_spatial_metadata": "get spatial metadata",
    "post/echo/dfr_rest_services.get_spatial_metadata": "get spatial metadata",
    "get/echo/dfr_rest_services.get_tri_history": "get tri history",
    "post/echo/dfr_rest_services.get_tri_history": "get tri history",
    "get/echo/dfr_rest_services.get_tri_releases": "get tri releases",
    "post/echo/dfr_rest_services.get_tri_releases": "get tri releases",
    "get/echo/dfr_rest_services.get_tribes": "get tribes",
    "post/echo/dfr_rest_services.get_tribes": "get tribes",
    "get/echo/dfr_rest_services.get_water_quality": "get water quality",
    "post/echo/dfr_rest_services.get_water_quality": "get water quality",
    "get/echo/dfr_rest_services.get_water_quality_details": "get water quality details",
    "post/echo/dfr_rest_services.get_water_quality_details": "get water quality details",
    "get/api/v1/cinema-detail/search/{cinema_name}": "search for cinema detail by cinema name being << cinema_name >>",
    "get/api/v1/cinema-schedule/search/{movie_title}": "search for cinema schedule by movie title being << movie_title >>",
    "get/api/v1/cinema-schedule/searchall/{param}": "search for cinema schedule by param being << param >>",
    "get/api/v1/cinema-shedule-showtime/search/{movie_title}": "search for cinema schedule and showtime for movie title being << movie_title >>",
    "get/api/v1/cinema-shedule-showtime/searchall/{param}": "search for cinema schedule and showtime by param being << param >>",
    "get/api/v1/cinema/search/{id}": "search for a cinema for id being << id >>",
    "get/api/v1/company-credits/search/{movie_title}": "search for company credits for movie title being << movie_title >>",
    "get/api/v1/company-credits/searchall/{param}": "search for company credits for param being << param >>",
    "get/api/v1/company/search/{company_name}": "search for company for company name being << company_name >>",
    "get/api/v1/filmography-type/search/{filmography_description}": "search for filmography type with filmography description being << filmography_description >>",
    "get/api/v1/filmography/search/{movie_title}": "search for filmography for movie title being << movie_title >>",
    "get/api/v1/filmography/searchall/{param}": "search for filmography for param being << param >>",
    "get/api/v1/genre-type/search/{genre_description}": "search for genre type with genre description being << genre_description >>",
    "get/api/v1/genre/search/{movie_title}": "search for movie genre for movie title being << movie_title >>",
    "get/api/v1/genre/searchall/{movie_genre_type}": "search for movie genre for movie genre type being << movie_genre_type >>",
    "get/api/v1/job/search/{job_title}": "search for job for job title being << job_title >>",
    "get/api/v1/job/searchall/{company_name}": "search for job for company name being << company_name >>",
    "get/api/v1/media/search/{movie_title}": "search for movie media for movie title being << movie_title >>",
    "get/api/v1/media/searchall/{user}": "search for cast media for user being << user >>",
    "get/api/v1/movie-cast/search/{movie_title}": "search for movie cast for movie title being << movie_title >>",
    "get/api/v1/movie-cast/searchall/{param}": "search for movie cast for param being << param >>",
    "get/api/v1/movie/search/{movie_title}": "search for movie for movie title being << movie_title >>",
    "get/api/v1/news/search/{title}": "search for news or article for title being << title >>",
    "get/api/v1/people/search/{user}": "search for cast for user being << user >>",
    "get/api/v1/showtime/searchall/{param}": "search for showtime for param being << param >>",
    "get/api/v1/watchlist/search/{movie_title}": "search for watchlist for movie title being << movie_title >>",
    "get/api/v1/watchlist/searchall/{param}": "search for watchlist for param being << param >>",
    "get/ec/marketstat": "get market stat",
    "post/ec/marketstat": "get market stat",
    "get/ec/marketstat/json": "get market stat",
    "post/ec/marketstat/json": "get market stat",
    "get//v1/authenticateUser": "authenticate user",
    "get//v1/checkFilesExist": "check if file exists",
    "get//v1/copyResources": "copy files or folders",
    "get//v1/createFolder": "create a new folder",
    "get//v1/createNotification": "create a new notification",
    "get//v1/createShare": "create a new share",
    "get//v1/createUser": "create a new user",
    "get//v1/deleteNotification": "delete a notification",
    "get//v1/deleteResources": "delete a file or folder",
    "get//v1/deleteShare": "delete a share",
    "get//v1/deleteUser": "delete a user",
    "get//v1/getAccount": "get the account",
    "get//v1/getCurrentUser": "get current user",
    "get//v1/getDownloadFileUrl": "get a unique url for handling file downloads",
    "get//v1/getFileActivityLogs": "get the list of account activity",
    "get//v1/getFolders": "get folders",
    "get//v1/getNotification": "get a notification",
    "get//v1/getNotificationActivity": "get notification activity",
    "get//v1/getNotifications": "get notifications",
    "get//v1/getResourceList": "get a list of files and folders",
    "get//v1/getResourceProperties": "get the properties for each of the files folders",
    "get//v1/getShare": "get a share",
    "get//v1/getShareActivity": "get share activity",
    "get//v1/getShares": "get all shares",
    "get//v1/getUploadFileUrl": "get a unique url for handling file uploads",
    "get//v1/getUser": "get a user",
    "get//v1/getUsers": "get the users",
    "get//v1/logoutUser": "logout user",
    "get//v1/moveResources": "move files and folders",
    "get//v1/previewFile": "preview file",
    "get//v1/renameResource": "rename a file or folder",
    "get//v1/updateNotification": "update a notification",
    "get//v1/updateShare": "update a share",
    "get//v1/updateUser": "update a user",
    "get//v1/userAvailable": "is user available",
    "get/v3/cbb/scores/{format}/AreAnyGamesInProgress": "are any games in progress",
    "get/v3/cbb/scores/{format}/CurrentSeason": "get current season",
    "get/v3/cbb/scores/{format}/Games/{season}": "get schedules for a season by season being << season >>",
    "get/v3/cbb/scores/{format}/GamesByDate/{date}": "get games by date being << date >>",
    "get/v3/cbb/scores/{format}/LeagueHierarchy": "get league hierarchy",
    "get/v3/cbb/scores/{format}/Player/{playerid}": "get a player with player id being << playerid >>",
    "get/v3/cbb/scores/{format}/Players": "get the list of players",
    "get/v3/cbb/scores/{format}/Players/{team}": "get the list of players by team being << team >>",
    "get/v3/cbb/scores/{format}/TeamGameStatsByDate/{date}": "get team game stats by date being << date >>",
    "get/v3/cbb/scores/{format}/TeamSeasonStats/{season}": "get team game stats by season being << season >>",
    "get/v3/cbb/scores/{format}/Tournament/{season}": "get tournament by season being << season >>",
    "get/v3/cbb/scores/{format}/teams": "get the list of teams",
    "get/v3/cbb/stats/{format}/AreAnyGamesInProgress": "are any games in progress",
    "get/v3/cbb/stats/{format}/BoxScore/{gameid}": "get box score by game id being << gameid >>",
    "get/v3/cbb/stats/{format}/BoxScores/{date}": "get the list of box scores by date being << date >>",
    "get/v3/cbb/stats/{format}/BoxScoresDelta/{date}/{minutes}": "get box scores delta by date being << date >> and minutes being << minutes >>",
    "get/v3/cbb/stats/{format}/CurrentSeason": "get current season",
    "get/v3/cbb/stats/{format}/Games/{season}": "get the list of games by season being << season >>",
    "get/v3/cbb/stats/{format}/GamesByDate/{date}": "get games by date being << date >>",
    "get/v3/cbb/stats/{format}/LeagueHierarchy": "get league hierarchy",
    "get/v3/cbb/stats/{format}/Player/{playerid}": "get a player with player id being << playerid >>",
    "get/v3/cbb/stats/{format}/PlayerGameProjectionStatsByDate/{date}": "get player game projection stats by date being << date >>",
    "get/v3/cbb/stats/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}": "get player game projection stats by date being << date >> and player id being << playerid >>",
    "get/v3/cbb/stats/{format}/PlayerGameStatsByDate/{date}": "get player game stats by date being << date >>",
    "get/v3/cbb/stats/{format}/PlayerGameStatsByPlayer/{date}/{playerid}": "get player game stats by date being << date >> and player id being << playerid >>",
    "get/v3/cbb/stats/{format}/PlayerSeasonStats/{season}": "get player season stats by season being << season >>",
    "get/v3/cbb/stats/{format}/PlayerSeasonStatsByPlayer/{season}/{playerid}": "get player season stats by player id being << playerid >> and season being << season >>",
    "get/v3/cbb/stats/{format}/PlayerSeasonStatsByTeam/{season}/{team}": "get player season stats by team being << team >> and season being << season >>",
    "get/v3/cbb/stats/{format}/Players": "get the list of players",
    "get/v3/cbb/stats/{format}/Players/{team}": "get the list of players by team being << team >>",
    "get/v3/cbb/stats/{format}/TeamGameStatsByDate/{date}": "get team game stats by date being << date >>",
    "get/v3/cbb/stats/{format}/TeamSeasonStats/{season}": "get team season stats by season being << season >>",
    "get/v3/cbb/stats/{format}/Tournament/{season}": "get tournament by season being << season >>",
    "get/v3/cbb/stats/{format}/teams": "get the list of teams",
    "get/v3/cfb/scores/{format}/AreAnyGamesInProgress": "are any games in progress",
    "get/v3/cfb/scores/{format}/CurrentSeason": "get current season",
    "get/v3/cfb/scores/{format}/CurrentWeek": "get current week",
    "get/v3/cfb/scores/{format}/Games/{season}": "get the list of games by season being << season >>",
    "get/v3/cfb/scores/{format}/GamesByDate/{date}": "get games by date being << date >>",
    "get/v3/cfb/scores/{format}/GamesByWeek/{season}/{week}": "get games by week being << week >>",
    "get/v3/cfb/scores/{format}/LeagueHierarchy": "get league hierarchy",
    "get/v3/cfb/scores/{format}/Stadiums": "get the list of stadiums",
    "get/v3/cfb/scores/{format}/TeamGameStatsByWeek/{season}/{week}": "get team game stats by week being << week >> and season being << season >>",
    "get/v3/cfb/scores/{format}/TeamSeasonStats/{season}": "get team season stats by season being << season >>",
    "get/v3/cfb/scores/{format}/Teams": "get the list of teams",
    "get/golf/v2/{format}/DfsSlatesByTournament/{tournamentid}": "get dfs slates by tournament being << tournamentid >>",
    "get/golf/v2/{format}/Injuries": "get the list of injuries",
    "get/golf/v2/{format}/InjuriesByHistorical": "get the list of injuries by historical",
    "get/golf/v2/{format}/Leaderboard/{tournamentid}": "get the leader board by tournament id being << tournamentid >>",
    "get/golf/v2/{format}/News": "get the list of news",
    "get/golf/v2/{format}/NewsByDate/{date}": "get news by date being << date >>",
    "get/golf/v2/{format}/NewsByPlayerID/{playerid}": "get news by player id being << playerid >>",
    "get/golf/v2/{format}/Player/{playerid}": "get a player by player id being << playerid >>",
    "get/golf/v2/{format}/PlayerSeasonStats/{season}": "get player season stats by season being << season >>",
    "get/golf/v2/{format}/PlayerTournamentProjectionStats/{tournamentid}": "get player tournament projection stats by tournament id being << tournamentid >>",
    "get/golf/v2/{format}/PlayerTournamentStatsByPlayer/{tournamentid}/{playerid}": "get player tournament stats by tournament id being << tournamentid >> and player id being << playerid >>",
    "get/golf/v2/{format}/Players": "get the list of players",
    "get/golf/v2/{format}/Tournaments": "get the list of tournaments",
    "get/golf/v2/{format}/Tournaments/{season}": "get the list of tournaments by season being << season >>"
}