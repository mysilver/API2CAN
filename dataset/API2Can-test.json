[
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "all | full-time | part-time | [reviewer-name]------Specify all to get all Times reviewers, or specify full-time or part-time to get that subset. Specify a reviewer's name to get details about a particular reviewer.---",
                "location": "path",
                "name": "resource-type"
            }
        ],
        "response_desc": "An array of Movie Critics",
        "url": "/svc/movies/v2/critics/{resource-type}.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__movie_reviews__2.0.0.yaml",
        "canonical_expr": "get the list of movie critics by resource type being << resource-type >>",
        "base_path": "/svc/movies/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Search keywords; matches movie title and indexed terms------To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query='28+days+later'). Otherwise, responses will include partial matches (\"head words\") as well as exact matches (e.g., president will match president, presidents and presidential).---  ---  If you specify multiple terms without quotation marks, they will be combined in an OR search.---  ---  If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics' Picks request.---",
                "location": "query",
                "name": "query"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Single date: YYYY-MM-DD------Start and end date: YYYY-MM-DD;YYYY-MM-DD------The publication-date is the date the review was first published in The Times.---",
                "location": "query",
                "name": "publication-date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Single date: YYYY-MM-DD------Start and end date: YYYY-MM-DD;YYYY-MM-DD------The opening-date is the date the movie's opening date in the New York region.---",
                "location": "query",
                "name": "opening-date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.---",
                "location": "query",
                "name": "reviewer"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set this parameter to Y to limit the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick=N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)---",
                "location": "query",
                "name": "critics-pick"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sets the sort order of the results.------Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.------If you do not specify a sort order, the results will be ordered by publication-date.---",
                "location": "query",
                "name": "order"
            },
            {
                "example": 20,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Positive integer, multiple of 20",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "An array of Movies",
        "url": "/svc/movies/v2/reviews/search.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__movie_reviews__2.0.0.yaml",
        "canonical_expr": "search for movie reviews",
        "base_path": "/svc/movies/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Specify all to retrieve all reviews, including NYT Critics' Picks.------Specify picks to get NYT Critics' Picks currently in theaters.------",
                "location": "path",
                "name": "resource-type"
            },
            {
                "example": 20,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Positive integer, multiple of 20",
                "location": "query",
                "name": "offset"
            },
            {
                "example": "by-publication-date",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sets the sort order of the results.------Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.------If you do not specify a sort order, the results will be ordered by publication-date.---",
                "location": "query",
                "name": "order"
            }
        ],
        "response_desc": "An array of Movies",
        "url": "/svc/movies/v2/reviews/{resource-type}.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__movie_reviews__2.0.0.yaml",
        "canonical_expr": "search for movie reviews",
        "base_path": "/svc/movies/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.",
                "location": "query",
                "name": "query"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in \"concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]\".---",
                "location": "path",
                "name": "concept-type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding \".json\" like with \"Baseball.json\".---",
                "location": "path",
                "name": "specific-concept"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "\"all\" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query------Optional fields are returned in result_set. They are briefly explained here:------pages: A list of topic pages associated with a specific concept.---ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.---links: A list of links from this concept to external data resources.---taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.---combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.---geocodes: For geographic concepts, the full GIS record from geonames.---article_list: A list of up to 10 articles associated with this concept.---scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.---search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.---",
                "location": "query",
                "name": "fields"
            }
        ],
        "response_desc": "An array of Concepts",
        "url": "/svc/semantic/v2/concept/name/{concept-type}/{specific-concept}.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__semantic_api__2.0.0.yaml",
        "canonical_expr": "get a specific concept by specific concept being << specific-concept >> and concept type being << concept-type >>",
        "base_path": "/svc/semantic/v2/concept"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.",
                "location": "query",
                "name": "query"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "\"all\" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query------Optional fields are returned in result_set. They are briefly explained here:------pages: A list of topic pages associated with a specific concept.---ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.---links: A list of links from this concept to external data resources.---taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.---combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.---geocodes: For geographic concepts, the full GIS record from geonames.---article_list: A list of up to 10 articles associated with this concept.---scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.---search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.---",
                "location": "query",
                "name": "fields"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Integer value for the index count from the first concept to the last concept, sorted alphabetically. Used in a Search Query. A Search Query will return up to 10 concepts in its results.",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "An array of Concepts",
        "url": "/svc/semantic/v2/concept/search.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__semantic_api__2.0.0.yaml",
        "canonical_expr": "search for concepts",
        "base_path": "/svc/semantic/v2/concept"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The complete URL of a specific news item, URL-encoded or backslash-escaped",
                "location": "query",
                "name": "url"
            }
        ],
        "response_desc": "An array of Articles",
        "url": "/svc/news/v3/content.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__timeswire__3.0.0.yaml",
        "canonical_expr": "get the list of articles",
        "base_path": "/svc/news/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the set of items by originating source------all = items from both The New York Times and The International New York Times---nyt = New York Times items only---iht = International New York Times items only---",
                "location": "path",
                "name": "source"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the set of items by one or more sections---all | One or more section names, separated by semicolons------ To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:--- http://api.nytimes.com/svc/news/v3/content/section-list.json---",
                "location": "path",
                "name": "section"
            },
            {
                "example": 20,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the number of results, between 1 and 20",
                "location": "query",
                "name": "limit"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sets the starting point of the result set",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "An array of Articles",
        "url": "/svc/news/v3/content/{source}/{section}.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__timeswire__3.0.0.yaml",
        "canonical_expr": "get the list of articles by source being << source >> and section being << section >>",
        "base_path": "/svc/news/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the set of items by originating source------all = items from both The New York Times and The International New York Times---nyt = New York Times items only---iht = International New York Times items only---",
                "location": "path",
                "name": "source"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sets the starting point of the result set",
                "location": "query",
                "name": "offset"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the set of items by one or more sections---all | One or more section names, separated by semicolons------ To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:--- http://api.nytimes.com/svc/news/v3/content/section-list.json---",
                "location": "path",
                "name": "section"
            },
            {
                "example": 20,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the number of results, between 1 and 20",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the set of items by time published, integer in number of hours",
                "location": "path",
                "name": "time-period"
            }
        ],
        "response_desc": "An array of Articles",
        "url": "/svc/news/v3/content/{source}/{section}/{time-period}.json",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__timeswire__3.0.0.yaml",
        "canonical_expr": "get the list of articles by section being << section >> and time period being << time-period >> and source being << source >>",
        "base_path": "/svc/news/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your search query",
                "location": "query",
                "name": "query"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If you do not specify a value for filter (see the Optional Parameters), your query will be matched to tags in all four Times dictionaries: subject, geographic location, organization and person. To use more than one, separate with commas.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sets the maximum number of results",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "An array of tags",
        "url": "/svc/suggest/v1/timestags",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "nytimes.com__times_tags__1.0.0.yaml",
        "canonical_expr": "get the list of time tags",
        "base_path": "/svc/suggest/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The section the story appears in.",
                "location": "path",
                "name": "section"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "if this is JSONP or JSON",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "An array of articles",
        "url": "/svc/topstories/v2/{section}.{format}",
        "desc": "The Top Stories API returns a list of articles and associated images currently on the specified section.  Support JSON and JSONP.\n",
        "operation_id": null,
        "summary": "Top Stories",
        "api": "nytimes.com__top_stories__2.0.0.yaml",
        "canonical_expr": "get the list of top stories articles by section being << section >>",
        "base_path": "/svc/topstories/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "10",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "time interval for the count aggregation (from 0 to 23)",
                "location": "query",
                "name": "hour"
            },
            {
                "example": "127752",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "basic residential unit",
                "location": "path",
                "name": "location"
            },
            {
                "example": "2",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "age-group specification (1: 8-18, 2: 19-25, 3: 26-35, 4: 36-55, 5: 56+)",
                "location": "query",
                "name": "ageGroup"
            },
            {
                "example": "1",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "occurence type in the basic residential unit (1 - transit, 2 - visit)",
                "location": "query",
                "name": "occurenceType"
            }
        ],
        "response_desc": "Response with the requested content.",
        "url": "/sociodemo/sandbox/api/age/{location}",
        "desc": "Get count of people in a given location and an hour, aggregated by age.",
        "operation_id": "age",
        "summary": "Presence in a location aggregated by age",
        "api": "o2.cz__sociodemo__1.2.0.yaml",
        "canonical_expr": "get the count of people in a given location being << location >>",
        "base_path": "/sociodemo/sandbox/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "10",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "time interval for the count aggregation (from 0 to 23)",
                "location": "query",
                "name": "hour"
            },
            {
                "example": "127752",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "basic residential unit",
                "location": "path",
                "name": "location"
            },
            {
                "example": "1",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "occurence type in the basic residential unit (1 - transit, 2 - visit)",
                "location": "query",
                "name": "occurenceType"
            },
            {
                "example": "1",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "gender specification (1 - male, 2 - female)",
                "location": "query",
                "name": "g"
            }
        ],
        "response_desc": "Response with the requested content.",
        "url": "/sociodemo/sandbox/api/gender/{location}",
        "desc": "Get count of people in a given location and an hour, aggregated by gender.",
        "operation_id": "gender",
        "summary": "Presence in a location aggregated by gender",
        "api": "o2.cz__sociodemo__1.2.0.yaml",
        "canonical_expr": "get the count of people in a given location being << location >>",
        "base_path": "/sociodemo/sandbox/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Response with the requested content.",
        "url": "/sociodemo/sandbox/api/info",
        "desc": "",
        "operation_id": "getInfo",
        "summary": "Information about versions of application and data.",
        "api": "o2.cz__sociodemo__1.2.0.yaml",
        "canonical_expr": "get info of an API",
        "base_path": "/sociodemo/sandbox/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "The JWT `accessToken` to use for accessing secured resourced as well as the `registrierkassenUuid` of the corresponding \"Registrierkasse\".",
        "url": "/api/v1/auth",
        "desc": "Request a JWT access token using your obono username and password.",
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get an auth token",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Beleg` to fetch.",
                "location": "path",
                "name": "belegUuid"
            }
        ],
        "response_desc": "The requested `Beleg` resource.",
        "url": "/api/v1/belege/{belegUuid}",
        "desc": "Retrieves a particular `Beleg` from the \"Datenerfassungsprotokoll\".",
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get a belege with beleg uuid being << belegUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse` to export.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).",
                "location": "query",
                "name": "after"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).",
                "location": "query",
                "name": "before"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Export `Posten` instead of `Belegdaten`.",
                "location": "query",
                "name": "posten"
            }
        ],
        "response_desc": "The exported data of a particular `Registrierkasse` in its CSV representation.",
        "url": "/api/v1/export/csv/registrierkassen/{registrierkasseUuid}/belege",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get a registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of a particular `Beleg` to export.",
                "location": "path",
                "name": "belegUuid"
            }
        ],
        "response_desc": "A particular `Beleg` in its HTML representation.",
        "url": "/api/v1/export/html/belege/{belegUuid}",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "export a belege with beleg uuid being << belegUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of a particular `Beleg` to export.",
                "location": "path",
                "name": "belegUuid"
            }
        ],
        "response_desc": "A particular `Beleg` in its PDF representation.",
        "url": "/api/v1/export/pdf/belege/{belegUuid}",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "export the belege with be leg uuid being << belegUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of a particular `Beleg` to export.",
                "location": "path",
                "name": "belegUuid"
            }
        ],
        "response_desc": "The RKSV QR-Code as PNG file.",
        "url": "/api/v1/export/qr/belege/{belegUuid}",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "export the belege with beleg uuid being << belegUuid >> in qr",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": 42,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of characters per line.",
                "location": "query",
                "name": "width"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of a particular `Beleg` to export.",
                "location": "path",
                "name": "belegUuid"
            },
            {
                "example": true,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Should the RKSV QR code should be rendered?",
                "location": "query",
                "name": "qr"
            },
            {
                "example": "raw",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The encoding of the binary data.",
                "location": "query",
                "name": "encoding"
            },
            {
                "example": "esc",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The thermal printer dialect.",
                "location": "query",
                "name": "dialect"
            }
        ],
        "response_desc": "A particular `Beleg` in its ESC/POS or STAR representation.",
        "url": "/api/v1/export/thermal-print/belege/{belegUuid}",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "export the belege with beleg uuid being << belegUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse` to export.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that were saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).",
                "location": "query",
                "name": "after"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that were saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).",
                "location": "query",
                "name": "before"
            }
        ],
        "response_desc": "The exported data of a particular `Registrierkasse` in its Microsoft Excel representation.",
        "url": "/api/v1/export/xls/registrierkassen/{registrierkasseUuid}/belege",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "export xls of the registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of a particular `Registrierkasse` to fetch.",
                "location": "path",
                "name": "registrierkasseUuid"
            }
        ],
        "response_desc": "Information about a particular `Registrierkasse`.",
        "url": "/api/v1/registrierkassen/{registrierkasseUuid}",
        "desc": "Returns information about a particular `Registrierkasse`.",
        "operation_id": "getRegistrierkasse",
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get a registrierkassen for registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "abschlussbelegdaten.Abschluss-Ende-Datum-Uhrzeit"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "abschlussbelegdaten.Abschluss-Beginn-Datum-Uhrzeit"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/registrierkassen/{registrierkasseUuid}/abschluss",
        "desc": "Generates an `Abschlussbeleg`.",
        "operation_id": "createAbschluss",
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "create an abschluss of registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that where saved before the specified date-time string (i.e., anything that `Date.parse()` can parse).",
                "location": "query",
                "name": "before"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Skips the specified number of results from the result set.",
                "location": "query",
                "name": "offset"
            },
            {
                "example": "export",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Determines the format of the `Beleg` collection.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that where saved after the specified date-time string (i.e., anything that `Date.parse()` can parse).",
                "location": "query",
                "name": "after"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that have at most a particular `Belegnummer`.",
                "location": "query",
                "name": "lte"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the number of returned results.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": "asc",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Determines the sorting order.",
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Only return results that have at least a particular `Belegnummer`.",
                "location": "query",
                "name": "gte"
            }
        ],
        "response_desc": "The `Beleg` collection from the \"Datenerfassungsprotokoll\".",
        "url": "/api/v1/registrierkassen/{registrierkasseUuid}/belege",
        "desc": "Retrieves the `Beleg` collection from the \"Datenerfassungsprotokoll\".",
        "operation_id": "getBelege",
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get the belege of registrierkassen with registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse` that contains the requested `Beleg`.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Beleg` to fetch.",
                "location": "path",
                "name": "belegUuid"
            }
        ],
        "response_desc": "The requested `Beleg` resource.",
        "url": "/api/v1/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}",
        "desc": "Retrieves a particular `Beleg` from the \"Datenerfassungsprotokoll\".",
        "operation_id": null,
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get a belege of a registrierkassen for beleg uuid being << belegUuid >> and registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse` to use for signing data.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Beleg` to store.",
                "location": "path",
                "name": "belegUuid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-Adresse1"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Training?",
                "location": "body",
                "name": "belegdaten.Training"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-ID"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The `Beleg-UUID` property of the `Beleg` to be cancelled",
                "location": "body",
                "name": "belegdaten.Storno-Beleg-UUID"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-Adresse2"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-ID-Typ"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Storno-Text"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Externer-Beleg-Bezeichnung"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-Ort"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount in cents",
                "location": "body",
                "name": "belegdaten.Posten.BruttoBetrag"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Posten.Bezeichnung"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Posten.Menge"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Posten.Externer-Beleg-Belegkreis"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Posten.Satz"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Posten.Externer-Beleg-Referenz"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount in cents",
                "location": "body",
                "name": "belegdaten.Posten.NettoBetrag"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Posten.Externer-Beleg-Bezeichnung"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-Kopfzeile"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Notizen"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Notizen"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Zahlungen.Bezeichnung"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount in cents",
                "location": "body",
                "name": "belegdaten.Zahlungen.Betrag"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Zahlungen.Referenz"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Externer-Beleg-Referenz"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-PLZ"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Rabatte.Bezeichnung"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Rabatte.Satz"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount in cents",
                "location": "body",
                "name": "belegdaten.Rabatte.Betrag-Brutto"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount in cents",
                "location": "body",
                "name": "belegdaten.Rabatte.Betrag-Netto"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Storno?",
                "location": "body",
                "name": "belegdaten.Storno"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Unternehmen-Fusszeile"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Externer-Beleg-Belegkreis"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "belegdaten.Kunde"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}",
        "desc": "Signs a receipt and stores it in the \"Datenerfassungsprotokoll\".",
        "operation_id": "addBeleg",
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "add beleg of a registrierkassen for beleg uuid being << belegUuid >> and registrierkasse uuid being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The `_uuid` of the `Registrierkasse`.",
                "location": "path",
                "name": "registrierkasseUuid"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "year"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "month"
            }
        ],
        "response_desc": "Information about `Monatsbelege`.",
        "url": "/api/v1/registrierkassen/{registrierkasseUuid}/monatsbelege",
        "desc": "Returns a list of `Monatsbelege`.",
        "operation_id": "getMonatsbelege",
        "summary": null,
        "api": "obono.at__1.3.3.0.yaml",
        "canonical_expr": "get the list of monatsbelege of an registrierkassen with << registrierkasseUuid >> being << registrierkasseUuid >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "cnarenal",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Weather station to compare, values: cnareanl|rcnp | cmsap|boyaenderrocat|areopuertopalma",
                "location": "path",
                "name": "stationName"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/compareStation/{stationName}/",
        "desc": "Get forecast and realtime information for known points<br/>None",
        "operation_id": "compareStation",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "compare station with station name being << stationName >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "lastdata",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period of time to get the data. Options: lastdata lastday",
                "location": "path",
                "name": "period"
            },
            {
                "example": "aeropuertopalma",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "station name currently: aeropuertopalma | caboblanco ",
                "location": "path",
                "name": "stationName"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getAemetStation/{stationName}/{period}/",
        "desc": "Get data from the aemet stations<br/>None",
        "operation_id": "getAemetStation",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get aemet station with station name being << stationName >> and period being << period >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "EW013",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "currently: 'EW013'|'EW008'",
                "location": "path",
                "name": "easywindId"
            },
            {
                "example": "latestdata",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period of time to get the data latestdata|latesthour|latestday",
                "location": "query",
                "name": "period"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getEasyWind/{easywindId}/",
        "desc": "Get data from the easywind weather stations<br/>None",
        "operation_id": "getEasywind",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get easy wind with easy wind id being << easywindId >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "trofeoprincesasofia",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "currently: 'trofeoprincesasofia'",
                "location": "path",
                "name": "eventId"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getEventStations/{eventId}/",
        "desc": "Get stations in an event<br/>None",
        "operation_id": "getEventStations",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get event stations with event id being << eventId >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "language"
            },
            {
                "example": "cnarenal",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "base URL for the the",
                "location": "path",
                "name": "yatchclubid"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getForecastPoints/{yatchclubid}/language/{language}",
        "desc": "Get forecast points of a yatchclub<br/>None",
        "operation_id": "getForecastPoints",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get forecast points by yatch club id being << yatchclubid >> and language being << language >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ",
                "location": "query",
                "name": "inittime"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Comma separated values for the wave parameteres height,direction,period",
                "location": "query",
                "name": "wave"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "optional number of hours in string. Will be added to init forecast date",
                "location": "query",
                "name": "hours"
            },
            {
                "example": 2.74,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "longitude for the forecast",
                "location": "path",
                "name": "longitude"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ",
                "location": "query",
                "name": "endtime"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": " Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&wave=height,direction,period",
                "location": "query",
                "name": "weather"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "optional number of days in string. Will be added to init forecast date",
                "location": "query",
                "name": "days"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Direct file I want to extract",
                "location": "query",
                "name": "entryid"
            },
            {
                "example": 39.49,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "latitude for the forecast",
                "location": "path",
                "name": "latitude"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getForecastTimeSeries/{latitude}/{longitude}/",
        "desc": "Get timeseries forecast information<br/>None",
        "operation_id": "getForecastTimeSeries",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get forecast time series by latitude being << latitude >> and longitude being << longitude >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "initial date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ",
                "location": "query",
                "name": "inittime"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Comma separated values for the wave parameteres height,direction,period",
                "location": "query",
                "name": "wave"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "optional number of hours in string. Will be added to init forecast date",
                "location": "query",
                "name": "hours"
            },
            {
                "example": 2.74,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "longitude for the forecast",
                "location": "path",
                "name": "longitude"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "end date for the forecast ISO string YYYY-MM-DDTHH:mm:SS.SZ",
                "location": "query",
                "name": "endtime"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": " Comma separated values for the weather parameteres temperature,rain,wind_u,wind_v,gust,pressure,cloud,humidity&wave=height,direction,period",
                "location": "query",
                "name": "weather"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "optional number of days in string. Will be added to init forecast date",
                "location": "query",
                "name": "days"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Direct file I want to extract",
                "location": "query",
                "name": "entryid"
            },
            {
                "example": 39.49,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "latitude for the forecast",
                "location": "path",
                "name": "latitude"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/",
        "desc": "Get timeseries forecast information<br/>None",
        "operation_id": "getForecastTimeSeriesWrf",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get forecast time series wrf by longitude being << longitude >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "lastdata",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period of time to get the data. Options: lastdata lasthour lastday",
                "location": "path",
                "name": "period"
            },
            {
                "example": "boyaenderrocat",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "station name currently: boyaenderrocat | playadepalma",
                "location": "path",
                "name": "stationName"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getSocibWeatherStation/{stationName}/{period}/",
        "desc": "Get data from the socib bahia de palma buoy<br/>None",
        "operation_id": "getSocibWeatherStation",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get socib weather station by station name being << stationName >> and period being << period >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "latestdata",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period of time to get the data latestdata|latesthour|latestday|dailylog",
                "location": "query",
                "name": "period"
            },
            {
                "example": "cnarenal",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "currently: 'cnarenal'|'campastilla' | 'cncg'",
                "location": "path",
                "name": "stationName"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1.0/getWeatherDisplay/{stationName}/",
        "desc": "Get data from the weather display software<br/>None",
        "operation_id": "getWeatherDisplay",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get weather display by station name being << stationName >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "No response was specified",
        "url": "//v1.0/getWebCams/",
        "desc": "Get forecast and realtime information for known points<br/>None",
        "operation_id": "getWebCams",
        "summary": null,
        "api": "oceandrivers.com__1.0.yaml",
        "canonical_expr": "get the list of web cams",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page number to return.",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Movie title to search for. One of t, i or s is required.",
                "location": "query",
                "name": "t"
            },
            {
                "example": "json",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The data type to return.",
                "location": "query",
                "name": "r"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Movie title to search for. One of t, i or s is required.",
                "location": "query",
                "name": "s"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP callback name.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.",
                "location": "query",
                "name": "i"
            },
            {
                "example": "short",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Return short or full plot.",
                "location": "query",
                "name": "plot"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of release.",
                "location": "query",
                "name": "y"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Include Rotten Tomatoes ratings.",
                "location": "query",
                "name": "tomatoes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of result to return.",
                "location": "query",
                "name": "type"
            },
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "API version (reserved for future use).",
                "location": "query",
                "name": "v"
            }
        ],
        "response_desc": "Default response",
        "url": "//",
        "desc": "Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search",
        "operation_id": "Get_OMDb Search",
        "summary": "OMDb Search",
        "api": "omdbapi.com__1.yaml",
        "canonical_expr": "get the version API",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "https://raw.githubusercontent.com/Mermade/openapi-webconverter/master/contract/openapi.json",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The URL to retrieve the OpenAPI 3.0.x definition from",
                "location": "query",
                "name": "url"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/badge",
        "desc": "",
        "operation_id": "getBadge",
        "summary": "Return a redirect to a badge svg file depending on a source definition's validity",
        "api": "openapi-converter.herokuapp.com__1.0.0.yaml",
        "canonical_expr": "get a badge",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "https://raw.githubusercontent.com/Mermade/openapi-webconverter/master/contract/swagger.json",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The URL to retrieve the OpenAPI 2.0 definition from",
                "location": "query",
                "name": "url"
            }
        ],
        "response_desc": "default",
        "url": "/api/v1/convert",
        "desc": "",
        "operation_id": "convertUrl",
        "summary": "Convert a Swagger 2.0 definition to OpenAPI 3.0.x from a URL",
        "api": "openapi-converter.herokuapp.com__1.0.0.yaml",
        "canonical_expr": "convert a swagger 2 to open API 3",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "swagger: 2.0---info:---  title: API---  version: 1.0.0---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The text of a Swagger 2.0 definition to convert",
                "location": "formData",
                "name": "source"
            },
            {
                "example": "",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "formData",
                "name": "validate"
            },
            {
                "example": "",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The file to upload and convert",
                "location": "formData",
                "name": "filename"
            }
        ],
        "response_desc": "default",
        "url": "/api/v1/convert",
        "desc": "",
        "operation_id": "convert",
        "summary": "Convert a Swagger 2.0 definition passed in the body to OpenAPI 3.0.x ",
        "api": "openapi-converter.herokuapp.com__1.0.0.yaml",
        "canonical_expr": "convert a swagger 2 to open API 3",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "default",
        "url": "/api/v1/status",
        "desc": "",
        "operation_id": "getStatus",
        "summary": "Get the status of the API",
        "api": "openapi-converter.herokuapp.com__1.0.0.yaml",
        "canonical_expr": "get status",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "https://raw.githubusercontent.com/Mermade/openapi-webconverter/master/contract/openapi.json",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The URL to retrieve the OpenAPI 3.0.x definition from",
                "location": "query",
                "name": "url"
            }
        ],
        "response_desc": "default",
        "url": "/api/v1/validate",
        "desc": "",
        "operation_id": "validateUrl",
        "summary": "Validate an OpenAPI 3.0.x definition",
        "api": "openapi-converter.herokuapp.com__1.0.0.yaml",
        "canonical_expr": "validate url of an open API 3 definition",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "openapi: 3.0.0---info:---  title: API---  version: 1.0.0---paths: {}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The text of an OpenAPI 3.0.x definition to validate",
                "location": "formData",
                "name": "source"
            },
            {
                "example": "",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The file to upload and validate",
                "location": "formData",
                "name": "filename"
            }
        ],
        "response_desc": "default",
        "url": "/api/v1/validate",
        "desc": "",
        "operation_id": "validate",
        "summary": "Validate an OpenAPI 3.0.x definition supplied in the body of the request",
        "api": "openapi-converter.herokuapp.com__1.0.0.yaml",
        "canonical_expr": "validate an open API 3 definition",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "free text query to match",
                "location": "query",
                "name": "query"
            },
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "the maximum number of APIs to return",
                "location": "query",
                "name": "limit"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "the offset where to start from when fetching a limited number of APIs",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "a list of APIs in API meta list format",
        "url": "/api/v1/apis",
        "desc": "",
        "operation_id": "search_apis",
        "summary": "Retrieves a list of currently defined APIs in API meta list format.",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "get the list of apis",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            }
        ],
        "response_desc": "a list of APIs in API meta list format",
        "url": "/api/v1/apis/{owner}",
        "desc": "",
        "operation_id": "get_owner_apis",
        "summary": "Retrieves an API meta listing of all APIs defined for this owner",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "get the list of apis by owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the API was successfully deleted",
        "url": "/api/v1/apis/{owner}/{api}",
        "desc": "",
        "operation_id": "delete_api",
        "summary": "Deletes the specified API",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "delete the API with api being << api >> for owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "a list of API versions in API meta format",
        "url": "/api/v1/apis/{owner}/{api}",
        "desc": null,
        "operation_id": "get_api_versions",
        "summary": "Retrieves an API meta listing for all API versions for this owner and API",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "get the list of API versions by owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Defines whether the API has to be private",
                "location": "query",
                "name": "private"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "force update",
                "location": "query",
                "name": "force"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "definition"
            }
        ],
        "response_desc": "the API was successfully saved",
        "url": "/api/v1/apis/{owner}/{api}",
        "desc": "Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.",
        "operation_id": "save_definition",
        "summary": "Saves the provided Swagger definition",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "create an API for owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the API version was successfully deleted",
        "url": "/api/v1/apis/{owner}/{api}/{version}",
        "desc": "",
        "operation_id": "delete_api_version",
        "summary": "Deletes a particular version of the specified API",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "delete an api version by version being << version >> and API with being << api >> for owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the API version was successfully published",
        "url": "/api/v1/apis/{owner}/{api}/{version}",
        "desc": "",
        "operation_id": "publish_api_version",
        "summary": "Publish a particular version of the specified API",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "publish API version of the API with being << api >> for owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the Swagger API in JSON format",
        "url": "/api/v1/apis/{owner}/{api}/{version}/swagger.json",
        "desc": "",
        "operation_id": "get_json_definition",
        "summary": "Retrieves the Swagger definition for the specified API and version in JSON format",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "get json definition for the API with being << api >> and version being << version >> for owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the Swagger API in YAML format",
        "url": "/api/v1/apis/{owner}/{api}/{version}/swagger.yaml",
        "desc": "",
        "operation_id": "get_yaml_definition",
        "summary": "Retrieves the Swagger definition for the specified API and version in YAML format",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "get yaml definition of the API with being << api >> and version being << version >> for owner being << owner >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "username"
            }
        ],
        "response_desc": "login successful",
        "url": "/api/v1/auth/login",
        "desc": "",
        "operation_id": "login",
        "summary": "Log in to OpenAPI space",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "login",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "username"
            }
        ],
        "response_desc": "login successful",
        "url": "/api/v1/auth/login/apinf",
        "desc": "",
        "operation_id": "login_apinf",
        "summary": "Log in to OpenAPI space using an APInf account",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "login using apinf account",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "auth_token"
            }
        ],
        "response_desc": "login successful",
        "url": "/api/v1/auth/login/apinf_token",
        "desc": "",
        "operation_id": "login_apinf_token",
        "summary": "Log in to OpenAPI space using an APInf authentication token",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "login using apinf token",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "logout successful",
        "url": "/api/v1/auth/logout",
        "desc": "",
        "operation_id": "logout",
        "summary": "Log out from OpenAPI space",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "logout from open api",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "logged in",
        "url": "/api/v1/auth/ping",
        "desc": "",
        "operation_id": "ping",
        "summary": "Check whether or not you are authenticated",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "check if I am authenticated",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "registration successful",
        "url": "/api/v1/auth/register",
        "desc": "",
        "operation_id": "register",
        "summary": "Register to OpenAPI space",
        "api": "openapi.space__1.0.0.yaml",
        "canonical_expr": "register to open api",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "when true results are not deduplicated.",
                "location": "query",
                "name": "no_dedupe"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "if true the request is included in the response.",
                "location": "query",
                "name": "add_request"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "integer from 1-10. Only results with at least this confidence are returned.",
                "location": "query",
                "name": "min_confidence"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "format of the response. One of 'json', 'xml' or 'map'.",
                "location": "path",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "an IETF format language code (ex: 'es' or 'pt-BR').",
                "location": "query",
                "name": "language"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "an application key.",
                "location": "query",
                "name": "key"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "when true we attempt to abbreviate the formatted field in the response.",
                "location": "query",
                "name": "abbrv"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "two letter code ISO 3166-1 Alpha 2 code to limit results to that country.",
                "location": "query",
                "name": "countrycode"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "string or lat,lng to be geocoded.",
                "location": "query",
                "name": "q"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "when true annotations are not added to results.",
                "location": "query",
                "name": "no_annotations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "wraps the returned JSON with a function name.",
                "location": "query",
                "name": "jsonp"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "when true results are pretty printed. Useful for debugging.",
                "location": "query",
                "name": "pretty"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API version.",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "when true query content is not logged.",
                "location": "query",
                "name": "no_record"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat).",
                "location": "query",
                "name": "bounds"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "maximum number of results to return. Default is 10. Maximum is 100.",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "Successful response",
        "url": "/geocode/v{version}/{format}",
        "desc": "geocode a query",
        "operation_id": null,
        "summary": null,
        "api": "opencagedata.com__1.yaml",
        "canonical_expr": "geocode a query for format being << format >>",
        "base_path": "/geocode"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "0100000US,0400000US53",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of entity IDs.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            }
        ],
        "response_desc": "OK",
        "url": "//data/v1/availability/",
        "desc": "",
        "operation_id": null,
        "summary": "Find all available data for some entities",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "find all available data",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "demographics.population.count",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Full ID of the variable to retrieve.",
                "location": "path",
                "name": "variable"
            },
            {
                "example": "year",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Constraint to use.",
                "location": "query",
                "name": "constraint"
            },
            {
                "example": "0100000US,0400000US53",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of entity IDs.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            }
        ],
        "response_desc": "OK",
        "url": "//data/v1/constraint/{variable}",
        "desc": "",
        "operation_id": null,
        "summary": "Get constraint permutations for entities",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "get constraint permutations for variable being << variable >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "demographics.population.count",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A single variable ID.",
                "location": "query",
                "name": "variable"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Values must be specified for each constraint in the dataset.---For example, to generate map data for `demographics.population.count`,---you must specify a value for `year` by passing `year=2013`.",
                "location": "query",
                "name": "constraint"
            },
            {
                "example": "0400000US53,0400000US08",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A comma separated list of entity IDs.---Entities must have the same type and represent geographical regions.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            }
        ],
        "response_desc": "OK",
        "url": "//data/v1/map/new",
        "desc": "",
        "operation_id": null,
        "summary": "Create a map",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "create a map",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "false",
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not to produce a description of the data.---Set to `true` to produce a description.---Descriptions are not available if no entities are specified.------+ Default `false`",
                "location": "query",
                "name": "describe"
            },
            {
                "example": "3",
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of steps to forecast.---Must be an integer between 0 and 20.---Forecasts are produced using linear extrapolation---on the data. They are only available when retrieving---data for a single variable across many numerical---constraint options.------+ Default `0`",
                "location": "query",
                "name": "forecast"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If format is set to `google`, the data frame will be formatted---as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class).---If the format is not provided or invalid, then the frame---will be formatted normally.",
                "location": "query",
                "name": "format"
            },
            {
                "example": "demographics.population.count",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of variable IDs.---Defaults to retrieving all variables.---It is also possible to pass in a topic such as---`demographics`, or a dataset such as `demographics.population`,---which would both be equivalent to specifying---`demographics.population.count` and `demographics.population.change`.---Note that only variables in the same dataset are allowed.",
                "location": "query",
                "name": "variable"
            },
            {
                "example": "0100000US,0400000US53",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of entity IDs.---Defaults to retrieving all entities.---Note that since there is currently no results pagination,---retrieving values for all entities may produce incomplete results.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            }
        ],
        "response_desc": "OK",
        "url": "//data/v1/values",
        "desc": "",
        "operation_id": null,
        "summary": "Get values for variables",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "get values for variables",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            },
            {
                "example": "0400000US53",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the entity.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": "washington",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the entity.",
                "location": "query",
                "name": "entity_name"
            },
            {
                "example": "region.state",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the entity.",
                "location": "query",
                "name": "entity_type"
            }
        ],
        "response_desc": "OK",
        "url": "//entity/v1",
        "desc": "",
        "operation_id": null,
        "summary": "Get Entities",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "get entity",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "parent",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type of relation to find.",
                "location": "path",
                "name": "relation"
            },
            {
                "example": "demographics.population.seattle",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If this parameter is included, only entities with data for the given---variable will be returned. Note that this may cause the number of---entities returned to be less than the specified `limit`.",
                "location": "query",
                "name": "variable_id"
            },
            {
                "example": "0400000US53",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the target entity.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": 10,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of entities in each group.---Must be an integer from 1 to 1000.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            }
        ],
        "response_desc": "OK",
        "url": "//entity/v1/{relation}",
        "desc": "",
        "operation_id": null,
        "summary": "Find the relatives of an entity",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "find the relatives of an entity for relation being << relation >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "demographics.population",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If included, the search terms of the dataset---will be used in the query.",
                "location": "query",
                "name": "dataset_id"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            },
            {
                "example": "0100000US",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Entities to use in formulating the query.",
                "location": "query",
                "name": "entity_id"
            },
            {
                "example": 10,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results to return.---Must be an integer from 0 to 50000.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to skip.---Used for pagination.",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "OK",
        "url": "//search/v1/dataset",
        "desc": "",
        "operation_id": null,
        "summary": "Get datasets",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "search for datasets",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "seattle",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String to search against.",
                "location": "query",
                "name": "query"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            },
            {
                "example": 10,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results to return.---Must be an integer from 0 to 50000.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to skip.---Used for pagination.",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "OK",
        "url": "//search/v1/question",
        "desc": "",
        "operation_id": null,
        "summary": "Get questions",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "search questions",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "seattl",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Query to match.",
                "location": "query",
                "name": "query"
            },
            {
                "example": "demographics.population.count",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "This parameter is only available when suggesting entities with `type=entity`.---If it is provided, suggestions will be filtered to include---only entities that have data for the given variable.------If the variable provided is invalid, no entities will be returned.------Note that this filtering will increase response time significantly,---so it should only be used when necessary.",
                "location": "query",
                "name": "variable_id"
            },
            {
                "example": "entity",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the object to find.",
                "location": "path",
                "name": "type"
            },
            {
                "example": 5,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results to return.---Must be an integer from 0 to 100.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": "cQovpGcdUT1CSzgYk0KPYdAI0",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be---used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).",
                "location": "query",
                "name": "app_token"
            }
        ],
        "response_desc": "OK",
        "url": "//suggest/v1/{type}",
        "desc": "",
        "operation_id": null,
        "summary": "Get suggestions",
        "api": "opendatanetwork.com__1.0.0.yaml",
        "canonical_expr": "get suggestions for type being << type >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by banks code.",
                "location": "query",
                "name": "filter[sort_code]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by code.",
                "location": "query",
                "name": "filter[code]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| code | -code |---| status | -status |---| sort_code | -sort_code |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by status.",
                "location": "query",
                "name": "filter[status]"
            }
        ],
        "response_desc": "List of banks.",
        "url": "/v1//banks",
        "desc": "Returns list of banks. Each object contains general information about bank such as name and status, also information about bank details and related link to main organization.\n",
        "operation_id": null,
        "summary": "List of banks",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the list of banks",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Bank information.",
        "url": "/v1//banks/{id}",
        "desc": "Returns bank with specific ID.\n",
        "operation_id": null,
        "summary": "Bank by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a bank with id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by region.",
                "location": "query",
                "name": "filter[region]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| area | -area |---| population | -population |---| region | -region |---| sub_region | -sub_region |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by sub region.",
                "location": "query",
                "name": "filter[sub_region]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            }
        ],
        "response_desc": "List of countries.",
        "url": "/v1//countries",
        "desc": "Returns all available countries.\n",
        "operation_id": null,
        "summary": "List of countries",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the list of countries",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Country informatiion.",
        "url": "/v1//countries/{id}",
        "desc": "Returns country with specific ID.\n",
        "operation_id": null,
        "summary": "Country by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a country with id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by currency type.",
                "location": "query",
                "name": "filter[currency_type]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by category.",
                "location": "query",
                "name": "filter[category]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by ISO number.",
                "location": "query",
                "name": "filter[code_iso_numeric3]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Full text search with name, code, type, code_iso_alpha3, code_jsons_alpha, code_estandards_alpha, category.",
                "location": "query",
                "name": "filter[search]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| type | -type |---| category | -category |---| code | -code |---| code_iso_alpha3 | -code_iso_alpha3 |---| code_iso_numeric3 | -code_iso_numeric3 |---| code_estandards_alpha | -code_estandards_alpha |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by ISO code.",
                "location": "query",
                "name": "filter[code_iso_alpha3]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by estandards code.",
                "location": "query",
                "name": "filter[code_estandards_alpha]"
            }
        ],
        "response_desc": "List of currencies.",
        "url": "/v1//currencies",
        "desc": "Returns all available currencies.\n",
        "operation_id": null,
        "summary": "List of currencies",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the list of currencies",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Currency information.",
        "url": "/v1//currencies/{id}",
        "desc": "Returns currency with specific ID.\n",
        "operation_id": null,
        "summary": "Currency by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a currency with id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by category.",
                "location": "query",
                "name": "filter[category]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Full text search with id, name, code, category.",
                "location": "query",
                "name": "filter[search]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by code.",
                "location": "query",
                "name": "filter[code]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| code | -code |---| processor_name | -processor_name |---| category | -category |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by processor_name.",
                "location": "query",
                "name": "filter[processor_name]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by name.",
                "location": "query",
                "name": "filter[name]"
            }
        ],
        "response_desc": "List of deposit methods.",
        "url": "/v1//deposit-methods",
        "desc": "Returns list of deposit methods. Each object contains information about deposit method such as name and category, also related link to deposit method issuer (which processing it).\n",
        "operation_id": null,
        "summary": "List of deposit methods",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the deposit methods",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Deposit method information.",
        "url": "/v1//deposit-methods/{id}",
        "desc": "Returns deposit method with specific ID.\n",
        "operation_id": null,
        "summary": "Deposit method by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a deposit method by id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| status | -status |---| wmid | -wmid |---| rate_type | -rate_type |---| rates_export_standard | <nobr>-rates_export_standard</nobr> |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by status.",
                "location": "query",
                "name": "filter[status]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by name.",
                "location": "query",
                "name": "filter[name]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            }
        ],
        "response_desc": "List of exchangers.",
        "url": "/v1//exchangers",
        "desc": "Returns list of exchange markets. Each object contains general information about exchanger such as name and status, also information about rates export and related link to main organization.<br>\nRates export standards is represented by:\n* [estandards](http://estandards.info)\n* [jsons](http://jsons.info)\n* ratex - our internal standard\n",
        "operation_id": null,
        "summary": "List of exchangers",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the list of exchangers",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Exchanger information.",
        "url": "/v1//exchangers/{id}",
        "desc": "Returns exchanger with specific ID.\n",
        "operation_id": null,
        "summary": "Exchanger by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get an exchanger with id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by name.",
                "location": "query",
                "name": "filter[name]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            }
        ],
        "response_desc": "List of Merchant industries.",
        "url": "/v1//merchant-industries",
        "desc": "Returns all available merchant fields of activity.\n",
        "operation_id": null,
        "summary": "List of merchant industries",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the merchant industries",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Merchant industry.",
        "url": "/v1//merchant-industries/{id}",
        "desc": "Returns merchant industry with specific ID.\n",
        "operation_id": null,
        "summary": "Merchant industry by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a merchant industry for id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Full text search with id, name, code.",
                "location": "query",
                "name": "filter[search]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by code.",
                "location": "query",
                "name": "filter[code]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| code | -code |---| status | -status |---| description | -description |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtration by status.",
                "location": "query",
                "name": "filter[status]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by name.",
                "location": "query",
                "name": "filter[name]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by industries.",
                "location": "query",
                "name": "filter[industries]"
            }
        ],
        "response_desc": "List of Organizations.",
        "url": "/v1//organizations",
        "desc": "This endpoint retrievs the list of organizations present in the system. The data displays general, public information, without reference to the type of activity (for example - name, address, contacts, etc.).\n",
        "operation_id": null,
        "summary": "List of organizations",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the list of organizations",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Organization information.",
        "url": "/v1//organizations/{id}",
        "desc": "Returns organization with specific ID.\n",
        "operation_id": null,
        "summary": "Organization by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a organization with id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by category.",
                "location": "query",
                "name": "filter[category]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Full text search with id, name, code, category.",
                "location": "query",
                "name": "filter[search]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by code.",
                "location": "query",
                "name": "filter[code]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| code | -code |---| processor_name | -processor_name |---| category | -category |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by processor_name.",
                "location": "query",
                "name": "filter[processor_name]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by name.",
                "location": "query",
                "name": "filter[name]"
            }
        ],
        "response_desc": "List of payment methods.",
        "url": "/v1//payment-methods",
        "desc": "Returns list of payment methods. Each object contains information about payment method such as name and category, also related link to payment method issuer (which processing it).\n",
        "operation_id": null,
        "summary": "List of payment methods",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the payment methods",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Payment method information.",
        "url": "/v1//payment-methods/{id}",
        "desc": "Returns payment method with specific ID.\n",
        "operation_id": null,
        "summary": "Payment method by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a payment method by id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Full text search with id, code, name.",
                "location": "query",
                "name": "filter[search]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by code.",
                "location": "query",
                "name": "filter[code]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Current page number.",
                "location": "query",
                "name": "page[number]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by features.",
                "location": "query",
                "name": "filter[features]"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page size.<br>*Default value: 100*---",
                "location": "query",
                "name": "page[size]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort params:<br>------| ASC | DESC |---|-----|------|---| name | -name |---| code | -code |---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by sales channels.",
                "location": "query",
                "name": "filter[sales_channels]"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by types.",
                "location": "query",
                "name": "filter[types]"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering by name.",
                "location": "query",
                "name": "filter[name]"
            }
        ],
        "response_desc": "List of Payment providers.",
        "url": "/v1//payment-providers",
        "desc": "A payment service provider (PSP) offers shops online services for accepting electronic payments by a variety of payment methods.<br> Endpoint returns list of PSPs. Each object contains: name, type, supported features and sales channels, also related link to available payment methods and main organization.\n",
        "operation_id": null,
        "summary": "List of payment providers",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get the payment providers",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique ID.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Payment provider.",
        "url": "/v1//payment-providers/{id}",
        "desc": "Returns payment provider with specific ID.\n",
        "operation_id": null,
        "summary": "Payment provider by ID",
        "api": "openfintech.io__2017-08-24.yaml",
        "canonical_expr": "get a payment provider with id being << id >>",
        "base_path": "/v1/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response",
                "location": "query",
                "name": "fields"
            }
        ],
        "response_desc": "List of Devices",
        "url": "/api/v1/devices",
        "desc": "The devices endpoint return list of all the STF devices including Disconnected and Offline",
        "operation_id": "getDevices",
        "summary": "Device List",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "get the list of devices",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response",
                "location": "query",
                "name": "fields"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Serial",
                "location": "path",
                "name": "serial"
            }
        ],
        "response_desc": "Device Information",
        "url": "/api/v1/devices/{serial}",
        "desc": "The device enpoint return information about a single device",
        "operation_id": "getDeviceBySerial",
        "summary": "Device Information",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "get a device by << serial >> being << serial >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Current User Profile information",
        "url": "/api/v1/user",
        "desc": "The User Profile endpoint returns information about current authorized user",
        "operation_id": "getUser",
        "summary": "User Profile",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "get user",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Access Tokens titles",
        "url": "/api/v1/user/accessTokens",
        "desc": "The Access Tokens endpoints returns titles of all the valid access tokens",
        "operation_id": "getUserAccessTokens",
        "summary": "Access Tokens",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "get the list of access tokens",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response",
                "location": "query",
                "name": "fields"
            }
        ],
        "response_desc": "Current User Devices List",
        "url": "/api/v1/user/devices",
        "desc": "The User Devices endpoint returns device list owner by current authorized user",
        "operation_id": "getUserDevices",
        "summary": "User Devices",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "get the list of devices",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Device timeout in ms. If device is kept idle for this period, it will be automatically disconnected. Default is provider group timeout",
                "location": "body",
                "name": "device.timeout"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Serial",
                "location": "body",
                "name": "device.serial"
            }
        ],
        "response_desc": "Add User Device Status",
        "url": "/api/v1/user/devices",
        "desc": "The User Devices endpoint will request stf server for a new device.",
        "operation_id": "addUserDevice",
        "summary": "Add a device to a user",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "create a new device",
        "base_path": "/api/v1"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Serial",
                "location": "path",
                "name": "serial"
            }
        ],
        "response_desc": "Delete User Device Status",
        "url": "/api/v1/user/devices/{serial}",
        "desc": "The User Devices endpoint will request for device release from stf server. It will return request accepted if device is being used by current user",
        "operation_id": "deleteUserDeviceBySerial",
        "summary": "Delete User Device",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "delete a device with serial being << serial >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response",
                "location": "query",
                "name": "fields"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Serial",
                "location": "path",
                "name": "serial"
            }
        ],
        "response_desc": "Device Information owned by user",
        "url": "/api/v1/user/devices/{serial}",
        "desc": "The devices enpoint return information about device owned by user",
        "operation_id": "getUserDeviceBySerial",
        "summary": "User Device",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "get a device with serial being << serial >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Serial",
                "location": "path",
                "name": "serial"
            }
        ],
        "response_desc": "Remote Disonnect User Device Request Status",
        "url": "/api/v1/user/devices/{serial}/remoteConnect",
        "desc": "The device connect endpoint will request stf server to disconnect remotely",
        "operation_id": "remoteDisconnectUserDeviceBySerial",
        "summary": "Remote Disconnect",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "remote disconnect user device by serial being << serial >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Serial",
                "location": "path",
                "name": "serial"
            }
        ],
        "response_desc": "Remote Connect User Device Request Status",
        "url": "/api/v1/user/devices/{serial}/remoteConnect",
        "desc": "The device connect endpoint will request stf server to connect remotely",
        "operation_id": "remoteConnectUserDeviceBySerial",
        "summary": "Remote Connect",
        "api": "openstf.io__2.3.0.yaml",
        "canonical_expr": "remote connect user device by serial being << serial >>",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Redoc API documentation file",
        "url": "/v3/platform/docs",
        "desc": "Access api docs as served by Redoc",
        "operation_id": "getApiDocs",
        "summary": "Browse API documentation",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get the list of API docs",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Swagger-UI API documentation file",
        "url": "/v3/platform/docs/swagger-ui",
        "desc": "Interactive API docs using swagger-ui",
        "operation_id": "getApiSwaggerUI",
        "summary": "Browse interactive API documentation",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get API swagger ui",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum amount of results to return. Defaults to 5.",
                "location": "query",
                "name": "size"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A full text query.",
                "location": "query",
                "name": "q"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/autocomplete",
        "desc": "Search for the closest term to autocomplete in the search box.\n",
        "operation_id": "getAutocomplete",
        "summary": "Get `autocomplete` objects.",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get autocomplete objects",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/besthitsearch",
        "desc": "Fire the search method for multiple strings\n",
        "operation_id": "postBestHitSearch",
        "summary": "Find the best hit",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "find the best hit",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"disease\":[\"disease1\", \"disease2\"],---\"facets\" = \"true\"}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/disease",
        "desc": "Get `disease` objects.\n",
        "operation_id": "postDiseaseById",
        "summary": "Find information about a list of diseases",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get the list of diseases",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An EFO identifier.",
                "location": "path",
                "name": "disease"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/disease/{disease}",
        "desc": "Get `disease` objects.\n",
        "operation_id": "getDiseaseById",
        "summary": "Find information about a disease",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get a disease being << disease >>",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An [evidence code ontology](http://www.ebi.ac.uk/ols/v2/browse.do?ontName=ECO) ID.",
                "location": "path",
                "name": "ECO_ID"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/eco/{ECO_ID}",
        "desc": "Get `ECO` objects.\n",
        "operation_id": "getECObyID",
        "summary": "Get evidence code by ID",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get eco by eco id being << ECO_ID >>",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"target\" : [\"ENSG00000001\", \"ENSG00000002\"],--- \"pvalue\" : 0.001,--- \"size\" : 20}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/enrichment/targets",
        "desc": "Returns an enrichment analysis for a list of targets passed in the body\n",
        "operation_id": "postEnrichmentTarget",
        "summary": "Enrichment analysis",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get an enrichment target for a list of targets",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum amount of results to return. Defaults to 5.",
                "location": "query",
                "name": "size"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A full text query.",
                "location": "query",
                "name": "q"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/quicksearch",
        "desc": "Get `search-result` objects. Enables search bar functionality.\n",
        "operation_id": "getQuickSearch",
        "summary": "Search most relevant results",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "search",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"subject\":[\"gene1\", \"gene2\"]}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/relation",
        "desc": "Get `relation` objects.\n",
        "operation_id": "postRelation",
        "summary": "Find related entities",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "find related entities",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An EFO gene identifier.",
                "location": "path",
                "name": "disease"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/relation/disease/{disease}",
        "desc": "Get `relation` objects starting from diseases.\n",
        "operation_id": "getRelationByEFOID",
        "summary": "Find related entities by disease",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "find related entities by disease with disease being << disease >>",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An Ensembl gene identifier.",
                "location": "path",
                "name": "target"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/relation/target/{target}",
        "desc": "Get `relation` objects starting from diseases.\n",
        "operation_id": "getRelationByENSGID",
        "summary": "Find related entities by target",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "find related entities by target being << target >>",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"target\":[\"target1\", \"target2\"],---\"facets\" = \"true\"}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/target",
        "desc": "Get `target` objects. Used for the target profile page.\n",
        "operation_id": "postTargetByENSGID",
        "summary": "Find information about a list of targets",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "find information about a list of targets",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An Ensembl gene identifier.",
                "location": "query",
                "name": "gene"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/target/expression",
        "desc": "Get `gene-expression` objects.\n",
        "operation_id": "getTargetExpressionByENSGID",
        "summary": "Query expression levels",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get the list of expression objects",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"gene\":[\"gene1\", \"gene2\"]}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/target/expression",
        "desc": "Get `gene-expression` objects.\n",
        "operation_id": "postTargetExpressionByENSGID",
        "summary": "Batch query expression levels",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get the list of gene expression objects",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An Ensembl gene ID for the target of interest.",
                "location": "path",
                "name": "target"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/private/target/{target}",
        "desc": "Get `target` objects.\n",
        "operation_id": "getTargetByENSGID",
        "summary": "Find information about a target",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get a target with target being << target >>",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An association ID usually in the form of `TARGET_ID-DISEASE_ID`.",
                "location": "query",
                "name": "id"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/association",
        "desc": "Once we integrate all evidence connecting a target to a specific disease, we\n compute an association score by the means of an harmonic sum. This *association score* provides\n an indication of how strong the evidence behind each connection is and can be\n used to rank genes in order of likelihood as drug targets.\n The association ID is constructed by using the Ensembl ID of the gene and the\n EFO ID for the disease (e.g. ENSG00000073756-EFO_0003767).\n The method returns an association object, which contains the data and summary\n on each evidence type included in the calculation of the score, as well as the score itself.\n",
        "operation_id": "getAssociationById",
        "summary": "Get association by id",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get association",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum amount of results to return. Defaults to 10, max is 10000.",
                "location": "query",
                "name": "size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A Reactome pathway identifier (returning only those targets linked to the specified pathway).",
                "location": "query",
                "name": "pathway"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Fields you want to retrieve. This will get priority over the data structure requested.",
                "location": "query",
                "name": "fields"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A UniProt keyword (meaning all the targets linked to that keyword).",
                "location": "query",
                "name": "uniprotkw"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A ChEMBL target class identifier (returning only those targets belonging to the specified class).",
                "location": "query",
                "name": "target_class"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "An EFO code listed as disease.id.",
                "location": "query",
                "name": "disease"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Data type to consider.",
                "location": "query",
                "name": "datatype"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending---order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as---'datasources.gwas'. Supports multiple entries.---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Returns facets",
                "location": "query",
                "name": "facets"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by maximum score value.",
                "location": "query",
                "name": "scorevalue_max"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "An EFO code of a therapeutic area.",
                "location": "query",
                "name": "therapeutic_area"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.",
                "location": "query",
                "name": "datastructure"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Score types to apply the score value min and max filters. The default is `overall`.",
                "location": "query",
                "name": "scorevalue_types"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How many initial results should be skipped. Defaults to 0.",
                "location": "query",
                "name": "from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Data source to consider.",
                "location": "query",
                "name": "datasource"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Restrict the filtered results to those matching the passed string. The matching is done with a---phrase match prefix.---",
                "location": "query",
                "name": "search"
            },
            {
                "example": 0,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.",
                "location": "query",
                "name": "scorevalue_min"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A target identifier listed as target.id.",
                "location": "query",
                "name": "target"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.",
                "location": "query",
                "name": "direct"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/association/filter",
        "desc": "More complex queries for associations scores and objects can be done using\nthis method, which allows to sort in different order, restrict to a specific class\nof diseases or targets, as well as filtering results by score and associated pathways.\n",
        "operation_id": "getAssociationFilter",
        "summary": "Filter available associations",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "filter available association s",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"target\":[\"target1\", \"target2\"]}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/association/filter",
        "desc": "Complex queries and filters for association objects can also be submitted using a JSON\nobject and the equivalent POST method.\n",
        "operation_id": "postAssociationFilter",
        "summary": "Batch query available associations",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "filter available associations",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal unique ID of the evidence string to retrieve.",
                "location": "query",
                "name": "id"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/evidence",
        "desc": "We call **evidence** a unit of data that support a connection between a target and a disease.\nThe Open Targets Platform integrates multiple types of evidence including genetic associations,\nsomatic mutations, RNA expression and target-disease associations mined from the literature.\nThis method allows you to retrieve a single evidence item or a list of pieces of evidence by using their\ntargetvalidation.org ID.\n\nEvidence IDs are unique within each data release (e.g. `8ed3d7568a8c6cac9c95cfb869bac762` for release 1.2).\nYou can obtain a list of evidence and their IDs from other API calls such as [/public/evidence/filter](#!/public/get_public_evidence_filter).\n\n**Please note** that a specific evidence ID may change between data releases. We can not guarantee that a specific evidence ID will refer to the same piece of evidence connecting a target and its diseases.\n",
        "operation_id": "getEvidenceById",
        "summary": "Get evidence by ID",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get evidence",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"id\":[\"id1\", \"id2\"]}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/evidence",
        "desc": "This is the POST version of [/public/evidence](#!/public/get_public_evidence).\nIt allows to query for a list of evidence strings encoded in a `json` object to be passed in the body.\n",
        "operation_id": "postEvidenceById",
        "summary": "Get evidence for a list of IDs",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get evidence",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum amount of results to return. Defaults to 10, max is 10000.",
                "location": "query",
                "name": "size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A pathway identifier (meaning all the targets linked to that pathway).",
                "location": "query",
                "name": "pathway"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The fields you want to retrieve. This will get priority over the data structure requested.",
                "location": "query",
                "name": "fields"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Data source to consider.",
                "location": "query",
                "name": "data source"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "An EFO code listed as disease.id.",
                "location": "query",
                "name": "disease"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Data type to consider.",
                "location": "query",
                "name": "datatype"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending---order e.g. '~scores.association_score'. It supports multiple entries.---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by maximum score value.",
                "location": "query",
                "name": "scorevalue_max"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.",
                "location": "query",
                "name": "datastructure"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How many initial results should be skipped. Defaults to 0.",
                "location": "query",
                "name": "from"
            },
            {
                "example": 0,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.",
                "location": "query",
                "name": "scorevalue_min"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A target identifier listed as target.id.",
                "location": "query",
                "name": "target"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A UniProt keyword (meaning all the targets linked to that keyword).",
                "location": "query",
                "name": "uniprotkw"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/evidence/filter",
        "desc": "The filter method allows to retrieve the specific data that supports a connection between targets and diseases.\nFilters can be used to restrict the results by source and type of data,\nor limit results to targets which are part of a particular pathway.\nMinimum and maximum scores can be specified as well as the type of evidence linking target and disease.\n**Note** that multiple genes and diseases can be specified in the same request.\n",
        "operation_id": "getEvidenceFilter",
        "summary": "Filter available evidence",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "filter available evidence",
        "base_path": "/v3"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "{\"target\":[\"ENSG00000094755\", \"ENSG00000167207\"], \"disease\":[\"EFO_0003767\"]}---",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/evidence/filter",
        "desc": "POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter).\nFilters can be specified as part of a `json` object in the body, simplifying the submission of queries.\n",
        "operation_id": "postEvidenceFilter",
        "summary": "Batch filter available evidence",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "filter available evidence",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum amount of results to return. Defaults to 10, max is 10000.",
                "location": "query",
                "name": "size"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A full text query.",
                "location": "query",
                "name": "q"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How many initial results should be skipped. Defaults to 0.",
                "location": "query",
                "name": "from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Restrict the search to the type requested. Eg. `target` or `disease`.",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/search",
        "desc": "This method allows you to look for gene or diseases of interest using a free text search,\nreplicating the functionality of the search box on our homepage. It should be used to identify\nthe best match for a disease or target of interest, rather than gathering a specific set of evidence.\n",
        "operation_id": "getSearch",
        "summary": "Search for a disease or a target",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "search for diseases",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/utils/ping",
        "desc": "Check if the API is up\n",
        "operation_id": "getPing",
        "summary": "Ping service",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "check if the API is up",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/utils/stats",
        "desc": "Returns the number of associations and evidences, divided by datasource.\n",
        "operation_id": "getDataStats",
        "summary": "Get statistics about the current data release",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get stats about the current data release",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Successful response",
        "url": "/v3/platform/public/utils/version",
        "desc": "Returns current API version.\n",
        "operation_id": "getVersion",
        "summary": "Get API version",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get API version",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Swagger.yaml file",
        "url": "/v3/platform/swagger",
        "desc": "Get swagger.yaml specs for the API",
        "operation_id": "getSwagger",
        "summary": "Get OpenAPI schema",
        "api": "opentargets.io__3.0.1.yaml",
        "canonical_expr": "get open API schema",
        "base_path": "/v3"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/info",
        "desc": "Get information about groov. No authorization required.",
        "operation_id": "groovInfo",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get info about groov",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/v1/data-store/devices",
        "desc": "List devices available in the data store. Authorized for admins and editors.",
        "operation_id": "listDevices",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get the list of devices available in the data store",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the device to use.",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/v1/data-store/devices/{id}/tags",
        "desc": "List tags of the given device. Authorized for admins and editors.",
        "operation_id": "listDeviceTags",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get the list of tags of a device with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "For array tags, the number of elements to read, starting at index.",
                "location": "body",
                "name": "tags.count"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "For array tags, the index to start reading at.",
                "location": "body",
                "name": "tags.index"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique id for the tag.",
                "location": "body",
                "name": "tags.id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/v1/data-store/read",
        "desc": "Read selected tags from the data store. Authorized for admins and editors.",
        "operation_id": "batchReadTags",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get selected tags from the data store",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the tag to read.",
                "location": "path",
                "name": "id"
            },
            {
                "example": 0,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Table index to start reading at.",
                "location": "query",
                "name": "index"
            },
            {
                "example": 1,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of elements to read from a table.",
                "location": "query",
                "name": "count"
            }
        ],
        "response_desc": "OK",
        "url": "/api/v1/data-store/read/{id}",
        "desc": "Read the current value of a single tag. Authorized for admins and editors.",
        "operation_id": "readTag",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get a tag by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/v1/data-store/tags",
        "desc": "List all data store tags defined in the project. Authorized for admins and editors.",
        "operation_id": "listAllTags",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get the list of data store tags",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the tag to write.",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value to write to the tag. Must be a string, number, or boolean.",
                "location": "query",
                "name": "value"
            },
            {
                "example": 0,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "For array tags, the index to write the value to.",
                "location": "query",
                "name": "index"
            }
        ],
        "response_desc": "OK",
        "url": "/api/v1/data-store/write/{id}",
        "desc": "Writes a new value to the given tag. Authorized for admins and editors.",
        "operation_id": "writeTag",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "create a new value to the tag with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/whoami",
        "desc": "Get information about the user you are authenticated as. Authorized for admins, editors, operators, and kiosk.",
        "operation_id": "whoAmI",
        "summary": null,
        "api": "opto22.com__groov__R3.3a.yaml",
        "canonical_expr": "get my user information",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "No response was specified",
        "url": "//v1/categories",
        "desc": "<p>This operation provides a list of categories.</p>",
        "operation_id": "get categories",
        "summary": "Get categories!",
        "api": "orghunter.com__1.0.0.yaml",
        "canonical_expr": "create a new category",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ein (Employer Identification Number)",
                "location": "query",
                "name": "ein"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/charitybasic",
        "desc": "<p>This operation detail data.</p>",
        "operation_id": null,
        "summary": "Get details!",
        "api": "orghunter.com__1.0.0.yaml",
        "canonical_expr": "get charity basic",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ein (Employer Identification Number)",
                "location": "query",
                "name": "ein"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/charityfinancial",
        "desc": "<p>This operation detail data.</p>",
        "operation_id": null,
        "summary": "Get details!",
        "api": "orghunter.com__1.0.0.yaml",
        "canonical_expr": "get charity financial",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ein (Employer Identification Number)",
                "location": "query",
                "name": "ein"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/charitygeolocation",
        "desc": "<p>This operation detail data.</p>",
        "operation_id": null,
        "summary": "Get details!",
        "api": "orghunter.com__1.0.0.yaml",
        "canonical_expr": "get charity geo location",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ein (Employer Identification Number)",
                "location": "query",
                "name": "ein"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/charitypremium",
        "desc": "<p>This operation detail data.</p>",
        "operation_id": null,
        "summary": "Get details!",
        "api": "orghunter.com__1.0.0.yaml",
        "canonical_expr": "get charity premium",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Zipcode Value - 5 digit zipcode value",
                "location": "query",
                "name": "zipCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Employer Identification Number (EIN)",
                "location": "query",
                "name": "ein"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "eligible=1 will return only organizations that are tax deductible and in good standing with the IRS",
                "location": "query",
                "name": "eligible"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Record Set Start Position",
                "location": "query",
                "name": "start"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Category Value Selected from Categories API",
                "location": "query",
                "name": "category"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "State Name - Two letter state abbreviation",
                "location": "query",
                "name": "state"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Charity Name or Keyword. Example: humane society or cancer",
                "location": "query",
                "name": "searchTerm"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records Per Page. Default Value = 20",
                "location": "query",
                "name": "rows"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "City Name. Example: Miami",
                "location": "query",
                "name": "city"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/charitysearch",
        "desc": "<p>This operation provides summary data.</p>",
        "operation_id": "get summary",
        "summary": "Get summary data!",
        "api": "orghunter.com__1.0.0.yaml",
        "canonical_expr": "get summary of charity search",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (end date).",
                "location": "query",
                "name": "end"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on years [1980..2017].",
                "location": "query",
                "name": "years"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (start date).",
                "location": "query",
                "name": "start"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Latitude component of location.",
                "location": "query",
                "name": "lat"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Longitude component of location.",
                "location": "query",
                "name": "lon"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Specify a format for data retrieval.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Daymet Daily weather estimates.",
                "location": "query",
                "name": "vars"
            }
        ],
        "response_desc": "Successful Execution",
        "url": "/single-pixel/api/data",
        "desc": "Returns a csv or json of the requested data to local machine",
        "operation_id": null,
        "summary": "Download Daymet Data",
        "api": "ornl.gov__daymet__1.0.0.yaml",
        "canonical_expr": "download daymet data",
        "base_path": "/single-pixel"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (end date).",
                "location": "query",
                "name": "end"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on years [1980..2016].",
                "location": "query",
                "name": "years"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (start date).",
                "location": "query",
                "name": "start"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Latitude component of location",
                "location": "query",
                "name": "lat"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Longitude component of location.",
                "location": "query",
                "name": "lon"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Specify a format for data retrieval.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Daymet Daily weather estimates.",
                "location": "query",
                "name": "vars"
            }
        ],
        "response_desc": "Successful Execution",
        "url": "/single-pixel/preview",
        "desc": "Returns a table to the browser displaying requested data",
        "operation_id": null,
        "summary": "Preview Daymet Data in a web browser",
        "api": "ornl.gov__daymet__1.0.0.yaml",
        "canonical_expr": "preview daymet data in a web browser",
        "base_path": "/single-pixel"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (end date).",
                "location": "query",
                "name": "end"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on years [1980..2016].",
                "location": "query",
                "name": "years"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (start date).",
                "location": "query",
                "name": "start"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Latitude component of location.",
                "location": "query",
                "name": "lat"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Longitude component of location.",
                "location": "query",
                "name": "lon"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Specify a format for data retrieval.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Daymet Daily weather estimates.",
                "location": "query",
                "name": "vars"
            }
        ],
        "response_desc": "Successful Execution",
        "url": "/single-pixel/send/saveData",
        "desc": "Returns a csv or json of the requested data to local machine",
        "operation_id": null,
        "summary": "Download Daymet Data",
        "api": "ornl.gov__daymet__1.0.0.yaml",
        "canonical_expr": "download daymet data",
        "base_path": "/single-pixel"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (end date).",
                "location": "query",
                "name": "end"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on years [1980..2016].",
                "location": "query",
                "name": "years"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subset on dates (start date).",
                "location": "query",
                "name": "start"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Latitude component of location.",
                "location": "query",
                "name": "lat"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Longitude component of location.",
                "location": "query",
                "name": "lon"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Specify a format for data retrieval.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Daymet Daily weather estimates.",
                "location": "query",
                "name": "vars"
            }
        ],
        "response_desc": "Successful Execution",
        "url": "/single-pixel/visualize",
        "desc": "Returns plots to a web browser of requested data using Plotly",
        "operation_id": null,
        "summary": "Visualize Daymet Data in a web browser",
        "api": "ornl.gov__daymet__1.0.0.yaml",
        "canonical_expr": "visualize daymet data in a web browser",
        "base_path": "/single-pixel"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/",
        "desc": "Welcome to the Open Science Framework API. With this API you can access users, projects, components, logs, and files from the [Open Science Framework](https://osf.io/). The Open Science Framework (OSF) is a free, open-source service maintained by the [Center for Open Science](http://cos.io/).\n\n#### Returns\n\nA JSON object with `meta` and `links` keys.\n\nThe `meta` key contains information such as a welcome message from the API, the specified version of the request, and the full representation of the current user, if authentication credentials were provided in the request.\n\nThe `links` key contains links to the following entity collections: [addons](#tag/Addons), [collections](), [institutions](#tag/Institutions), [licenses](#tag/Licenses), [metaschemas](#tag/Metaschemas), [nodes](#tag/Nodes), [registrations](#tag/Registrations), [users](#tag/Users)",
        "operation_id": "base_read",
        "summary": "Root",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": null,
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/actions/",
        "desc": "A log can have one of many actions. The complete list of loggable actions (in the format {identifier}: {description}) is as follows:\n\n* `project_created`: A Node is created\n\n* `project_registered`: A Node is registered\n\n* `project_deleted`: A Node is deleted\n---\n\n* `created_from`: A Node is created using an existing Node as a template\n\n* `pointer_created`: A Pointer is created\n\n* `pointer_forked`: A Pointer is forked\n\n* `pointer_removed`: A Pointer is removed\n\n* `node_removed`: A component is deleted\n\n* `node_forked`: A Node is forked\n---\n\n* `made_public`: A Node is made public\n\n* `made_private`: A Node is made private\n\n* `tag_added`: A tag is added to a Node\n\n* `tag_removed`: A tag is removed from a Node\n\n* `edit_title`: A Node's title is changed\n\n* `edit_description`: A Node's description is changed\n\n* `updated_fields`: One or more of a Node's fields are changed\n\n* `external_ids_added`: An external identifier is added to a Node (e.g. the DOI)\n---\n\n* `view_only_link_added`: A view-only link was added to a Node\n\n* `view_only_link_removed`:  A view-only link was removed from a Node\n\n---\n\n* `contributor_added`: A Contributor is added to a Node\n\n* `contributor_removed`: A Contributor is removed from a Node\n\n* `contributors_reordered`: A Contributor's position in a Node's bibliography is changed\n\n* `permissions_updated`: A Contributor`s permissions on a Node are changed\n\n* `made_contributor_visible`: A Contributor is made bibliographically visible on a Node\n\n* `made_contributor_invisible`: A Contributor is made bibliographically invisible on a Node\n\n---\n\n* `wiki_updated`: A Node's wiki is updated\n\n* `wiki_deleted`: A Node's wiki is deleted\n\n* `wiki_renamed`: A Node's wiki is renamed\n\n* `made_wiki_public`: A Node's wiki is made public\n\n* `made_wiki_private`: A Node's wiki is made private\n\n---\n\n* `addon_added`: An add-on is linked to a Node\n\n* `addon_removed`: An add-on is unlinked from a Node\n\n* `addon_file_moved`: A File in a Node's linked add-on is moved\n\n* `addon_file_copied`: A File in a Node's linked add-on is copied\n\n* `addon_file_renamed`: A File in a Node's linked add-on is renamed\n---\n\n* `node_authorized`: An addon is authorized for a project\n\n* `node_deauthorized`: An addon is deauthorized for a project\n---\n\n* `folder_created`: A Folder is created in a Node's linked add-on\n\n* `file_added`: A File is added to a Node's linked add-on\n\n* `file_updated`: A File is updated on a Node's linked add-on\n\n* `file_removed`: A File is removed from a Node's linked add-on\n\n* `file_restored`: A File is restored in a Node's linked add-on\n\n---\n\n* `comment_added`: A Comment is added to some item\n\n* `comment_removed`: A Comment is removed from some item\n\n* `comment_updated`: A Comment is updated on some item\n\n---\n\n* `embargo_initiated`: An embargoed Registration is proposed on a Node\n\n* `embargo_approved`: A proposed Embargo of a Node is approved\n\n* `embargo_cancelled`: A proposed Embargo of a Node is cancelled\n\n* `embargo_completed`: A proposed Embargo of a Node is completed\n---\n\n* `retraction_initiated`: A Withdrawal of a Registration is proposed\n\n* `retraction_approved`: A Withdrawal of a Registration is approved\n\n* `retraction_cancelled`: A Withdrawal of a Registration is cancelled\n---\n\n* `registration_initiated`: A Registration of a Node is proposed\n\n* `registration_approved`: A proposed Registration is approved\n\n* `registration_cancelled`: A proposed Registration is cancelled\n---\n\n* `preprint_initiated`: A preprint is made from the node\n\n* `preprint_license_updated`: A license is added or updated to the preprint\n\n* `preprint_file_updated`: The primary file of a preprint is updated",
        "operation_id": "logs_actions",
        "summary": "Actions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of actions",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/addons/",
        "desc": "A paginated list of addons configurable with the OSF\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "operation_id": "addons_list",
        "summary": "List all addons",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of addons",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/citations/styles/",
        "desc": "A paginated list of all standard citation styles available for rendering citations.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 citation styles. Each resource in the array is a separate citation syle and contains the full representation of the citation style object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/citations/styles/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "citations_styles_list",
        "summary": "List all citation styles",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of citation styles",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the citation style.",
                "location": "path",
                "name": "style_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/citations/styles/{style_id}/",
        "desc": "Retrieves the details of a citation style.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested citation style, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "citations_styles_read",
        "summary": "Retrieve a citation style",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a citation styles with style id being << style_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the comment you wish to delete.",
                "location": "path",
                "name": "comment_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/comments/{comment_id}/",
        "desc": "Deletes a comment. This action can be undone by setting deleted to False in a comment update request.\n\n#### Returns\n\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "comments_delete",
        "summary": "Delete a comment",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "delete a comment with comment id being << comment_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the comment you wish to retrieve.",
                "location": "path",
                "name": "comment_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/comments/{comment_id}/",
        "desc": "Retrieves the details of a comment\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested comment, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "comments_read",
        "summary": "Retrieve a comment",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a comment with comment id being << comment_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the comment you wish to update.",
                "location": "path",
                "name": "comment_id"
            },
            {
                "example": null,
                "type": "comments",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "example.data"
            },
            {
                "example": "{\"data\": {\"id\": \"{comment_id}\", \"type\": \"comments\", \"attributes\": {\"content\": \"changed comment content\"}}}",
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/comments/{comment_id}/",
        "desc": "Updates the specified comment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns JSON with a `data` key containing the new representation of the updated comment, if the request is successful.\n\nIf the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "comments_put",
        "summary": "Update a comment",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "replace a comment with comment id being << comment_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the file you wish to retrieve.",
                "location": "path",
                "name": "file_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/files/{file_id}/",
        "desc": "Retrieves the details of a file (or folder)\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the metadata for the requested file or folder. If a metadata request is issued against a folder, the request will return the metadata for every object in the folder. If the ?info= query parameter is present for a request against a folder, the response will contain the metadata for the folder itself instead of the metadata for the objects in the folder.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n### Waterbutler API actions\n\nFiles can be modified via the Waterbutler URLs found in the `links` key of the response (new_folder, move, upload, download, and delete). Further information about how to interact with files can be found in the [Waterbutler API documentation](https://waterbutler.readthedocs.io/en/latest/api.html#v1-api).\n\n\n#### Download (files)\n\nTo download a file, issue a GET request against the download link. The response will have the Content-Disposition header set, which will will trigger a download in a browser.\n\n#### Create Subfolder (folders)\n\nYou can create a subfolder of an existing folder by issuing a PUT request against the new_folder link. The ?kind=folder portion of the query parameter is already included in the new_folder link. The name of the new subfolder should be provided in the name query parameter. The response will contain a WaterButler folder entity. If a folder with that name already exists in the parent directory, the server will return a 409 Conflict error response.\n\n#### Upload New File (folders)\n\n\n  To upload a file to a folder, issue a PUT request to the folder's upload link with the raw file data in the request body, and the kind and name query parameters set to 'file' and the desired name of the file. The response will contain a WaterButler file entity that describes the new file. If a file with the same name already exists in the folder, the server will return a 409 Conflict error response.\n\n\n#### Update Existing File (file)\n\nTo update an existing file, issue a PUT request to the file's upload link with the raw file data in the request body and the kind query parameter set to \"file\". The update action will create a new version of the file. The response will contain a WaterButler file entity that describes the updated file.\n\n#### Rename (files, folders)\n\nTo rename a file or folder, issue a POST request to the move link with the action body parameter set to \"rename\" and the rename body parameter set to the desired name. The response will contain either a folder entity or file entity with the new name.\n\n#### Move & Copy (files, folders)\n\nMove and copy actions both use the same request structure, a POST to the move url, but with different values for the action body parameters. The path parameter is also required and should be the OSF path attribute of the folder being written to. The rename and conflict parameters are optional. If you wish to change the name of the file or folder at its destination, set the rename parameter to the new name. The conflict param governs how name clashes are resolved. Possible values are replace and keep. replace is the default and will overwrite the file that already exists in the target folder. keep will attempt to keep both by adding a suffix to the new file's name until it no longer conflicts. The suffix will be ' (x)' where x is a increasing integer starting from 1. This behavior is intended to mimic that of the OS X Finder. The response will contain either a folder entity or file entity with the new name.\nFiles and folders can also be moved between nodes and providers. The resource parameter is the id of the node under which the file/folder should be moved. It must agree with the path parameter, that is the path must identify a valid folder under the node identified by resource. Likewise, the provider parameter may be used to move the file/folder to another storage provider, but both the resource and path parameters must belong to a node and folder already extant on that provider. Both resource and provider default to the current node and providers.\nIf a moved/copied file is overwriting an existing file, a 200 OK response will be returned. Otherwise, a 201 Created will be returned.",
        "operation_id": "files_detail",
        "summary": "Retrieve a file",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a file with file id being << file_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the file you wish to update.",
                "location": "path",
                "name": "file_id"
            },
            {
                "example": null,
                "type": "files",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "example.data"
            },
            {
                "example": "{\"data\": {\"id\": \"{file_id}\", \"type\": \"files\", \"attributes\": {\"name\": \"new file name.jpg\"}}}",
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/files/{file_id}/",
        "desc": "Updates the specified file by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns JSON with a `data` key containing the new representation of the updated file, if the request is successful.\n\nIf the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "files_patch",
        "summary": "Update a file",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a file with file id being << file_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the file from which you want to retrieve versions.",
                "location": "path",
                "name": "file_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/files/{file_id}/versions/",
        "desc": "A paginated list of all file versions.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 file versions. Each resource in the array is a separate file version object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "files_versions",
        "summary": "List all file versions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of versions of a file with file id being << file_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the file from which you want to retrieve versions.",
                "location": "path",
                "name": "file_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The file version number you want to retrieve.",
                "location": "path",
                "name": "version_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/files/{file_id}/versions/{version_id}/",
        "desc": "Retrieves the details of a file version\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested file, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "files_version_detail",
        "summary": "Retrieve a file version",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a version with version id being << version_id >> for a file with file id being << file_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/institutions/",
        "desc": "A paginated list of all verified institutions.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include institutions that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/?filter[id]=cos.\n\nInstitutions may be filtered by their `id`, `name`, and `auth_url`\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "institutions_list",
        "summary": "List all institutions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of institutions",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the institution you wish to retrieve.",
                "location": "path",
                "name": "institution_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/institutions/{institution_id}/",
        "desc": "Retrieves the details of an institution\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested institution, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "institutions_detail",
        "summary": "Retrieve an institution",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a institution with institution id being << institution_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the institution you wish to retrieve.",
                "location": "path",
                "name": "institution_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/institutions/{institution_id}/nodes/",
        "desc": "A paginated list of all nodes affiliated with an institution.\n\n#### Versioning\n\nAs of version `2.2`, affiliated components (in addition to affiliated top-level projects) are returned from this endpoint.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate nodes object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/nodes?filter[title]=science.\n\nNodes may be filtered by their `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "institutions_node_list",
        "summary": "List all affiliated nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of nodes of a institution with institution id being << institution_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the institution you wish to retrieve.",
                "location": "path",
                "name": "institution_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/institutions/{institution_id}/registrations/",
        "desc": "A paginated list of all registrations affiliated with an institution.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate users object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/registrations?filter[title]=science.\n\nRegistrations may be filtered by their  `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`",
        "operation_id": "institutions_registration_list",
        "summary": "List all affiliated registrations",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of registrations of a institution with institution id being << institution_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the institution you wish to retrieve.",
                "location": "path",
                "name": "institution_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/institutions/{institution_id}/users/",
        "desc": "A paginated list of all users affiliated with an institution.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 users. Each resource in the array is a separate users object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\n\nYou can optionally request that the response only include users that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/users?filter[family_name]=Nosek.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_names`, and `family_name`\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "institutions_users_list",
        "summary": "List all affiliated users",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of users of a institution with institution id being << institution_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the license.",
                "location": "path",
                "name": "license_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/license/{license_id}/",
        "desc": "Retrieves the details of a license.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested license, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "licenses_read",
        "summary": "Retrieve a license",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a license with license id being << license_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/licenses/",
        "desc": "A paginated list of licenses. The returned licenses are sorted by their name.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 licenses. Each resource in the array is a separate license object and contains the full representation of the license, meaning additional requests to a license's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include licenses that match your filters by utilizing the `filter` query parameter, e.g. [https://api.osf.io/v2/licenses/?filter[name]=apache](https://api.osf.io/v2/licenses/?filter[name]=apache).\n\nLicenses may be filtered by their `id`, and `name`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "license_list",
        "summary": "List all licenses",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of licenses",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the log you wish to retrieve.",
                "location": "path",
                "name": "log_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/logs/{log_id}/",
        "desc": "Retrieves the details of a log.\n\nA log is permanent immutable record of a node's history. A log is created when a user performs one of many actions. See the [actions](#Logs_logs_actions) section for more details.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested log, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "logs_read",
        "summary": "Retrieve a log",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a log with log id being << log_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/metaschemas/",
        "desc": "A paginated list of all active metaschemas.\nMetaschemas describe the supplemental questions that accompany a registration.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 metaschemas. Each resource in the array is a separate metaschema object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "operation_id": "metaschemas_list",
        "summary": "List all metaschemas",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the meta schemas",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/metaschemas/registrations/",
        "desc": "A paginated list of all active registration metaschemas.\n\nRegistration metaschemas describe the supplemental questions that accompany a registration.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registration metaschemas. Each resource in the array is a separate registration metaschema object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "operation_id": "registration_metaschemas_list",
        "summary": "List all registration metaschemas",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of registration meta schemas",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration metaschema.",
                "location": "path",
                "name": "metaschema_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/metaschemas/registrations/{metaschema_id}",
        "desc": "Retrieves the details of a given registration metaschema.\n\nRegistration metaschemas describe the supplemental questions that accompany a registration.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested registration metaschema, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "registration_metaschemas_read",
        "summary": "Retrieve a registration metaschema",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a registration with meta schema id being << metaschema_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the metaschema.",
                "location": "path",
                "name": "metaschema_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/metaschemas/{metaschema_id}",
        "desc": "Retrieves the details of a given metaschema.\n\nMetaschemas describe the supplemental questions that accompany a registration.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested metaschema, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "metaschemas_read",
        "summary": "Retrieve a metaschema",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a meta schema with meta schema id being << metaschema_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/nodes/",
        "desc": "A paginated list of nodes, representing projects and components, on the OSF.\n\nThe returned nodes are those which are public or which the user has access to view.\n\nThe returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.\n\nRegistrations cannot be accessed through this endpoint (use the [registrations](#tag/Registrations) endpoints instead).\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/?filter[title]=reproducibility.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_list",
        "summary": "List all nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of nodes",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the node entity (`nodes`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this node represents a fork of another node.",
                "location": "body",
                "name": "attributes.fork"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A list of strings that describe this node, as entered by project contributors.",
                "location": "body",
                "name": "attributes.tags"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes.tags"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.registration"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                "location": "body",
                "name": "attributes.preprint"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the node was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The category of the node, as selected by project contributors.",
                "location": "body",
                "name": "attributes.category"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique ID of the node from which this node was templated, if this node was created from a template.",
                "location": "body",
                "name": "attributes.template_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.collection"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the node is publicly visible. This field is only editable by project administrators.",
                "location": "body",
                "name": "attributes.public"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).",
                "location": "body",
                "name": "attributes.node_license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.forked_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the node.",
                "location": "body",
                "name": "attributes.title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the node.",
                "location": "body",
                "name": "attributes.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of comments on this node.",
                "location": "body",
                "name": "relationships.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of contributors on this node.",
                "location": "body",
                "name": "relationships.contributors"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of preprints that this node relates to.",
                "location": "body",
                "name": "relationships.preprints"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of log actions pertaining to this node.",
                "location": "body",
                "name": "relationships.logs"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of identifiers for this node (i.e. DOI identifiers).",
                "location": "body",
                "name": "relationships.identifiers"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of wiki pages for this node.",
                "location": "body",
                "name": "relationships.wikis"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node.",
                "location": "body",
                "name": "relationships.root"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the license that has been applied to this node.",
                "location": "body",
                "name": "relationships.license"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node which this node was forked from, if this node is a fork.",
                "location": "body",
                "name": "relationships.forked_from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are linked to the current node. This field has been deprecated as of verson 2.1; use the linked_nodes link instead.",
                "location": "body",
                "name": "relationships.node_links"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are linked to the current node.",
                "location": "body",
                "name": "relationships.linked_nodes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that is the direct parent of the current node, if the current node is a child node.",
                "location": "body",
                "name": "relationships.parent"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of registrations that have been initiated from this node and are still in a draft state.",
                "location": "body",
                "name": "relationships.draft_registrations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the citation details of this node.",
                "location": "body",
                "name": "relationships.citation"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of this node's children (components).",
                "location": "body",
                "name": "relationships.children"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are forks of this node.",
                "location": "body",
                "name": "relationships.forks"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of storage providers that have been enabled on this node.",
                "location": "body",
                "name": "relationships.files"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of registrations that have been created from this node.",
                "location": "body",
                "name": "relationships.registrations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of view only links that have been created for this node.",
                "location": "body",
                "name": "relationships.view_only_links"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that the current node was templated from, if the current node was created from a template.",
                "location": "body",
                "name": "relationships.template_node"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of institutions this node is affiliated with.",
                "location": "body",
                "name": "relationships.affiliated_institutions"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/",
        "desc": "Creates a new node.\n\nOn the OSF, nodes are considered **projects** or **components**. The difference between a project and a component is that a project is a top-level node, and a component is a child of a project.\n\nAdditionally, nodes have a `category` field that includes **project** as an option. The categorization determines what icon is displayed with the node on the OSF, and helps with search organization. Projects (top-level nodes) may have a category other than project, and components (children) may have a category of **project**.\n#### Required\nRequired fields for creating a node include:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`title`\n\n&nbsp;&nbsp;&nbsp;&nbsp;`category`\n\nNote: Nodes default to **private** unless the `public` field is explicitly set to **true** in the request payload.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_create",
        "summary": "Create a node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new node",
        "base_path": "/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/",
        "desc": "Permanently deletes a node. This action cannot be undone.\n\n#### Permissions\n\nOnly project administrators may delete a node. Attempting to delete a node for which you are not an administrator will result in a **403 Forbidden** response.\n\n#### Returns\n\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_delete",
        "summary": "Delete a node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "delete a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/",
        "desc": "Retrieves the details of a given node (project or component).\n\n#### Permissions\n\nOnly project contributors may retrieve the details of a private node. Attempting to retreive a private node for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public node, as public nodes give read-only access to everyone.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_read",
        "summary": "Retrieve a node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "nodes",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "example.data"
            },
            {
                "example": "{\"data\": {\"id\": \"{node_id}\", \"type\": \"nodes\", \"attributes\": {\"public\": true, \"tags\": [\"cancer biology\", \"reproducibility\"], \"description\": \"An updated abstract.\"}}}",
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/",
        "desc": "Updates a node by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nNodes can be updated with either a **PUT** or **PATCH** request. The `title` and `category` fields are mandatory in a **PUT** request, and optional in a **PATCH**.\n\n#### Permissions\n\nOnly write contributors may update a node. Attempting to update a node for which you do not have write access will result in a **403 Forbidden** response.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_partial_update",
        "summary": "Update a node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/addons/",
        "desc": "A paginated list of addons connected to the given node or project.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of at most 10 addon objects. Each resource in the array is a separate addon object and contains the full representation of the addon, meaning additional requests to a addon's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "nodes_addons_list",
        "summary": "List all addons",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of addons of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the addon.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/addons/{provider}/",
        "desc": "Retrieve details of an individual addon connected to this node.\n\n#### Permissions\n\nNodeSettings that are attached to public nodes will give read-only access to everyone. Private nodes require explicit read permission. Write and admin access are the same for public and private nodes. Administrators on a parent node have implicit read permissions for all child nodes.\n\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able to change the configuration (i.e. selected folder) of an already-configured NodeSettings entity.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the details of the requested addon, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_addon_read",
        "summary": "Retrieve an addon",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a node addon for node id being << node_id >> and provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the addon.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "node_addons",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "example.data"
            },
            {
                "example": "{\"data\": {\"id\": \"{provider}\", \"type\": \"node_addons\", \"attributes\": {\"folder_id\": \"{folder_id}\", \"folder_path\": \"{folder_path}\", \"external_account_id\": \"{account_id}\", \"label\": \"{label}\", \"url\": \"{url}\"}}}",
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/addons/{provider}/",
        "desc": "Updates a node addon by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nNode addon can be updated with either a **PUT** or **PATCH** request. The `external_account_id`, `enabled`, and `folder_id` fields are mandatory in a **PUT**, and optional in **PATCH**. Non-string values will be accepted and stringified, however we make no promises about the stringification output.\n\nTo delete or deauthorize a node addon, issue a **PUT** with all fields set to `null` or `False`, or a **PATCH** with enabled set `False`.\n\n#### Permissions\n\nNodeSettings that are attached to public nodes will give read-only access to everyone. Private nodes require explicit read permission. Write and admin access are the same for public and private nodes. Administrators on a parent node have implicit read permissions for all child nodes.\n\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able to change the configuration (i.e. selected folder) of an already-configured NodeSettings entity.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the new representation of the updated node addon, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_node_addon_update",
        "summary": "Update an addon",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update an addon for node id being << node_id >> and provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the provider",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/addons/{provider}/folders/",
        "desc": "A paginated list of folders retrieved from the associated third-party (provider) service.\n\n#### Permissions\n\nFolders are visible only to the user that authorized the addon.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of addon folder objects. Each resource in the array is a separate addon folder object and contains the full representation of the addon folder, meaning additional requests to a addon folder's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "nodes_addons_folders_list",
        "summary": "List all addon folders",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of addon folders for node id being << node_id >> and provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/children/",
        "desc": "A paginated list of the next level child nodes for the given node. The returned nodes are sorted by their `date_modified`, with the most recently updated child nodes appearing first.\n\nThe list will include child nodes that are public, as well as child nodes that are private, if the authenticated user has permission to view them.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 child nodes. If the given node has zero child nodes, the `data` key will contain an empty array. Each resource in the array is a separate node object and contains the full representation of the child node, meaning additional requests to the child node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/children/?filter[title]=reproducibility.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_children_list",
        "summary": "List all child nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of children of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the node entity (`nodes`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this node represents a fork of another node.",
                "location": "body",
                "name": "attributes.fork"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A list of strings that describe this node, as entered by project contributors.",
                "location": "body",
                "name": "attributes.tags"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes.tags"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.registration"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                "location": "body",
                "name": "attributes.preprint"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the node was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The category of the node, as selected by project contributors.",
                "location": "body",
                "name": "attributes.category"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique ID of the node from which this node was templated, if this node was created from a template.",
                "location": "body",
                "name": "attributes.template_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.collection"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the node is publicly visible. This field is only editable by project administrators.",
                "location": "body",
                "name": "attributes.public"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).",
                "location": "body",
                "name": "attributes.node_license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.forked_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the node.",
                "location": "body",
                "name": "attributes.title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the node.",
                "location": "body",
                "name": "attributes.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of comments on this node.",
                "location": "body",
                "name": "relationships.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of contributors on this node.",
                "location": "body",
                "name": "relationships.contributors"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of preprints that this node relates to.",
                "location": "body",
                "name": "relationships.preprints"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of log actions pertaining to this node.",
                "location": "body",
                "name": "relationships.logs"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of identifiers for this node (i.e. DOI identifiers).",
                "location": "body",
                "name": "relationships.identifiers"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of wiki pages for this node.",
                "location": "body",
                "name": "relationships.wikis"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node.",
                "location": "body",
                "name": "relationships.root"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the license that has been applied to this node.",
                "location": "body",
                "name": "relationships.license"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node which this node was forked from, if this node is a fork.",
                "location": "body",
                "name": "relationships.forked_from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are linked to the current node. This field has been deprecated as of verson 2.1; use the linked_nodes link instead.",
                "location": "body",
                "name": "relationships.node_links"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are linked to the current node.",
                "location": "body",
                "name": "relationships.linked_nodes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that is the direct parent of the current node, if the current node is a child node.",
                "location": "body",
                "name": "relationships.parent"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of registrations that have been initiated from this node and are still in a draft state.",
                "location": "body",
                "name": "relationships.draft_registrations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the citation details of this node.",
                "location": "body",
                "name": "relationships.citation"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of this node's children (components).",
                "location": "body",
                "name": "relationships.children"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are forks of this node.",
                "location": "body",
                "name": "relationships.forks"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of storage providers that have been enabled on this node.",
                "location": "body",
                "name": "relationships.files"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of registrations that have been created from this node.",
                "location": "body",
                "name": "relationships.registrations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of view only links that have been created for this node.",
                "location": "body",
                "name": "relationships.view_only_links"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that the current node was templated from, if the current node was created from a template.",
                "location": "body",
                "name": "relationships.template_node"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of institutions this node is affiliated with.",
                "location": "body",
                "name": "relationships.affiliated_institutions"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/children/",
        "desc": "Creates a new child node.\n\nNote: Creating a child node via this endpoint will function the same as creating a node via the node list endpoint, but the child node will have the given node set as its parent.\n\n#### Permissions\n\nOnly write contributors may create children nodes.\n\n#### Required\n\nRequired fields for creating a node include:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`title`\n\n&nbsp;&nbsp;&nbsp;&nbsp;`category`\n\nNote: nodes default to **private** unless the `public` field is explicitly set to **true** in the request payload.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the created node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_children_create",
        "summary": "Create a child node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new child for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/citation/",
        "desc": "The citation details for a node, in CSL format.\n\n#### Returns\n\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the node citation.",
        "operation_id": "nodes_citation_list",
        "summary": "Retrieve citation details",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a citation for the nodes with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the citation style.",
                "location": "path",
                "name": "style_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/citation/{style_id}/",
        "desc": "The citation for a node in a specific style.\n\n#### Returns\n\nReturns a JSON object with a `data` key that contains the representation of the node citation, in the requested style.",
        "operation_id": "nodes_citation_read",
        "summary": "Retrieve a styled citation",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get  a styled citation with style id being << style_id >> for node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/comments/",
        "desc": "A paginated list of comments related to a given node.\n\nThe returned comments are sorted by their creation date, with the most recent comments appearing first.\n\n#### Permissions\n\nComments on public nodes are given read-only access to everyone.\n\nIf the node comment-level is `private`, only contributors have permission to comment.\n\nIf the comment-level is `public`, any logged-in OSF user can comment.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/comments/?filter[target_id]=jg7sezmdnt93\n\nNodes may be filtered by their `deleted`, `target_id`, `date_created`, `date_modified`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting `true` or `false` in the query will cause the match to fail.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_comments_list",
        "summary": "List all comments",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of comments of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node you want to comment on.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The identifier of the comment entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the comment entity (`comments`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to edit this comment",
                "location": "body",
                "name": "attributes.can_edit"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the comment has been edited.",
                "location": "body",
                "name": "attributes.modified"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the comment was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the comment is deleted.",
                "location": "body",
                "name": "attributes.deleted"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the comment the current user reported this as spam.",
                "location": "body",
                "name": "attributes.has_report"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the comment has replies.",
                "location": "body",
                "name": "attributes.has_children"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The content of the comment.",
                "location": "body",
                "name": "attributes.content"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the comment is flagged or confirmed spam.",
                "location": "body",
                "name": "attributes.is_abuse"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the comment was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                "location": "body",
                "name": "attributes.page"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not an admin checked the legitimacy of this comment.",
                "location": "body",
                "name": "attributes.is_ham"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the node the comment is on.",
                "location": "body",
                "name": "relationships.node"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the replies to the comment.",
                "location": "body",
                "name": "relationships.replies"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the target of the comment.",
                "location": "body",
                "name": "relationships.target"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the reports connected to the comment.",
                "location": "body",
                "name": "relationships.reports"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the user who created the comment.",
                "location": "body",
                "name": "relationships.user"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/comments/",
        "desc": "Create a comment on a given node overview page or a reply to a comment on that node.\n\nTo create a comment on the node overview page, the target `type` would be \"nodes\" and the target `id` would be the node `id`.\n\nTo reply to a comment on this node, the target `type` would be \"comments\" and the target `id` would be the `id` of the comment to reply to.\n\n#### Required\n\nA relationship object with a `data` key, containing the target (`comments` or `nodes`) type and a target `id` is required.\n\nIn addition, the `content` attribute describing the relationship between the node and the comment is required.\n\n#### Returns\n\nReturns a JSON object with a data key containing the representation of the new comment, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_comment_create",
        "summary": "Create a comment",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new comment for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/contributors/",
        "desc": "A paginated list of the node's contributors, sorted by their index.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/y9jdt/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_contributors_list",
        "summary": "List all contributors",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of contributors of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the contributor entity (`contributors`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the contributor will be included in citations for the node. The default value is true.",
                "location": "body",
                "name": "attributes.bibliographic"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The position of this contributor in the list of project contributors and in project citations.",
                "location": "body",
                "name": "attributes.index"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The assigned name of the contributor if the contributor has not yet claimed their account.",
                "location": "body",
                "name": "attributes.unregistered_contributor"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The permission level of the contributor. The default value is 'write'.",
                "location": "body",
                "name": "attributes.permission"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the node that was created for the preprint, or from which the preprint was created.",
                "location": "body",
                "name": "relationships.node"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.",
                "location": "body",
                "name": "relationships.user"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/contributors/",
        "desc": "Adds a contributor to a node, effectively creating a relationship between the node and a user.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Permissions\nOnly project administrators can add contributors to a node.\n#### Required\nA relationship object with a `data` key, containing the `users` type and valid user ID is required.\n\nAll attributes describing the relationship between the node and the user are optional.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_contributors_create",
        "summary": "Create a contributor",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new contributor for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/contributors/{user_id}/",
        "desc": "Removes a contributor from a node. This request only removes the relationship between the node and the user, it does not delete the user itself.\n\nA node must always have at least one admin, and attempting to remove the only admin from a node will result in a **400 Bad Request** response.\n#### Permissions\nA user can remove themselves as a node contributor. Otherwise, only project administrators can remove contributors.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_contributors_delete",
        "summary": "Delete a contributor",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "delete a contributor with user id being << user_id >> for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/contributors/{user_id}/",
        "desc": "Retrieves the details of a given contributor.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_contributors_read",
        "summary": "Retrieve a contributor",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a contributor with user id being << user_id >> for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the contributor entity (`contributors`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the contributor will be included in citations for the node. The default value is true.",
                "location": "body",
                "name": "attributes.bibliographic"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The position of this contributor in the list of project contributors and in project citations.",
                "location": "body",
                "name": "attributes.index"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The assigned name of the contributor if the contributor has not yet claimed their account.",
                "location": "body",
                "name": "attributes.unregistered_contributor"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The permission level of the contributor. The default value is 'write'.",
                "location": "body",
                "name": "attributes.permission"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the node that was created for the preprint, or from which the preprint was created.",
                "location": "body",
                "name": "relationships.node"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.",
                "location": "body",
                "name": "relationships.user"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/contributors/{user_id}/",
        "desc": "Updates a contributor by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nContributors can be updated with either a **PUT** or **PATCH** request. Since this endpoint has no mandatory attributes, PUT and PATCH are functionally the same.\n#### Permissions\nOnly project administrators can update the contributors on a node.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nIf the given user is not already in the contributor list, a 404 Not Found error will be returned. A node must always have at least one admin, and any attempt to downgrade the permissions of a sole admin will result in a 400 Bad Request error.",
        "operation_id": "nodes_contributors_partial_update",
        "summary": "Update a contributor",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a contributor with user id being << user_id >> for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/draft_registrations/",
        "desc": "A paginated list of all of the draft registrations of a given node.\n\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn.\n\nYour original project remains editable but will now have the draft registration linked to it.\n\n#### Permissions\n\nOnly project administrators may view draft registrations.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 draft registrations. Each resource in the array is a separate draft registration object and contains the full representation of the draft registration, meaning additional requests to a draft registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "nodes_draft_registrations_list",
        "summary": "List all draft registrations",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of draft registrations for a nodes with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the draft registration entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the draft registration entity (`draft_registrations`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.datetime_initiated"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of an active registration schema that this registration will conform to.",
                "location": "body",
                "name": "attributes.registration_supplement"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary of question IDs and responses from the registration schema.",
                "location": "body",
                "name": "attributes.registration_metadata"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.datetime_updated"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/draft_registrations/",
        "desc": "Initiate a draft registration of the current node.\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn. It is the first step in creating a registration.\n\nRefer to step 2: [How to complete the supplemental registration questions of a draft registration](#operation/nodes_draft_registrations_partial_update)\n\nRefer to step 3: [How to create a registration from a completed draft registration](#operation/nodes_registrations_create)\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may create draft registrations.\n#### Required\nRequired fields for creating a draft registration include:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`registration_supplement`\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_draft_registrations_create",
        "summary": "Create a draft registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a draft registration for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the draft registration.",
                "location": "path",
                "name": "draft_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/draft_registrations/{draft_id}/",
        "desc": "Permanently deletes a draft registration. A draft that has already been registered cannot be deleted.\n#### Permissions\nOnly project administrators may delete draft registrations.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "operation_id": "nodes_draft_registrations_delete",
        "summary": "Delete a draft registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "delete a draft registration for node id being << node_id >> and draft id being << draft_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the draft registration.",
                "location": "path",
                "name": "draft_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/draft_registrations/{draft_id}/",
        "desc": "Retrieve the details of a given draft registration.\n\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn.\n\nYour original project remains editable but will now have the draft registration linked to it.\n\n#### Permissions\n\nOnly project administrators may view draft registrations.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_draft_registrations_read",
        "summary": "Retrieve a draft registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a draft registration for node id being << node_id >> and draft id being << draft_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the draft registration.",
                "location": "path",
                "name": "draft_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the draft registration entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the draft registration entity (`draft_registrations`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of an active registration schema that this registration will conform to.",
                "location": "body",
                "name": "attributes.registration_supplement"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary of question IDs and responses from the registration schema.",
                "location": "body",
                "name": "attributes.registration_metadata"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/draft_registrations/{draft_id}/",
        "desc": "Update a draft registration by answering the supplemental registration questions. This is the second step in creating a registration. The answers will go under registration_metadata. Registration_metadata must be a dictionary with keys as question ids in the registration form, and values as nested dictionaries matching the specific format in the registration metaschema.\n\n[To view all active registration schemas](#operation/registration_metaschemas_list)\n\n[To retrieve the format of a certain registration schema](#operation/registration_metaschemas_read)\n\nIf a question is multiple-choice, the question response must exactly match one of the possible choices.\n\nRefer to step 1: [How to create a draft registration](#operation/nodes_draft_registrations_create)\n\nRefer to step 3: [How to create a registration from a completed draft registration](#operation/nodes_registrations_create)\n\n#### Permissions\nOnly project administrators may update draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_draft_registrations_partial_update",
        "summary": "Update a draft registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a draft registration for node id being << node_id >> and draft id being << draft_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/files/",
        "desc": "List of all storage providers that are configured for this node\n\nUsers of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.\n\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nNote: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.",
        "operation_id": "nodes_providers_list",
        "summary": "List all storage providers",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of files of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the storage provider.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/files/providers/{provider}/",
        "desc": "Retrieves the details of a storage provider enabled on this node.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_providers_read",
        "summary": "Retrieve a storage provider",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a storage providers being << providers >> for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the storage provider.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/files/{provider}/",
        "desc": "List of all the files/folders that are attached to your project for a given storage provider.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/?filter[kind]=file\n\nNode files may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).\n\n### Waterbutler API actions\n\nFiles can be modified via the Waterbutler URLs found in the `links` key of the response (new_folder, move, upload, download, and delete). Further information about how to interact with files can be found in the [Waterbutler API documentation](https://waterbutler.readthedocs.io/en/latest/api.html#v1-api).",
        "operation_id": "nodes_files_list",
        "summary": "List all node files",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of node files with node id being << node_id >> for provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the storage provider.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the file path.",
                "location": "path",
                "name": "path"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/files/{provider}/{path}/",
        "desc": "Retrieves the details of a file attached to given node (project or component) for the given storage provider.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_files_read",
        "summary": "Retrieve a file",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a file by path being << path >>, node id being << node_id >>, and provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/forks/",
        "desc": "\nA paginated list of the current node's forks. The returned fork nodes are sorted by their `forked_date`, with the most recently forked nodes appearing first.\n\nForking a project creates a copy of an existing node and all of its contents. The fork always points back to the original node, forming a network of nodes.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 forked nodes. If the current node has zero forked nodes, the `data` key will contain an empty array. Each resource in the array is a separate node object and contains the full representation of the forked node, meaning additional requests to the forked node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "operation_id": "nodes_forks_list",
        "summary": "List all forks of this node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of forks of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the node entity (`nodes`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this node represents a fork of another node.",
                "location": "body",
                "name": "attributes.fork"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A list of strings that describe this node, as entered by project contributors.",
                "location": "body",
                "name": "attributes.tags"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes.tags"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.registration"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                "location": "body",
                "name": "attributes.preprint"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the node was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The category of the node, as selected by project contributors.",
                "location": "body",
                "name": "attributes.category"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique ID of the node from which this node was templated, if this node was created from a template.",
                "location": "body",
                "name": "attributes.template_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.collection"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the node is publicly visible. This field is only editable by project administrators.",
                "location": "body",
                "name": "attributes.public"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).",
                "location": "body",
                "name": "attributes.node_license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.forked_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the node.",
                "location": "body",
                "name": "attributes.title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the node.",
                "location": "body",
                "name": "attributes.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of comments on this node.",
                "location": "body",
                "name": "relationships.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of contributors on this node.",
                "location": "body",
                "name": "relationships.contributors"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of preprints that this node relates to.",
                "location": "body",
                "name": "relationships.preprints"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of log actions pertaining to this node.",
                "location": "body",
                "name": "relationships.logs"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of identifiers for this node (i.e. DOI identifiers).",
                "location": "body",
                "name": "relationships.identifiers"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of wiki pages for this node.",
                "location": "body",
                "name": "relationships.wikis"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node.",
                "location": "body",
                "name": "relationships.root"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the license that has been applied to this node.",
                "location": "body",
                "name": "relationships.license"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node which this node was forked from, if this node is a fork.",
                "location": "body",
                "name": "relationships.forked_from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are linked to the current node. This field has been deprecated as of verson 2.1; use the linked_nodes link instead.",
                "location": "body",
                "name": "relationships.node_links"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are linked to the current node.",
                "location": "body",
                "name": "relationships.linked_nodes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that is the direct parent of the current node, if the current node is a child node.",
                "location": "body",
                "name": "relationships.parent"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of registrations that have been initiated from this node and are still in a draft state.",
                "location": "body",
                "name": "relationships.draft_registrations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the citation details of this node.",
                "location": "body",
                "name": "relationships.citation"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of this node's children (components).",
                "location": "body",
                "name": "relationships.children"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of nodes that are forks of this node.",
                "location": "body",
                "name": "relationships.forks"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of storage providers that have been enabled on this node.",
                "location": "body",
                "name": "relationships.files"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of registrations that have been created from this node.",
                "location": "body",
                "name": "relationships.registrations"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of view only links that have been created for this node.",
                "location": "body",
                "name": "relationships.view_only_links"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the node that the current node was templated from, if the current node was created from a template.",
                "location": "body",
                "name": "relationships.template_node"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A link to the list of institutions this node is affiliated with.",
                "location": "body",
                "name": "relationships.affiliated_institutions"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/forks/",
        "desc": "Creates a fork of the given node.\n\nForking a project creates a copy of an existing node and all of its contents. The fork always points back to the original node, forming a network of nodes.\n\nYou might use a fork to copy another's work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.\n\nWhen creating a fork, your fork will only contain public components of the current node and components for which you are a contributor. Private components that you do not have access to will not be forked.\n\n#### Required\n\nThere are no required attributes when creating a fork, as all of the forked node's attributes will be copied from the current node.\n\nThe `title` field is optional, with the default title being \"Fork of \" prepended to the current node's title.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the complete srepresentation of the forked node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_forks_create",
        "summary": "Create a fork of this node",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new fork for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/identifiers/",
        "desc": "List all identifiers associated with a given node.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of identifiers. Each resource in the array is a separate identifier object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/identifiers/?filter[category]=doi\n\nIdentifiers may be filtered by their `category` e.g `doi`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_identifiers_list",
        "summary": "List all identifiers",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of identifiers of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/institutions/",
        "desc": "List of all institutions affiliated with this node.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 affilited institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "nodes_institutions_list",
        "summary": "List all institutions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of institutions of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/linked_nodes/",
        "desc": "List of all nodes linked to the given node.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/?filter[title]=reproducibility.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`. `title`, `description`, and `category` are string fields and will be filteres using simple substring matching. `public`, `registration` are boolean and can be filtered using truthy values, such as `true`, `false`, `0`, `1`. `tags` is an array of simple strings.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_linked_nodes_list",
        "summary": "List all linked nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "linked nodes a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/logs/",
        "desc": "A paginated list of all logs associated with a given node.\n\nThe returned logs are sorted by their `date`, with the most recents logs appearing first.\n\nThis list includes the logs of the specified node as well as the logs of that node's children to which the current user has read-only access.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 logs. Each resource in the array is a separate logs object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include logs that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/logs/?filter[action]=made_private.\n\nNodes may be filtered by their `action`, and `date`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_logs_list",
        "summary": "List all logs",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of logs of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/preprints/",
        "desc": "A paginated list of preprints related to a given node. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n\n**Note: This API endpoint is under active development, and is subject to change in the future.**\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "nodes_preprints_list",
        "summary": "List all preprints",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of pre prints of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/registrations/",
        "desc": "List of all registrations of the given node.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 registrations. Each resource in the array is a separate registrations object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the filter query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_registrations_list",
        "summary": "List all registrations",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of registrations of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the registration entity (`registrations`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration represents a fork of another node.",
                "location": "body",
                "name": "attributes.fork"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Describes when the registration will become public, either \"immediate\" or \"embargo\". If this field is \"embargo\", you will need to supply a datetime in the \"lift_embargo\" field.",
                "location": "body",
                "name": "attributes.registration_choice"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.registration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_withdrawn"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                "location": "body",
                "name": "attributes.preprint"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which this registration was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_registered"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the registered node was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is pending approval from project administrators.",
                "location": "body",
                "name": "attributes.pending_registration_approval"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is pending approval for withdrawal from project administrators.",
                "location": "body",
                "name": "attributes.pending_withdrawal"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The category of the registered node.",
                "location": "body",
                "name": "attributes.category"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the registration schema this registration conforms to.",
                "location": "body",
                "name": "attributes.registration_supplement"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary with supplemental registration questions and responses.",
                "location": "body",
                "name": "attributes.registered_meta"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).",
                "location": "body",
                "name": "attributes.node_license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template.",
                "location": "body",
                "name": "attributes.template_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A future datetime when the registration will become public. This field should be set when \"registration_choice\" is set to \"embargo\" in the range from 2 days to 4 years.",
                "location": "body",
                "name": "attributes.lift_embargo"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.collection"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is publicly visible.",
                "location": "body",
                "name": "attributes.public"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the registered node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the registered node.",
                "location": "body",
                "name": "attributes.title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.embargo_end_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the registered node.",
                "location": "body",
                "name": "attributes.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the draft registration from which the registration will be created.",
                "location": "body",
                "name": "attributes.draft_registration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.",
                "location": "body",
                "name": "attributes.withdrawal_justification"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the embargo associated with this registration is pending approval from project administrators.",
                "location": "body",
                "name": "attributes.pending_embargo_approval"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration has been withdrawn.",
                "location": "body",
                "name": "attributes.withdrawn"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/registrations/",
        "desc": "Finalize the registration process of the current draft registration. A registration is created from a completed draft registration (containing the supplemental registration questions). It also needs information about whether the registration will become public immediately or be embargoed, and conditionally, the datetime at which the registration will become public.\n\nRefer to step 1: [How to create a draft registration](#operation/nodes_draft_registrations_create)\n\nRefer to step 2: [How to complete the supplemental registration questions of a draft registration](#operation/nodes_draft_registrations_partial_update)\n\nA registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn. Your original project remains editable but will now have the registration linked to it.\n#### Permissions\nOnly project administrators may create registrations.\n#### Required\nRequired fields for creating a registration include:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`draft_registration`\n\n&nbsp;&nbsp;&nbsp;&nbsp;`registration_choice`\n\n&nbsp;&nbsp;&nbsp;&nbsp;`lift_embargo` (Only required when `registration_choice` is \"embargo\")\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_registrations_create",
        "summary": "Create a registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new registration for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/settings/",
        "desc": "Retrieves the details of settings related to the node.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested node settings, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Permissions\n\nSettings for a node are readable by users that are contributors on the node. Most fields are writeable only by users that are administrators on the node. The fields for determining redirect links are writable by a contributor who has read/write permissions on the node.",
        "operation_id": null,
        "summary": "Retrieve node settings",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of settings of a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/settings/",
        "desc": "Updates the details of settings related to the node.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the updated representation of the requested node settings, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Permissions\n\nMost fields on the node settings entity are writeable only by users that are administrators on the node. The fields for determining redirect links are writable by a contributor who has read/write permissions on the node.",
        "operation_id": null,
        "summary": "Update node settings",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a node setting with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/view_only_links/",
        "desc": "List of view only links on a node.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 view only links. Each resource in the array is a view only link object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are administrators on the node.\n\n#### Filtering\n\nYou can optionally request that the response only include view only links that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/view_only_links/?filter[anonymous]=true.\n\nView Only Links may be filtered based on their `name`, `anonymous` and `date_created` fields. Possible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_view_only_links_list",
        "summary": "List all view only links",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of view only links for node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the view only link.",
                "location": "path",
                "name": "link_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/view_only_links/{link_id}/",
        "desc": "Retrieves the details of a view only link on a node.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are administrators on the node.",
        "operation_id": "nodes_view_only_links_read",
        "summary": "Retrieve a view only link",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a view only link for node id being << node_id >> and link id being << link_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/nodes/{node_id}/wikis/",
        "desc": "List of wiki pages on a node.\n#### Returns\n\nPaginated list of the node's current wiki pages, ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\n\nWiki pages can be filtered based on their `name` and `date_modified` fields.\n\n+ `filter[name]=<Str>` -- filter wiki pages by name\n\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nPossible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "nodes_wikis_list",
        "summary": "List all wikis",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of wikis for node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the node.",
                "location": "path",
                "name": "node_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The identifier of the wiki.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the wiki (`wikis`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Size of the wiki.",
                "location": "body",
                "name": "attributes.size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The name/title of the wiki page.",
                "location": "body",
                "name": "attributes.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether the current user is allowed to post comments on this wiki.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Materialized path to the wiki object.",
                "location": "body",
                "name": "attributes.materialized_path"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Content type of the wiki (`text/markdown`).",
                "location": "body",
                "name": "attributes.content_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The type of object.",
                "location": "body",
                "name": "attributes.kind"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing additional metadata about this wiki, including version information.",
                "location": "body",
                "name": "attributes.extra"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Path to the wiki object.",
                "location": "body",
                "name": "attributes.path"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the associated node.",
                "location": "body",
                "name": "relationships.node"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the versions related to this wiki.",
                "location": "body",
                "name": "relationships.versions"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the comments related to this wiki.",
                "location": "body",
                "name": "relationships.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the user associated with this wiki.",
                "location": "body",
                "name": "relationships.user"
            }
        ],
        "response_desc": "",
        "url": "/v2/nodes/{node_id}/wikis/",
        "desc": "Creates a new wiki page on the given node.\n\n`name` is the only required field when creating a new wiki page. The `content` of the wiki page may optionally be included.\n\nReturns a JSON object with a `data` key containing the representation of the created wiki, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "nodes_wikis_list_create",
        "summary": "Create a wiki",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a wiki for a node with node id being << node_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/preprints/",
        "desc": "A paginated list of preprints from all preprint providers. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/?filter[provider]=socarxiv.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "preprints_list",
        "summary": "List all preprints",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the pre prints",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The identifier of the preprint entity.",
                "location": "body",
                "name": "data.id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the preprint entity (`preprints`).",
                "location": "body",
                "name": "data.type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions.",
                "location": "body",
                "name": "data.attributes.is_preprint_orphan"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the preprint was published, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "data.attributes.date_published"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject.",
                "location": "body",
                "name": "data.attributes.subjects"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "data.attributes.subjects"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The metadata (copyright year and holder) associated with a license, required for certain licenses.",
                "location": "body",
                "name": "data.attributes.license_record"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the preprint was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "data.attributes.date_created"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The DOI of the associated journal article, as entered by the user, if the preprint is published.",
                "location": "body",
                "name": "data.attributes.doi"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the preprint was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "data.attributes.date_modified"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the node that was created for the preprint, or from which the preprint was created.",
                "location": "body",
                "name": "data.relationships.node"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.).",
                "location": "body",
                "name": "data.relationships.provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the license that has been applied to the preprint.",
                "location": "body",
                "name": "data.relationships.license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint.",
                "location": "body",
                "name": "data.relationships.primary_file"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the citation of the preprint.",
                "location": "body",
                "name": "data.relationships.citation"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the identifiers associated with the preprint.",
                "location": "body",
                "name": "data.relationships.identifiers"
            }
        ],
        "response_desc": "",
        "url": "/v2/preprints/",
        "desc": "Creates a new preprint.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "operation_id": "preprints_create",
        "summary": "Create a preprint",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new pre print",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint.",
                "location": "path",
                "name": "preprint_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/preprints/{preprint_id}/",
        "desc": "Retrieves the details of a preprint.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "preprints_read",
        "summary": "Retrieve a preprint",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a pre print with pre print id being << preprint_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint.",
                "location": "path",
                "name": "preprint_id"
            },
            {
                "example": null,
                "type": null,
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "data.example.data"
            },
            {
                "example": "{\"data\": {\"id\": \"{preprint_id}\", \"attributes\": {\"doi\": \"{doi}\"}, \"relationships\": {\"primary_file\": {\"data\": {\"id\": \"{file_id}\", \"type\": \"primary_files\"}}}}}",
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "data"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/preprints/{preprint_id}/",
        "desc": "Updates the specified preprint by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "operation_id": "preprints_partial_update",
        "summary": "Update a preprint",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a pre print with pre print id being << preprint_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint whose citation you wish to retrieve.",
                "location": "path",
                "name": "preprint_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/preprints/{preprint_id}/citation/",
        "desc": "The citation details for a preprint, in CSL format.\n\n#### Returns\n\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the preprint citation.",
        "operation_id": "preprints_citation_list",
        "summary": "Retrieve citation details",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get citation for a pre print with pre print id being << preprint_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint.",
                "location": "path",
                "name": "preprint_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the citation style.",
                "location": "path",
                "name": "style_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/preprints/{preprint_id}/citation/{style_id}/",
        "desc": "The citation for a preprint in a specific style.\n\n#### Returns\n\nReturns a JSON object with a `data` key that contains the representation of the preprint citation, in the requested style.",
        "operation_id": "preprints_citation_read",
        "summary": "Retrieve a styled citation",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a styled citation with style id being << style_id >> for pre print id being << preprint_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/providers/preprints/",
        "desc": "A paginated list of all preprint providers.\n\nThe returned preprint providers are sorted by their creation date, with the most recent preprints appearing first.\n\n_< v2.8 use `preprint_providers` instead of `providers/preprints`_\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers.\n\nEach resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include preprint providers that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/providers/preprints/?filter[id]=osf.\n\nPreprint Providers may be filtered by their `id`, `name`,  and `description`\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "preprint_provider_list",
        "summary": "List all preprint providers",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of pre prints providers",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint provider.",
                "location": "path",
                "name": "preprint_provider_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/providers/preprints/{preprint_provider_id}/",
        "desc": "Retrieves the details of a preprint provider.\n\n_< v2.8 use `preprint_providers` instead of `providers/preprints`_\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested preprint provider, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "preprint_provider_detail",
        "summary": "Retrieve a preprint provider",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a pre print provider for pre print provider id being << preprint_provider_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint provider.",
                "location": "path",
                "name": "preprint_provider_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/providers/preprints/{preprint_provider_id}/licenses/",
        "desc": "A paginated list of the licenses allowed bya preprint provider.\n\n_< v2.8 use `preprint_providers` instead of `providers/preprints`_\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "preprint_provider_licenses_list",
        "summary": "List all licenses",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of licenses for a pre print with pre print provider id being << preprint_provider_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint provider.",
                "location": "path",
                "name": "preprint_provider_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/providers/preprints/{preprint_provider_id}/preprints/",
        "desc": "A paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n\n_< v2.8 use `preprint_providers` instead of `providers/preprints`_\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\n\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/providers/preprints/osf/preprints/?filter[is_published]=true.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "preprint_providers_preprints_list",
        "summary": "List all preprints",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of pre prints with pre print provider id being << preprint_provider_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the preprint provider.",
                "location": "path",
                "name": "preprint_provider_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/providers/preprints/{preprint_provider_id}/taxonomies/",
        "desc": "A paginated list of the taxonomies for a preprint provider.\n\nThe returned preprint providers taxonomies are sorted by their creation date, with the most recent preprints appearing first.\n\n\n _< v2.8 use `preprint_providers` instead of `providers/preprints`_\n\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "preprint_provider_taxonomies_list",
        "summary": "List all taxonomies",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of taxonomies for pre print provider id being << preprint_provider_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/registrations/",
        "desc": "A paginated list of registrations on the OSF to which the user has access.\n\nThe returned registrations are those which are public or which the user has access to view.\n\nNon-registered nodes cannot be accessed through this endpoint (use the [nodes](#Nodes_nodes_list) endpoints instead).\n\n#### Registrations\n\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\n\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_list",
        "summary": "List all registrations",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of registrations",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/",
        "desc": "Retrieve the details of a given registration.\n\n#### Permissions\n\nOnly project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public registration, as public registrations give read-only access to everyone.\n\n#### Registrations\n\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted.\n\nThe *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\n\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "registrations_read",
        "summary": "Retrieve a registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the registration entity (`registrations`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration represents a fork of another node.",
                "location": "body",
                "name": "attributes.fork"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Describes when the registration will become public, either \"immediate\" or \"embargo\". If this field is \"embargo\", you will need to supply a datetime in the \"lift_embargo\" field.",
                "location": "body",
                "name": "attributes.registration_choice"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.registration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_withdrawn"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                "location": "body",
                "name": "attributes.preprint"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which this registration was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_registered"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the registered node was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is pending approval from project administrators.",
                "location": "body",
                "name": "attributes.pending_registration_approval"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is pending approval for withdrawal from project administrators.",
                "location": "body",
                "name": "attributes.pending_withdrawal"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The category of the registered node.",
                "location": "body",
                "name": "attributes.category"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the registration schema this registration conforms to.",
                "location": "body",
                "name": "attributes.registration_supplement"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary with supplemental registration questions and responses.",
                "location": "body",
                "name": "attributes.registered_meta"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).",
                "location": "body",
                "name": "attributes.node_license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template.",
                "location": "body",
                "name": "attributes.template_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A future datetime when the registration will become public. This field should be set when \"registration_choice\" is set to \"embargo\" in the range from 2 days to 4 years.",
                "location": "body",
                "name": "attributes.lift_embargo"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.collection"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is publicly visible.",
                "location": "body",
                "name": "attributes.public"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the registered node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the registered node.",
                "location": "body",
                "name": "attributes.title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.embargo_end_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the registered node.",
                "location": "body",
                "name": "attributes.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the draft registration from which the registration will be created.",
                "location": "body",
                "name": "attributes.draft_registration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.",
                "location": "body",
                "name": "attributes.withdrawal_justification"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the embargo associated with this registration is pending approval from project administrators.",
                "location": "body",
                "name": "attributes.pending_embargo_approval"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration has been withdrawn.",
                "location": "body",
                "name": "attributes.withdrawn"
            }
        ],
        "response_desc": "Created",
        "url": "/v2/registrations/{registration_id}/",
        "desc": "Updates a registration's privacy from **private** to **public**.\n\nRegistrations can be updated with either a **PUT** or **PATCH** request. The `public` field is the only field that can be modified on a registration\n\nRegistrations can only be turned from private to public, not vice versa.\n#### Permissions\nOnly project administrators may update a registration.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "registrations_partial_update",
        "summary": "Update a registration",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/children/",
        "desc": "A paginated list of children of a registration.\n\nThe list consists of the next level child registrations for the given registration. The returned registrations are sorted by their `date_modified`, with the most recently updated child registrations appearing first.\n\nThe list will include child registrations that are public, as well as child registrations that are private, if the authenticated user has permission to view them.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 child registrations. If the given registration has zero child registrations, the `data` key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the child registration.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/children/?filter[title]=reproducibility.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_children_list",
        "summary": "List all child registrations",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of children of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/citations/",
        "desc": "A paginated list of the registration's alternative citation styles\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_citations_list",
        "summary": "List all citation styles",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of citations of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the citation.",
                "location": "path",
                "name": "citation_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/citations/{citation_id}/",
        "desc": "Retrieves the citation style details for a registration, in CSL format.\n\n#### Returns\n\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the citation style.",
        "operation_id": "registrations_citation_read",
        "summary": "Retrieve a citation",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a citation with citation id being << citation_id >> for a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/comments/",
        "desc": "A paginated list of the registration's comments.\n\nThe returned comments are sorted by their creation date, with the most recent comments appearing first.\n\n#### Permissions\n\nComments of public registrations are given read-only access to everyone.\n\nIf the comment-level is `private`, only registration contributors have permission to comment.\n\nIf the comment-level is `public`, any logged-in OSF user can comment.\n\nComments of private registrations are only visible to contributors and administrators on the registration.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wuerf/comments/?filter[target]=wuerf\n\nComments may be filtered by their `deleted`, `target`, `date_created`, `date_modified`.\n\nMost fields are string fields and will be filtered using simple substring matching. Deleted is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting `true` or `false` in the query will cause the match to fail.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_comments_list",
        "summary": "List all comments",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of comments of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/contributors/",
        "desc": "A paginated list of all contributors on this registration.\n\nThe returned contributors are sorted by their index.\n\nContributors are users who can make changes to the registration or, in the case of private registration, have read access to the registration.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed in the contributors list on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 contributors. Each resource in the array contains the full representation of the contributor. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_contributors_list",
        "summary": "List all contributors",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of contributors of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/contributors/{user_id}/",
        "desc": "Retrieves the details of a contributor on this registration.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "registrations_contributors_read",
        "summary": "Retrieve a contributor",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a contributor with user id being << user_id >> for registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/files/",
        "desc": "A paginated list of storage providers enabled on the registration\n\nUsers of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.\n\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 files. Each resource in the array is a separate file object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nNote: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.",
        "operation_id": "registrations_providers_list",
        "summary": "List all storage providers",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of files of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the storage provider.",
                "location": "path",
                "name": "provider"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/files/{provider}/",
        "desc": "List of all the registration's files/folders for a given storage provider.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/files/osfstorage/?filter[kind]=file\n\nFiles may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_files_list",
        "summary": "List all files",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of files for registration id being << registration_id >> and provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the storage provider.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the file path.",
                "location": "path",
                "name": "path"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/files/{provider}/{path}/",
        "desc": "Retrieves the details of a registration file for the given storage provider.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested registration file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "registrations_files_read",
        "summary": "Retrieve a file",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a file for path being << path >>, registration id being << registration_id >>, and provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/forks/",
        "desc": "A paginated list of the registration\u2019s forks\n\nThe returned forks are sorted by their `forked_date`, with the most recent forks appearing first.\n\nForking a registration creates a copy of an existing registration and all of its contents.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 forks. If the current registration has no fork, the `data` key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the registration's fork.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "registrations_forks_list",
        "summary": "List all forks",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of forks of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the registration entity (`registrations`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration represents a fork of another node.",
                "location": "body",
                "name": "attributes.fork"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Describes when the registration will become public, either \"immediate\" or \"embargo\". If this field is \"embargo\", you will need to supply a datetime in the \"lift_embargo\" field.",
                "location": "body",
                "name": "attributes.registration_choice"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.",
                "location": "body",
                "name": "attributes.current_user_can_comment"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.registration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_withdrawn"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                "location": "body",
                "name": "attributes.preprint"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which this registration was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_registered"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the registered node was last modified, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_modified"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is pending approval from project administrators.",
                "location": "body",
                "name": "attributes.pending_registration_approval"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is pending approval for withdrawal from project administrators.",
                "location": "body",
                "name": "attributes.pending_withdrawal"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The category of the registered node.",
                "location": "body",
                "name": "attributes.category"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the registration schema this registration conforms to.",
                "location": "body",
                "name": "attributes.registration_supplement"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary with supplemental registration questions and responses.",
                "location": "body",
                "name": "attributes.registered_meta"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).",
                "location": "body",
                "name": "attributes.node_license"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template.",
                "location": "body",
                "name": "attributes.template_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A future datetime when the registration will become public. This field should be set when \"registration_choice\" is set to \"embargo\" in the range from 2 days to 4 years.",
                "location": "body",
                "name": "attributes.lift_embargo"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                "location": "body",
                "name": "attributes.collection"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the registration is publicly visible.",
                "location": "body",
                "name": "attributes.public"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the registered node was created, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The title of the registered node.",
                "location": "body",
                "name": "attributes.title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.embargo_end_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the registered node.",
                "location": "body",
                "name": "attributes.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the draft registration from which the registration will be created.",
                "location": "body",
                "name": "attributes.draft_registration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.",
                "location": "body",
                "name": "attributes.withdrawal_justification"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the embargo associated with this registration is pending approval from project administrators.",
                "location": "body",
                "name": "attributes.pending_embargo_approval"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not this registration has been withdrawn.",
                "location": "body",
                "name": "attributes.withdrawn"
            }
        ],
        "response_desc": "",
        "url": "/v2/registrations/{registration_id}/forks/",
        "desc": "Creates a fork of the given registration.\n\nForking a project creates a copy of an existing registration and all of its contents. The fork always points back to the original registration, forming a network of registrations.\n\nYou might use a fork to copy another's work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.\n\nWhen creating a fork, your fork will only contain public components of the current registration and components for which you are a contributor. Private components that you do not have access to will not be forked.\n#### Required\nThere are no required attributes when creating a fork, as all of the forked registration's attributes will be copied from the current registration.\n\nThe `title` field is optional, with the default title being \"Fork of \" prepended to the current registration's title.\n#### Returns\nReturns a JSON object with a `data` key containing the complete representation of the forked registration, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "registrations_forks_create",
        "summary": "Create a fork",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new fork for a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/identifiers/",
        "desc": "A paginated list of the registration's identifiers.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of identifiers. Each resource in the array is a separate identifier object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/identifiers/?filter[category]=doi\n\nIdentifiers may be filtered by their `category` e.g `doi`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_identifiers_list",
        "summary": "List all identifiers",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of identifiers of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/institutions/",
        "desc": "A paginated list of institutions affiliated with the registration.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 affiliated institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "registrations_institutions_list",
        "summary": "List all institutions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of institutions of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/linked_nodes/",
        "desc": "List of all nodes linked to the registration.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/linked_nodes/?filter[title]=reproducibility/?filter[title]=reproducibility.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`. `title`, `description`, and `category` are string fields and will be filteres using simple substring matching. `public`, `registration` are boolean and can be filtered using truthy values, such as `true`, `false`, `0`, `1`. `tags` is an array of simple strings.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_linked_nodes_list",
        "summary": "List all linked nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "linked nodes a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/logs/",
        "desc": "A paginated list of the registration's logs.\n\nThe returned logs are sorted by their `date`, with the most recents logs appearing first.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 logs. Each resource in the array is a separate logs object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include logs that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/logs/?filter[action]=made_private.\n\nLogs may be filtered by their `action`, and `date`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_logs_list",
        "summary": "List all logs",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of logs of a registration with registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/view_only_links/",
        "desc": "A paginated list of view only links created for this registration.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 view only links. Each resource in the array is a view only link object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Permissions\n\nView only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.\n\n#### Filtering\n\nYou can optionally request that the response only include view only links that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/view_only_links/?filter[anonymous]=true.\n\nView Only Links may be filtered based on their `name`, `anonymous` and `date_created` fields. Possible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_view_only_links_list",
        "summary": "List all view only links",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of view only links for registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the view only link.",
                "location": "path",
                "name": "link_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/view_only_links/{link_id}/",
        "desc": "Retrieves the details of a view only link created from this registration.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Permissions\n\nView only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.",
        "operation_id": "registrations_view_only_links_read",
        "summary": "Retrieve a view only link",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a view only link for registration id being << registration_id >> and link id being << link_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the registration.",
                "location": "path",
                "name": "registration_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/registrations/{registration_id}/wikis/",
        "desc": "A paginated list of the registration's wiki pages\n\n#### Returns\n\nA list of all registration's current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\n\nWiki pages can be filtered based on their `name` and `date_modified` fields.\n\n+ `filter[name]=<Str>` -- filter wiki pages by name\n\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nPossible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "registrations_wikis_list",
        "summary": "List all wikis",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of wikis for registration id being << registration_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/taxonomies/",
        "desc": "A paginated list of all [bepress disciplines taxonomies](https://www.bepress.com/wp-content/uploads/2016/12/Digital-Commons-Disciplines-taxonomy-2017-01.pdf).\n\nNote: this API endpoint is under active development, and is subject to change in the future.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 taxonomies. Each resource in the array is a separate taxonomy object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include taxonomies that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/taxonomies/?filter['id']='{taxonomy_id}'.\n\nTaxonomies may be filtered by their `id`, `parents`, and `text`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "taxonomies_list",
        "summary": "List all taxonomies",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of taxonomies",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the taxonomy.",
                "location": "path",
                "name": "taxonomy_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/taxonomies/{taxonomy_id}/",
        "desc": "Retrieves the details of a taxonomy.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested taxonomy, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "taxonomies_read",
        "summary": "Retrieve a taxonomy",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a taxonomy with taxonomy id being << taxonomy_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/users/",
        "desc": "A paginated list of all users registered on the OSF. The returned users are sorted by their `date_registered`, with the most recently registered users appearing first.\n\nThe subroute `/users/me/` is a special endpoint that always points to the currently logged-in user.\n\n#### Versioning\n\nAs of version `2.3`, merged users will not be returned from this endpoint.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 users. Each resource in the array is a separate users object and contains the full representation of the user, meaning additional requests to a user's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/?filter[family_name]=Nosek.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_name`, or `family_name`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "users_list",
        "summary": "List all users",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of users",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/",
        "desc": "Retrieves the details for a given user.\n\nThe returned information includes the user's bibliographic information and the date the user was registered.\n\nAdditionally, relationships to the list of institutions with which the user is affiliated, and to the list of nodes which the user contributes to (that the requesting user has permission to see) are returned.\n\nIf `me` is given as the `user_id` in the request path, the record of the currently logged-in user will be returned.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested user, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "users_read",
        "summary": "Retrieve a user",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user entity.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the user entity (`users`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The middle names of the user, used for bibliographic citations.",
                "location": "body",
                "name": "attributes.middle_names"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the user is an active user.",
                "location": "body",
                "name": "attributes.active"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The time at which the user registered their account, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_registered"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's locale, e.g. 'en_US'.",
                "location": "body",
                "name": "attributes.locale"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The given name of the user, used for bibliographic citations.",
                "location": "body",
                "name": "attributes.given_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's timezone, e.g. 'Etc/UTC'.",
                "location": "body",
                "name": "attributes.timezone"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The full name of the user, used for display on the OSF.",
                "location": "body",
                "name": "attributes.full_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The family name of the user, used for bibliographic citations.",
                "location": "body",
                "name": "attributes.family_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The suffix of the user, used for bibliographic citations.",
                "location": "body",
                "name": "attributes.suffix"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/",
        "desc": "Updates a user by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nUsers can be updated with either a **PUT** or **PATCH** request. The `full_name` field is mandatory in a **PUT** request, and optional in a **PATCH**.\n\n**Note**: if you make a PUT/PATCH request to the `/users/me/` endpoint, you must still provide your full user ID in the ID field of the request. We do not support using the `me` alias in request bodies at this time.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "users_partial_update",
        "summary": "Update a user",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/addons/",
        "desc": "A paginated list of authorized user addons\n\n#### Permissions\n\nUser addons are visible only to the user that authorized the addon.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nAttempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.",
        "operation_id": "users_addons_list",
        "summary": "List all user addons",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of addons of a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the addon provider.",
                "location": "path",
                "name": "provider"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/addons/{provider}/",
        "desc": "Retrieves the details of an authorized user addon\n\n#### Permissions\n\nUser addons are visible only to the user that authorized the addon.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested user addon, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nAttempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.",
        "operation_id": "users_addons_read",
        "summary": "Retrieve a user addon",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a user addons with user id being << user_id >> for provider being << provider >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the addon provider.",
                "location": "path",
                "name": "provider"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/addons/{provider}/accounts/",
        "desc": "A paginated list of addon accounts authorized by this user.\n\n#### Permissions\n\nAddon accounts are visible only to the user that authorized the account.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of at most 10 addon account objects. Each resource in the array is a separate  addon account object and contains the full representation of the addon account.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "Users_addon_accounts_list",
        "summary": "List all addon accounts",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of addon accounts for provider being << provider >> and user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the addon provider.",
                "location": "path",
                "name": "provider"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the addon account.",
                "location": "path",
                "name": "account_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/addons/{provider}/accounts/{account_id}/",
        "desc": "Retrieves the details of an addon account\n\n#### Permissions\n\nAddon accounts are visible only to the user that authorized the account.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested addon account, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "Users_addon_accounts_read",
        "summary": "Retrieve an addon account",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get  an addon account with account id being << account_id >> for provider being << provider >> and user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of a user's external identity.",
                "location": "path",
                "name": "identities_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/users/{user_id}/identities/{identities_id}/",
        "desc": "Deletes  the specified external identity.\n#### Permissions\nExternal identities may only be deleted by the user they belong to.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an errors key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": null,
        "summary": "Remove a external identity",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "delete a identity with identities id being << identities_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of a user's external identity.",
                "location": "path",
                "name": "identities_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/identities/{identities_id}/",
        "desc": "Retrieves the specified external identity, e.g. ORCID.\n#### Permissions\nExternal identities may only be viewed by the user they belong to.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested external identities, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": null,
        "summary": "Retrieve a external identity",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a identity with identities id being << identities_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/institutions/",
        "desc": "A paginated list of institutions that the user is affiliated with.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 institutions. Each resource in the array is a complete institution object and contains the full representation of the institution, meaning additional requests to a institution's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "operation_id": "users_institutions_list",
        "summary": "List all institutions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of institutions of a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/nodes/",
        "desc": "A paginated list of nodes that the user is a contributor to. The returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.\n\nIf the user ID in the path is the same as the logged-in user, all nodes will be returned. Otherwise, only the user's public nodes will be returned.\n\nUser registrations are not available at this endpoint.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/nodes/?filter[title]=open.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "users_nodes_list",
        "summary": "List all nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of nodes of a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/preprints/",
        "desc": "A paginated list of preprints that the user contributes to. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a complete preprint object and contains the full representation of the preprint, meaning additional requests to a preprint's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/preprints/?filter[provider]=psyarxiv.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "users_preprints_list",
        "summary": "List all preprints",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of pre prints of a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/registrations/",
        "desc": "A paginated list of registrations that the user is a contributor to. The returned registrations are sorted by their `date_modified`, with the most recently updated registrations appearing first.\n\nIf the user ID in the path is the same as the logged-in user, all registrations will be returned. Otherwise, only the user's public registrations will be returned.\n\nUser nodes are not available at this endpoint.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/registrations/?filter[title]=replication.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.\n\nYou can learn more about advanced filtering features [here](#tag/Filtering).",
        "operation_id": "users_registrations_list",
        "summary": "List all registrations",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of registrations of a user with user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the user.",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/users/{user_id}/settings/identities/",
        "desc": "Retrieves a list of a user's external identities.\n#### Permissions\nExternal identities may only be viewed by the user they belong to.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested external identities, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "external_identities_list",
        "summary": "List all external identities",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of identities for user id being << user_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the view only link.",
                "location": "path",
                "name": "link_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/view_only_links/{link_id}/",
        "desc": "Retrieves details about a specific view only link.\n\n#### Permissions\n\nOnly project administrators may retrieve the details of a view only link. Attempting to retrieve a view only link without appropriate permissions will result in a 403 Forbidden response.\n\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "view_only_links_read",
        "summary": "Retrieve a view only link",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a view only link for link id being << link_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the view only link.",
                "location": "path",
                "name": "link_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/view_only_links/{link_id}/nodes/",
        "desc": "The list of nodes which this view only link gives read-only access to.\n\n#### Permissions\n\nOnly project administrators may retrieve the nodes of a view only link. Attempting to retrieve a view only link without appropriate permissions will result in a 403 Forbidden response.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "view_only_links_node_list",
        "summary": "List all nodes",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of nodes for link id being << link_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            }
        ],
        "response_desc": "",
        "url": "/v2/wikis/{wiki_id}/",
        "desc": "\nPermanently deletes a wiki page. This action cannot be undone.\n\nNote: the \"Home\" wiki page cannot be deleted.\n\nOnly contributors with write permissions may delete a wiki page. Attempting to delete a wiki for which you do not have write permission will result in a **403 Forbidden** response.\n\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "wiki_delete",
        "summary": "Delete a wiki",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "delete a wiki with wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/wikis/{wiki_id}/",
        "desc": "Retrieves the details of a given wiki page.\n\nThe wiki is a collection of markdown text pages that can be used to further describe or document a project.\n\nReturns a JSON object with a `data` key containing the representation of the requested wiki page, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "wiki_read",
        "summary": "Retrieve a wiki",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a wiki with wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            },
            {
                "example": null,
                "type": "wikis",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "example.data"
            },
            {
                "example": "{\"data\": {\"id\": \"{wiki_id}\", \"type\": \"wikis\", \"attributes\": {\"name\": \"Examination of non-newtonian fluids\"}}}",
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "body"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/wikis/{wiki_id}/",
        "desc": "Renames the given wiki page.\n\nNote: the \"Home\" wiki page may not be renamed.\n\nOnly write contributors may rename wiki pages. Attempting to rename a wiki page for which you do not have write access will result in a **403 Forbidden** response.\n\nReturns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "wiki_partial_update",
        "summary": "Rename a wiki",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "update a wiki with wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/wikis/{wiki_id}/content/",
        "desc": "Retrieves the plaintext content of a wiki in markdown format.\n\nReturns `text/markdown` of the wiki content itself.\n\nIf the request is unsuccessful, plaintext with the error message will be displayed.",
        "operation_id": "wiki_content",
        "summary": "Retrieve the content of a wiki",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the content of a wiki for wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/wikis/{wiki_id}/versions/",
        "desc": "Lists all versions of a wiki.\n\nThe wiki is a collection of markdown text pages that can be used to describe the project or dataset contained in the attached node.  Every time the content of a wiki page is updated, a new version is created.\n\nReturns a JSON object with a `data` key containing the representation of the requested wiki, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#Introduction_error_codes) to understand why this request may have failed.",
        "operation_id": "wiki_versions_list",
        "summary": "List all wiki versions",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get the list of versions of a wiki with wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The wiki version.",
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type identifier of the wiki version (`wiki-versions`).",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Size of the wiki version.",
                "location": "body",
                "name": "attributes.size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date and time at which the wiki version was saved, as an iso8601 formatted timestamp.",
                "location": "body",
                "name": "attributes.date_created"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Content type of the wiki version (`text/markdown`).",
                "location": "body",
                "name": "attributes.content_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the associated wiki.",
                "location": "body",
                "name": "relationships.wiki_page"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A relationship to the user associated with this wiki version.",
                "location": "body",
                "name": "relationships.user"
            }
        ],
        "response_desc": "",
        "url": "/v2/wikis/{wiki_id}/versions/",
        "desc": "Updates the content of the given wiki page by creating a new wiki version.\n\n`content` is the only required field when updating a wiki page.\n\nReturns a JSON object with a `data` key containing the representation of the created wiki version, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "operation_id": "wiki_versions_create",
        "summary": "Update a wiki",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "create a new version for a wiki with wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki version",
                "location": "path",
                "name": "version_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/wikis/{wiki_id}/versions/{version_id}/",
        "desc": "A wiki is a collection of markdown text pages that can be used to describe the project or dataset contained in the attached node.  Every time the content of a wiki is updated, a new version is created.\n\nReturns a JSON object with a `data` key containing the representation of the requested wiki, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#Introduction_error_codes) to understand why this request may have failed.",
        "operation_id": "wiki_version_detail",
        "summary": "Retrieve a wiki version",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "get a version with version id being << version_id >> for a wiki with wiki id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki.",
                "location": "path",
                "name": "wiki_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the wiki version.",
                "location": "path",
                "name": "version_id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/wikis/{wiki_id}/versions/{version_id}/content/",
        "desc": "Retrieves the plaintext content of a specific wiki version in markdown format.\n\nReturns `text/markdown` of the wiki content itself.\n\nIf the request is unsuccessful, plaintext with the error message will be displayed.",
        "operation_id": "wiki_version_content",
        "summary": "Retrieve the content of a wiki version",
        "api": "osf.io__2.0.yaml",
        "canonical_expr": "versions a version with version id being << version_id >> for a wiki with version id being << wiki_id >>",
        "base_path": "/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "accessTokens"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/access-tokens/{accessTokens}",
        "desc": "Reads the properties for a set of access tokens.\n \n{accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of access tokens for access tokens being << accessTokens >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "accessTokens"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/access-tokens/{accessTokens}/invalidate",
        "desc": "Immediately expires the access tokens passed. This method is meant to allow an application to discard any active access tokens it no longer needs.\n \n{accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "invalidate the access tokens with access tokens being << accessTokens >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/answers",
        "desc": "Returns all the undeleted answers in the system.\n \nThe sorts accepted by this method operate on the follow fields of the answer object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of answers",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/answers/{ids}",
        "desc": "Gets the set of answers identified by ids.\n \nThis is meant for batch fetcing of questions. A useful trick to poll for updates is to sort by activity, with a minimum date of the last time you polled.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for answer_id on answer objects.\n \nThe sorts accepted by this method operate on the follow fields of the answer object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of answers with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/answers/{ids}/comments",
        "desc": "Gets the comments on a set of answers.\n \nIf you know that you have an answer id and need the comments, use this method. If you know you have a question id, use /questions/{id}/comments. If you are unsure, use /posts/{id}/comments.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for answer_id on answer objects.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get a comment on a set of answers with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "accessTokens"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/apps/{accessTokens}/de-authenticate",
        "desc": "Passing valid access_tokens to this method causes the application that created them to be de-authorized by the user associated with each access_token. This will remove the application from their apps tab, and cause all other existing access_tokens to be destroyed.\n \nThis method is meant for uninstalling applications, recovering from access_token leaks, or simply as a stronger form of /access-tokens/{accessTokens}/invalidate.\n \nNothing prevents a user from re-authenticate to an application that has de-authenticated itself, the user will be prompted to approve the application again however.\n \n{accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "de authenticate apps with access tokens being access tokens",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/badges",
        "desc": "Returns all the badges in the system.\n \nBadge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.\n \nThis means that you can get a list of all tag based badges by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.\n \nFor ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.\n \nrank is the default sort.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of badges",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/badges/name",
        "desc": "Gets all explicitly named badges in the system.\n \nA named badged stands in opposition to a tag-based badge. These are referred to as general badges on the sites themselves.\n \nFor the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.\n \nrank is the default sort.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of named badges",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/badges/recipients",
        "desc": "Returns recently awarded badges in the system.\n \nAs these badges have been awarded, they will have the badge.user property set.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of recently badge recipients",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/badges/tags",
        "desc": "Returns the badges that are awarded for participation in specific tags.\n \nFor the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.\n \nrank is the default sort.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of badges that are awarded for participation in specific tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/badges/{ids}",
        "desc": "Gets the badges identified in id.\n \nNote that badge ids are not constant across sites, and thus should be looked up via the /badges method. A badge id on a single site is, however, guaranteed to be stable.\n \nBadge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.\n \nThis means that you can get a list of all tag based badges by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.\n \nFor ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.\n \nrank is the default sort.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for badge_id on badge objects.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of badges with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/badges/{ids}/recipients",
        "desc": "Returns recently awarded badges in the system, constrained to a certain set of badges.\n \nAs these badges have been awarded, they will have the badge.user property set.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for badge_id on badge objects.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get recently awarded badges constrained to badges with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/comments",
        "desc": "Gets all the comments on the site.\n \nIf you're filtering for interesting comments (by score, creation date, etc.) make use of the sort paramter with appropriate min and max values.\n \nIf you're looking to query conversations between users, instead use the /users/{ids}/mentioned and /users/{ids}/comments/{toid} methods.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of comments",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/comments/{ids}",
        "desc": "Gets the comments identified in id.\n \nThis method is most useful if you have a cache of comment ids obtained through other means (such as /questions/{id}/comments) but suspect the data may be stale.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for comment_id on comment objects.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get comments with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "preview"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/comments/{id}/delete",
        "desc": "Deletes a comment.\n \nUse an access_token with write_access to delete a comment.\n \nIn practice, this method will never return an object.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "delete a comment with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "body"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "preview"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/comments/{id}/edit",
        "desc": "Edit an existing comment.\n \nUse an access_token with write_access to edit an existing comment.\n \nThis method return the created comment.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "edit a comment with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/errors",
        "desc": "Returns the various error codes that can be produced by the API.\n \nThis method is provided for discovery, documentation, and testing purposes, it is not expected many applications will consume it during normal operation.\n \nFor testing purposes, look into the /errors/{id} method which simulates errors given a code.\n \nThis method returns a list of errors.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of error codes",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/errors/{id}",
        "desc": "This method allows you to generate an error.\n \nThis method is only intended for use when testing an application or library. Unlike other methods in the API, its contract is not frozen, and new error codes may be added at any time.\n \nThis method results in an error, which will be expressed with a 400 HTTP status code and setting the error* properties on the wrapper object.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get an error with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "since"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/events",
        "desc": "Returns a stream of events that have occurred on the site.\n \nThe API considers the following \"events\":\n - posting a question\n - posting an answer\n - posting a comment\n - editing a post\n - creating a user\n  \n \nEvents are only accessible for 15 minutes after they occurred, and by default only events in the last 5 minutes are returned. You can specify the age of the oldest event returned by setting the since parameter.\n \nIt is advised that developers batch events by ids and make as few subsequent requests to other methods as possible.\n \nThis method returns a list of events.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of events",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "include"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "exclude"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "unsafe"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "base"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/filters/create",
        "desc": "Creates a new filter given a list of includes, excludes, a base filter, and whether or not this filter should be \"unsafe\".\n \nFilter \"safety\" is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.\n \nIf no base filter is specified, the default filter is assumed. When building a filter from scratch, the none built-in filter is useful.\n \nWhen the size of the parameters being sent to this method grows to large, problems can occur. This method will accept POST requests to mitigate this.\n \nIt is not expected that many applications will call this method at runtime, filters should be pre-calculated and \"baked in\" in the common cases. Furthermore, there are a number of built-in filters which cover common use cases.\n \nThis method returns a single filter.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "create a filter",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "filters"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/filters/{filters}",
        "desc": "Returns the fields included by the given filters, and the \"safeness\" of those filters.\n \nIt is not expected that this method will be consumed by many applications at runtime, it is provided to aid in debugging.\n \n{filters} can contain up to 20 semicolon delimited filters. Filters are obtained via calls to /filters/create, or by using a built-in filter.\n \nThis method returns a list of filters.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of filters for filters being << filters >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/inbox",
        "desc": "Returns a user's inbox.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of inbox items.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get a my inbox",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "since"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/inbox/unread",
        "desc": "Returns the unread items in a user's inbox.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of inbox items.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unread messages",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/info",
        "desc": "Returns a collection of statistics about the site.\n \nData to facilitate per-site customization, discover related sites, and aggregate statistics is all returned by this method.\n \nThis data is cached very aggressively, by design. Query sparingly, ideally no more than once an hour.\n \nThis method returns an info object.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get a collection of statistics about the site",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me",
        "desc": "Returns the user associated with the passed access_token.\n \nThis method returns a user.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get my information",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/answers",
        "desc": "Returns the answers owned by the user associated with the given access_token.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my answers",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/associated",
        "desc": "Returns all of a user's associated accounts, given an access_token for them.\n \nThis method returns a list of network users.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my associated accounts",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/badges",
        "desc": "Returns the badges earned by the user associated with the given access_token.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my badges",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/comments",
        "desc": "Returns the comments owned by the user associated with the given access_token.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my comments",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "toId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/comments/{toId}",
        "desc": "Returns the comments owned by the user associated with the given access_token that are in reply to the user identified by {toId}.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my comments on a user with id being << toId >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = added => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = added => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/favorites",
        "desc": "Returns the questions favorites by the user associated with the given access_token.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my favorites questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/inbox",
        "desc": "Returns the user identified by access_token's inbox.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of inbox items.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get my inbox",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "since"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/inbox/unread",
        "desc": "Returns the unread items in the user identified by access_token's inbox.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of inbox items.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unread messages in inbox",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/mentioned",
        "desc": "Returns the comments mentioning the user associated with the given access_token.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of the comments i am mentioned in",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/merges",
        "desc": "Returns a record of merges that have occurred involving a user identified by an access_token.\n \nThis method allows you to take now invalid account ids and find what account they've become, or take currently valid account ids and find which ids were equivalent in the past.\n \nThis is most useful when confirming that an account_id is in fact \"new\" to an application.\n \nAccount merges can happen for a wide range of reasons, applications should not make assumptions that merges have particular causes.\n \nNote that accounts are managed at a network level, users on a site may be merged due to an account level merge but there is no guarantee that a merge has an effect on any particular site.\n \nThis method returns a list of account_merge.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of merges involving me",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/notifications",
        "desc": "Returns a user's notifications, given an access_token.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of notifications.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my notifications",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/notifications/unread",
        "desc": "Returns a user's unread notifications, given an access_token.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of notifications.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my unread notifications",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/privileges",
        "desc": "Returns the privileges the user identified by access_token has.\n \nThis method returns a list of privileges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my privileges",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/questions",
        "desc": "Returns the questions owned by the user associated with the given access_token.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/questions/featured",
        "desc": "Returns the questions that have active bounties offered by the user associated with the given access_token.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of featured questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/questions/no-answers",
        "desc": "Returns the questions owned by the user associated with the given access_token that have no answers.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my no answers questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/questions/unaccepted",
        "desc": "Returns the questions owned by the user associated with the given access_token that have no accepted answer.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my unaccepted questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/questions/unanswered",
        "desc": "Returns the questions owned by the user associated with the given access_token that are not considered answered.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my unanswered questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/reputation",
        "desc": "Returns the reputation changed for the user associated with the given access_token.\n \nThis method returns a list of reputation changes.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get my reputation",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/reputation-history",
        "desc": "Returns user's public reputation history.\n \nThis method returns a list of reputation_history.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get my reputation history",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/reputation-history/full",
        "desc": "Returns user's full reputation history, including private events.\n \n This method requires an access_token, with a scope containing \"private_info\".\n \nThis method returns a list of reputation_history.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get my full reputation history",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/suggested-edits",
        "desc": "Returns the suggested edits the user identified by access_token has submitted.\n \nThis method returns a list of suggested-edits.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my suggested edits",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/tags",
        "desc": "Returns the tags the user identified by the access_token passed is active in.\n \nThis method returns a list of tags.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/tags/{tags}/top-answers",
        "desc": "Returns the top 30 answers the user associated with the given access_token has posted in response to questions with the given tags.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top answers for tags with tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = hot => none---sort = week => none---sort = month => none---sort = relevance => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = hot => none---sort = week => none---sort = month => none---sort = relevance => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/tags/{tags}/top-questions",
        "desc": "Returns the top 30 questions the user associated with the given access_token has posted in response to questions with the given tags.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top questions for tags with tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/timeline",
        "desc": "Returns a subset of the actions the user identified by the passed access_token has taken on the site.\n \nThis method returns a list of user timeline objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get my actions' timeline",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/top-answer-tags",
        "desc": "Returns the user identified by access_token's top 30 tags by answer score.\n \nThis method returns a list of top tag objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my top answer tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/top-question-tags",
        "desc": "Returns the user identified by access_token's top 30 tags by question score.\n \nThis method returns a list of top tag objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my top question tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/me/write-permissions",
        "desc": "Returns the write permissions a user has via the api, given an access token.\n \nThe Stack Exchange API gives users the ability to create, edit, and delete certain types. This method returns whether the passed user is capable of performing those actions at all, as well as how many times a day they can.\n \nThis method does not consider the user's current quota (ie. if they've already exhausted it for today) nor any additional restrictions on write access, such as editing deleted comments.\n \nThis method returns a list of write_permissions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of my write permissions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/notifications",
        "desc": "Returns a user's notifications.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of notifications.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of notifications",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/notifications/unread",
        "desc": "Returns a user's unread notifications.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of notifications.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unread notifications",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/posts",
        "desc": "Fetches all posts (questions and answers) on the site.\n \nIn many ways this method is the union of /questions and /answers, returning both sets of data albeit only the common fields.\n \nMost applications should use the question or answer specific methods, but /posts is available for those rare cases where any activity is of intereset. Examples of such queries would be: \"all posts on Jan. 1st 2011\" or \"top 10 posts by score of all time\".\n \nThe sorts accepted by this method operate on the follow fields of the post object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of posts.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of posts",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/posts/{ids}",
        "desc": "Fetches a set of posts by ids.\n \nThis method is meant for grabbing an object when unsure whether an id identifies a question or an answer. This is most common with user entered data.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.\n \nThe sorts accepted by this method operate on the follow fields of the post object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of posts.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of posts by ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/posts/{ids}/comments",
        "desc": "Gets the comments on the posts identified in ids, regardless of the type of the posts.\n \nThis method is meant for cases when you are unsure of the type of the post id provided. Generally, this would be due to obtaining the post id directly from a user.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of comments for posts by ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/posts/{ids}/revisions",
        "desc": "Returns edit revisions for the posts identified in ids.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.\n \nThis method returns a list of revisions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of revisions for posts by ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/posts/{ids}/suggested-edits",
        "desc": "Returns suggsted edits on the posts identified in ids.\n \n - creation - creation_date\n - approval - approval_date\n - rejection - rejection_date\n  creation is the default sort.\n \n {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.\n \nThis method returns a list of suggested-edits.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of suggested edits for posts by ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "body"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "preview"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/posts/{id}/comments/add",
        "desc": "Create a new comment.\n \nUse an access_token with write_access to create a new comment on a post.\n \nThis method returns the created comment.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "add a comment for a post with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/privileges",
        "desc": "Returns the earnable privileges on a site.\n \nPrivileges define abilities a user can earn (via reputation) on any Stack Exchange site.\n \nWhile fairly stable, over time they do change. New ones are introduced with new features, and the reputation requirements change as a site matures.\n \nThis method returns a list of privileges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of privileges",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = hot => none---sort = week => none---sort = month => none---sort = relevance => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = hot => none---sort = week => none---sort = month => none---sort = relevance => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions",
        "desc": "Gets all the questions on the site.\n \nThis method allows you make fairly flexible queries across the entire corpus of questions on a site. For example, getting all questions asked in the the week of Jan 1st 2011 with scores of 10 or more is a single query with parameters sort=votes&min=10&fromdate=1293840000&todate=1294444800.\n \nTo constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - hot - by the formula ordering the hot tab Does not accept min or max\n - week - by the formula ordering the week tab Does not accept min or max\n - month - by the formula ordering the month tab Does not accept min or max\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/featured",
        "desc": "Returns all the questions with active bounties in the system.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of featured questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/no-answers",
        "desc": "Returns questions which have received no answers.\n \nCompare with /questions/unanswered which mearly returns questions that the sites consider insufficiently well answered.\n \nThis method corresponds roughly with the this site tab.\n \nTo constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of no answer questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/unanswered",
        "desc": "Returns questions the site considers to be unanswered.\n \nNote that just because a question has an answer, that does not mean it is considered answered. While the rules are subject to change, at this time a question must have at least one upvoted answer to be considered answered.\n \nTo constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.\n \nCompare with /questions/no-answers.\n \nThis method corresponds roughly with the unanswered tab.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unanswered questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/{ids}",
        "desc": "Returns the questions identified in {ids}.\n \nThis is most useful for fetching fresh data when maintaining a cache of question ids, or polling for changes.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/{ids}/answers",
        "desc": "Gets the answers to a set of questions identified in id.\n \nThis method is most useful if you have a set of interesting questions, and you wish to obtain all of their answers at once or if you are polling for new or updates answers (in conjunction with sort=activity).\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.\n \nThe sorts accepted by this method operate on the follow fields of the answer object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of answers for questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/{ids}/comments",
        "desc": "Gets the comments on a question.\n \nIf you know that you have an question id and need the comments, use this method. If you know you have a answer id, use /answers/{ids}/comments. If you are unsure, use /posts/{ids}/comments.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of comments for questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = rank => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = rank => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/{ids}/linked",
        "desc": "Gets questions which link to those questions identified in {ids}.\n \nThis method only considers questions that are linked within a site, and will never return questions from another Stack Exchange site.\n \nA question is considered \"linked\" when it explicitly includes a hyperlink to another question, there are no other heuristics.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - rank - a priority sort by site applies, subject to change at any time Does not accept min or max\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of linked questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = rank => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = rank => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/{ids}/related",
        "desc": "Returns questions that the site considers related to those identified in {ids}.\n \nThe algorithm for determining if questions are related is not documented, and subject to change at any time. Futhermore, these values are very heavily cached, and may not update immediately after a question has been editted. It is also not guaranteed that a question will be considered related to any number (even non-zero) of questions, and a consumer should be able to handle a variable number of returned questions.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - rank - a priority sort by site applies, subject to change at any time Does not accept min or max\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of related questions for questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/questions/{ids}/timeline",
        "desc": "Returns a subset of the events that have happened to the questions identified in id.\n \nThis provides data similar to that found on a question's timeline page.\n \nVoting data is scrubbed to deter inferencing of voter identity.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.\n \nThis method returns a list of question timeline events.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of events of the questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Guid list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/revisions/{ids}",
        "desc": "Returns edit revisions identified by ids in {ids}.\n \n{ids} can contain up to 20 semicolon delimited ids, to find ids programatically look for revision_guid on revision objects. Note that unlike most other id types in the API, revision_guid is a string.\n \nThis method returns a list of revisions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of the revisions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = relevance => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "intitle"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "nottagged"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = relevance => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/search",
        "desc": "Searches a site for any questions which fit the given criteria.\n \nThis method is intentionally quite limited. For more general searching, you should use a proper internet search engine restricted to the domain of the site in question.\n \nAt least one of tagged or intitle must be set on this method. nottagged is only used if tagged is also set, for performance reasons.\n \ntagged and nottagged are semi-colon delimited list of tags. At least 1 tag in tagged will be on each returned question if it is passed, making it the OR equivalent of the AND version of tagged on /questions.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - relevance - matches the relevance tab on the site itself Does not accept min or max\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "search",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = relevance => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "url"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "accepted"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "body"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "closed"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "q"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "notice"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "views"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "nottagged"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "wiki"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "user"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "title"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "answers"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "migrated"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = relevance => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/search/advanced",
        "desc": "Searches a site for any questions which fit the given criteria.\n \nSearch criteria are expressed using the following parameters:\n  - q - a free form text parameter, will match all question properties based on an undocumented algorithm.\n - accepted - true to return only questions with accepted answers, false to return only those without. Omit to elide constraint.\n - answers - the minimum number of answers returned questions must have.\n - body - text which must appear in returned questions' bodies.\n - closed - true to return only closed questions, false to return only open ones. Omit to elide constraint.\n - migrated - true to return only questions migrated away from a site, false to return only those not. Omit to elide constraint.\n - notice - true to return only questions with post notices, false to return only those without. Omit to elide constraint.\n - nottagged - a semicolon delimited list of tags, none of which will be present on returned questions.\n - tagged - a semicolon delimited list of tags, of which at least one will be present on all returned questions.\n - title - text which must appear in returned questions' titles.\n - user - the id of the user who must own the questions returned.\n - url - a url which must be contained in a post, may include a wildcard.\n - views - the minimum number of views returned questions must have.\n - wiki - true to return only community wiki questions, false to return only non-community wiki ones. Omit to elide constraint.\n  \nAt least one additional parameter must be set if nottagged is set, for performance reasons.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - relevance - matches the relevance tab on the site itself Does not accept min or max\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "search",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = relevance => none---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "title"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "nottagged"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "query",
                "name": "tagged"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = relevance => none---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/similar",
        "desc": "Returns questions which are similar to a hypothetical one based on a title and tag combination.\n \nThis method is roughly equivalent to a site's related questions suggestion on the ask page.\n \nThis method is useful for correlating data outside of a Stack Exchange site with similar content within one.\n \nNote that title must always be passed as a parameter. tagged and nottagged are optional, semi-colon delimited lists of tags.\n \nIf tagged is passed it is treated as a preference, there is no guarantee that questions returned will have any of those tags. nottagged is treated as a requirement, no questions will be returned with those tags.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - relevance - order by \"how similar\" the questions are, most likely candidate first with a descending order Does not accept min or max\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of similar questions",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/sites",
        "desc": "Returns all sites in the network.\n \nThis method allows for discovery of new sites, and changes to existing ones. Be aware that unlike normal API methods, this method should be fetched very infrequently, it is very unusual for these values to change more than once on any given day. It is suggested that you cache its return for at least one day, unless your app encounters evidence that it has changed (such as from the /info method).\n \nThe pagesize parameter for this method is unbounded, in acknowledgement that for many applications repeatedly fetching from /sites would complicate start-up tasks needlessly.\n \nThis method returns a list of sites.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of sites",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/suggested-edits",
        "desc": "Returns all the suggested edits in the systems.\n \nThis method returns a list of suggested-edits.\n \nThe sorts accepted by this method operate on the follow fields of the suggested_edit object:\n - creation - creation_date\n - approval - approval_date Does not return unapproved suggested_edits\n - rejection - rejection_date Does not return unrejected suggested_edits\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of the suggested edits",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/suggested-edits/{ids}",
        "desc": "Returns suggested edits identified in ids.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.\n \nThe sorts accepted by this method operate on the follow fields of the suggested_edit object:\n - creation - creation_date\n - approval - approval_date Does not return unapproved suggested_edits\n - rejection - rejection_date Does not return unrejected suggested_edits\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of suggested-edits.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of suggested edits with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags",
        "desc": "Returns the tags found on a site.\n \nThe inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both \"download\" and \"owner\" amongst others.\n \nThis method returns a list of tags.\n \nThe sorts accepted by this method operate on the follow fields of the tag object:\n - popular - count\n - activity - the creation_date of the last question asked with the tag\n - name - name\n  popular is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/moderator-only",
        "desc": "Returns the tags found on a site that only moderators can use.\n \nThe inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both \"download\" and \"owner\" amongst others.\n \nThis method returns a list of tags.\n \nThe sorts accepted by this method operate on the follow fields of the tag object:\n - popular - count\n - activity - the creation_date of the last question asked with the tag\n - name - name\n  popular is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of moderator only tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/required",
        "desc": "Returns the tags found on a site that fulfill required tag constraints on questions.\n \nThe inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both \"download\" and \"owner\" amongst others.\n \nThis method returns a list of tags.\n \nThe sorts accepted by this method operate on the follow fields of the tag object:\n - popular - count\n - activity - the creation_date of the last question asked with the tag\n - name - name\n  popular is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of required tags",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = applied => number---sort = activity => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = applied => number---sort = activity => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/synonyms",
        "desc": "Returns all tag synonyms found a site.\n \nWhen searching for synonyms of specific tags, it is better to use /tags/{tags}/synonyms over this method.\n \nThe sorts accepted by this method operate on the follow fields of the tag_synonym object:\n - creation - creation_date\n - applied - applied_count\n - activity - last_applied_date\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of tag_synonyms.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of tag synonyms",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tags}/faq",
        "desc": "Returns the frequently asked questions for the given set of tags in {tags}.\n \nFor a question to be returned, it must have all the tags in {tags} and be considered \"frequently asked\". The exact algorithm for determining whether a question is considered a FAQ is subject to change at any time.\n \n{tags} can contain up to 5 individual tags per request.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the faq for tags with tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tags}/info",
        "desc": "Returns tag objects representing the tags in {tags} found on the site.\n \nThis method diverges from the standard naming patterns to avoid to conflicting with existing methods, due to the free form nature of tag names.\n \nThis method returns a list of tags.\n \nThe sorts accepted by this method operate on the follow fields of the tag object:\n - popular - count\n - activity - the creation_date of the last question asked with the tag\n - name - name\n  popular is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get info of tags with tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tags}/related",
        "desc": "Returns the tags that are most related to those in {tags}.\n \nIncluding multiple tags in {tags} is equivalent to asking for \"tags related to tag #1 and tag #2\" not \"tags related to tag #1 or tag #2\".\n \ncount on tag objects returned is the number of question with that tag that also share all those in {tags}.\n \n{tags} can contain up to 4 individual tags per request.\n \nThis method returns a list of tags.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of related tags for tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = applied => number---sort = activity => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = applied => number---sort = activity => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tags}/synonyms",
        "desc": "Gets all the synonyms that point to the tags identified in {tags}. If you're looking to discover all the tag synonyms on a site, use the /tags/synonyms methods instead of call this method on all tags.\n \n{tags} can contain up to 20 individual tags per request.\n \nThe sorts accepted by this method operate on the follow fields of the tag_synonym object:\n - creation - creation_date\n - applied - applied_count\n - activity - last_applied_date\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of tag synonyms.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of synonyms for tags with tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tags}/wikis",
        "desc": "Returns the wikis that go with the given set of tags in {tags}.\n \nBe aware that not all tags have wikis.\n \n{tags} can contain up to 20 individual tags per request.\n \nThis method returns a list of tag wikis.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of wikis for tags in tags being << tags >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "period"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "tag"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tag}/top-answerers/{period}",
        "desc": "Returns the top 30 answerers active in a single tag, of either all-time or the last 30 days.\n \nThis is a view onto the data presented on the tag info page on the sites.\n \nThis method returns a list of tag score objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top answers for tags being << tag >> and period being << period >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "period"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "tag"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/tags/{tag}/top-askers/{period}",
        "desc": "Returns the top 30 askers active in a single tag, of either all-time or the last 30 days.\n \nThis is a view onto the data presented on the tag info page on the sites.\n \nThis method returns a list of tag score objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top askers for tags being << tag >> and period being << period >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "inname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users",
        "desc": "Returns all users on a site.\n \nThis method returns a list of users.\n \nThe sorts accepted by this method operate on the follow fields of the user object:\n - reputation - reputation\n - creation - creation_date\n - name - display_name\n - modified - last_modified_date\n  reputation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThe inname parameter lets consumers filter the results down to just those users with a certain substring in their display name. For example, inname=kevin will return all users with both users named simply \"Kevin\" or those with Kevin as one of (or part of) their names; such as \"Kevin Montrose\".\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of users",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/moderators",
        "desc": "Gets those users on a site who can exercise moderation powers.\n \nNote, employees of Stack Exchange Inc. will be returned if they have been granted moderation powers on a site even if they have never been appointed or elected explicitly. This method checks abilities, not the manner in which they were obtained.\n \nThe sorts accepted by this method operate on the follow fields of the user object:\n - reputation - reputation\n - creation - creation_date\n - name - display_name\n - modified - last_modified_date\n  reputation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of users.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of moderator users",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/moderators/elected",
        "desc": "Returns those users on a site who both have moderator powers, and were actually elected.\n \nThis method excludes Stack Exchange Inc. employees, unless they were actually elected moderators on a site (which can only have happened prior to their employment).\n \nThe sorts accepted by this method operate on the follow fields of the user object:\n - reputation - reputation\n - creation - creation_date\n - name - display_name\n - modified - last_modified_date\n  reputation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of users.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of elected moderator users",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = reputation => number---sort = creation => date---sort = name => string---sort = modified => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}",
        "desc": "Gets the users identified in ids in {ids}.\n \nTypically this method will be called to fetch user profiles when you have obtained user ids from some other source, such as /questions.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the user object:\n - reputation - reputation\n - creation - creation_date\n - name - display_name\n - modified - last_modified_date\n  reputation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of users.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/answers",
        "desc": "Returns the answers the users in {ids} have posted.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the answer object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of answers for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/associated",
        "desc": "Returns all of a user's associated accounts, given their account_ids in {ids}.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for account_id on user objects.\n \nThis method returns a list of network_users.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of users' associated accounts with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---sort = awarded => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = rank => string---sort = name => string---sort = type => string---sort = awarded => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/badges",
        "desc": "Get the badges the users in {ids} have earned.\n \nBadge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.\n \nThis means that you can get a list of all tag based badges a user has by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.\n \nFor ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.\n \nrank is the default sort.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of badges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of badges for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/comments",
        "desc": "Get the comments posted by users in {ids}.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of comments for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "toid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/comments/{toid}",
        "desc": "Get the comments that the users in {ids} have posted in reply to the single user identified in {toid}.\n \nThis method is useful for extracting conversations, especially over time or across multiple posts.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects. {toid} can contain only 1 id, found in the same manner as those in {ids}.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of comments for users with ids being << ids >> in reply to the single user with id being << toid >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = added => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---sort = added => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/favorites",
        "desc": "Get the questions that users in {ids} have favorited.\n \nThis method is effectively a view onto a user's favorites tab.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n - added - when the user favorited the question\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of favorites for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/mentioned",
        "desc": "Gets all the comments that the users in {ids} were mentioned in.\n \nNote, to count as a mention the comment must be considered to be \"in reply to\" a user. Most importantly, this means that a comment can only be in reply to a single user.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the comment object:\n - creation - creation_date\n - votes - score\n  It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of comments.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of comments that the users with ids being << ids >> has been mentioned in",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/merges",
        "desc": "Returns a record of merges that have occurred involving the passed account ids.\n \nThis method allows you to take now invalid account ids and find what account they've become, or take currently valid account ids and find which ids were equivalent in the past.\n \nThis is most useful when confirming that an account_id is in fact \"new\" to an application.\n \nAccount merges can happen for a wide range of reasons, applications should not make assumptions that merges have particular causes.\n \nNote that accounts are managed at a network level, users on a site may be merged due to an account level merge but there is no guarantee that a merge has an effect on any particular site.\n \nThis method returns a list of account_merge.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of merges by users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/questions",
        "desc": "Gets the questions asked by the users in {ids}.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of users questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/questions/featured",
        "desc": "Gets the questions on which the users in {ids} have active bounties.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of featured users questions with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/questions/no-answers",
        "desc": "Gets the questions asked by the users in {ids} which have no answers.\n \nQuestions returns by this method actually have zero undeleted answers. It is completely disjoint /users/{ids}/questions/unanswered and /users/{ids}/questions/unaccepted, which only return questions with at least one answer, subject to other contraints.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of no answer questions for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/questions/unaccepted",
        "desc": "Gets the questions asked by the users in {ids} which have at least one answer, but no accepted answer.\n \nQuestions returned by this method have answers, but the owner has not opted to accept any of them.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unaccepted questions for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/questions/unanswered",
        "desc": "Gets the questions asked by the users in {ids} which the site consideres unanswered, while still having at least one answer posted.\n \nThese rules are subject to change, but currently any question without at least one upvoted or accepted answer is considered unanswered.\n \nTo get the set of questions that a user probably considers unanswered, the returned questions should be unioned with those returned by /users/{id}/questions/no-answers. These methods are distinct so that truly unanswered (that is, zero posted answers) questions can be easily separated from mearly poorly or inadequately answered ones.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unanswered questions for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/reputation",
        "desc": "Gets a subset of the reputation changes for users in {ids}.\n \nReputation changes are intentionally scrubbed of some data to make it difficult to correlate votes on particular posts with user reputation changes. That being said, this method returns enough data for reasonable display of reputation trends.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of reputation objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of the reputation changes for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/reputation-history",
        "desc": "Returns users' public reputation history.\n \nThis method returns a list of reputation_history.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the users' reputation history with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = creation => date---sort = approval => date---sort = rejection => date---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/suggested-edits",
        "desc": "Returns the suggested edits a users in {ids} have submitted.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the suggested_edit object:\n - creation - creation_date\n - approval - approval_date Does not return unapproved suggested_edits\n - rejection - rejection_date Does not return unrejected suggested_edits\n  creation is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of suggested-edits.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of suggested edits for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = popular => number---sort = activity => date---sort = name => string---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/tags",
        "desc": "Returns the tags the users identified in {ids} have been active in.\n \nThis route corresponds roughly to user's stats tab, but does not include tag scores. A subset of tag scores are available (on a single user basis) in /users/{id}/top-answer-tags and /users/{id}/top-question-tags.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThe sorts accepted by this method operate on the follow fields of the tag object:\n - popular - count\n - activity - the creation_date of the last question asked with the tag\n - name - name\n  popular is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of tags.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of tags for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number list (semicolon delimited).",
                "location": "path",
                "name": "ids"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{ids}/timeline",
        "desc": "Returns a subset of the actions the users in {ids} have taken on the site.\n \nThis method returns users' posts, edits, and earned badges in the order they were accomplished. It is possible to filter to just a window of activity using the fromdate and todate parameters.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of user timeline objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of actions for users with ids being << ids >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/inbox",
        "desc": "Returns a user's inbox.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method is effectively an alias for /inbox. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole.\n \n{id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of inbox items.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the inbox of a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "since"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/inbox/unread",
        "desc": "Returns the unread items in a user's inbox.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method is effectively an alias for /inbox/unread. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole.\n \n{id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of inbox items.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unread messages for a user by id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/notifications",
        "desc": "Returns a user's notifications.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of notifications.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of notifications for a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/notifications/unread",
        "desc": "Returns a user's unread notifications.\n \nThis method requires an access_token, with a scope containing \"read_inbox\".\n \nThis method returns a list of notifications.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of unread notifications for a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/privileges",
        "desc": "Returns the privileges a user has.\n \nApplications are encouraged to calculate privileges themselves, without repeated queries to this method. A simple check against the results returned by /privileges and user.user_type would be sufficient.\n \n{id} can contain only a single, to find it programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of privileges.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of privileges for a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/reputation-history/full",
        "desc": "Returns a user's full reputation history, including private events.\n \nThis method requires an access_token, with a scope containing \"private_info\".\n \nThis method returns a list of reputation_history.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of reputation history a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/tags/{tags}/top-answers",
        "desc": "Returns the top 30 answers a user has posted in response to questions with the given tags.\n \n{id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.\n \nThe sorts accepted by this method operate on the follow fields of the answer object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of answers.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top answers for tags being << tags >> and a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "todate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "min"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unix date.",
                "location": "query",
                "name": "fromdate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "String list (semicolon delimited).",
                "location": "path",
                "name": "tags"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "sort"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort = activity => date---sort = creation => date---sort = votes => number---",
                "location": "query",
                "name": "max"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/tags/{tags}/top-questions",
        "desc": "Returns the top 30 questions a user has asked with the given tags.\n \n{id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.\n \nThe sorts accepted by this method operate on the follow fields of the question object:\n - activity - last_activity_date\n - creation - creation_date\n - votes - score\n  activity is the default sort.\n \n It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n \nThis method returns a list of questions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top questions for tags being << tags >> and the user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/top-answer-tags",
        "desc": "Returns a single user's top tags by answer score.\n \nThis a subset of the data returned on a user's tags tab.\n \n{id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of top_tag objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top answer tags for a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/top-question-tags",
        "desc": "Returns a single user's top tags by question score.\n \nThis a subset of the data returned on a user's tags tab.\n \n{id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.\n \nThis method returns a list of top_tag objects.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of top question tags for a user with id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "pagesize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "All API responses are JSON, we do support JSONP with the callback query parameter.---",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "#Discussion------The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.------An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.------Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.------The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).------#Safety------Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.------Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).------When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.------#Built In Filters------The following filters are built in:------default, each type documents which fields are returned under the default filter (for example, answers).---withbody, which is default plus the *.body fields---none, which is empty---total, which includes just .total------#Compatibility with V1.x------For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.---",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.---",
                "location": "query",
                "name": "site"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "OK",
        "url": "/2.0/users/{id}/write-permissions",
        "desc": "Returns the write permissions a user has via the api.\n \nThe Stack Exchange API gives users the ability to create, edit, and delete certain types. This method returns whether the passed user is capable of performing those actions at all, as well as how many times a day they can.\n \nThis method does not consider the user's current quota (ie. if they've already exhausted it for today) nor any additional restrictions on write access, such as editing deleted comments.\n \nThis method returns a list of write_permissions.\n",
        "operation_id": null,
        "summary": null,
        "api": "stackexchange.com__2.0.yaml",
        "canonical_expr": "get the list of write permissions for a user by id being << id >>",
        "base_path": "/2.0"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//",
        "desc": "",
        "operation_id": null,
        "summary": "Retrieve the version API",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the version API",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//accounts",
        "desc": "",
        "operation_id": null,
        "summary": "Get current user",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of accounts",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "",
        "url": "//accounts",
        "desc": "",
        "operation_id": null,
        "summary": "Create a new account with an application key",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "create a new account",
        "base_path": "/"
    },
    {
        "verb": "put",
        "params": [],
        "response_desc": "OK",
        "url": "//accounts",
        "desc": "",
        "operation_id": null,
        "summary": "Update User",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "update current user",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "",
        "url": "//accounts/password",
        "desc": "",
        "operation_id": null,
        "summary": "Forget password with email",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get password with email",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//accounts/payment_methods",
        "desc": "",
        "operation_id": null,
        "summary": "Payment Methods",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of account payment methods",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "OK",
        "url": "//accounts/settings",
        "desc": "",
        "operation_id": null,
        "summary": "Settings",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "update the account settings",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "OK",
        "url": "//accounts/sign_in",
        "desc": "",
        "operation_id": null,
        "summary": "Login with email, password and application key",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "sign in to the account",
        "base_path": "/"
    },
    {
        "verb": "put",
        "params": [],
        "response_desc": "OK",
        "url": "//accounts/update_password",
        "desc": "",
        "operation_id": null,
        "summary": "Update Password",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "update password",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "OK",
        "url": "//addresses/places_autocomplete",
        "desc": "For searching places just send the following attributes :\n\n- **longitude** (optional, float) : The location longitude for the seach\n\n- **latitude** (optional, float) : The location latitude for the seach\n\n- **search** (required, string) : The search text (most than 3 char)",
        "operation_id": null,
        "summary": "Get autocomplete places",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get places autocomplete for addresses",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "OK",
        "url": "//addresses/places_details",
        "desc": "",
        "operation_id": null,
        "summary": "Get autocomplete places details",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get address places details",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//catchement_areas",
        "desc": "",
        "operation_id": null,
        "summary": "List all catchement areas",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of catchement areas",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of the Catchement Area",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//catchement_areas/{id}",
        "desc": "",
        "operation_id": null,
        "summary": "Get a Catchement Area",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get a catchement area for id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//credit_cards",
        "desc": "",
        "operation_id": null,
        "summary": "List all CreditCards for the current User",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of credit cards",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of the Credit Card",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//credit_cards/{id}",
        "desc": "",
        "operation_id": null,
        "summary": "Get a CreditCard",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get a credit card with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//products",
        "desc": "",
        "operation_id": null,
        "summary": "List all products",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of products",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of the Product",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//products/{id}",
        "desc": "",
        "operation_id": null,
        "summary": "Get a Product",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get a product with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//promotional_codes",
        "desc": "",
        "operation_id": null,
        "summary": "Get all promotional codes for user",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of promotional codes",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "",
        "url": "//promotional_codes",
        "desc": "",
        "operation_id": null,
        "summary": "Add a promotional code",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "create a promotional code",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of Ride",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//rides/{id}",
        "desc": "",
        "operation_id": null,
        "summary": "Get a ride",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get a ride with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of Ride",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//rides/{id}/cancel",
        "desc": "**Must be authenticate**",
        "operation_id": null,
        "summary": "Cancel a Ride",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "cancel a ride with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of Ride",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//rides/{id}/cancel_fees",
        "desc": "**Must be authenticate**",
        "operation_id": null,
        "summary": "Cancel fee of a Ride",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "cancel fees a ride with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of Ride",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//rides/{id}/estimate",
        "desc": "",
        "operation_id": null,
        "summary": "Estimate a ride",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "estimate a ride with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Numeric `id` of Ride",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "//rides/{id}/reserve",
        "desc": "To book, the ride must belong to the connected user. The ride must have a main passenger at least, the booking user id and the payment hash must be set.\n\n**Must be authenticate**",
        "operation_id": null,
        "summary": "Reserve a ride",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "reserve a ride with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of the page to load",
                "location": "path",
                "name": "page"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of items per page to load",
                "location": "path",
                "name": "per_page"
            }
        ],
        "response_desc": "OK",
        "url": "//rides?page={page}&per_page={per_page}",
        "desc": "",
        "operation_id": null,
        "summary": "Get all user rides",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the list of rides",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "per_page"
            }
        ],
        "response_desc": "",
        "url": "//rides?page={page}&per_page={per_page}",
        "desc": "",
        "operation_id": null,
        "summary": "Create a ride",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "create a new ride",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Ecotaco API version",
                "location": "path",
                "name": "version"
            }
        ],
        "response_desc": "OK",
        "url": "//{version}",
        "desc": "",
        "operation_id": null,
        "summary": "Retrieve the Entry Point on Version",
        "api": "staging-ecotaco.com__1.0.0.yaml",
        "canonical_expr": "get the entry point on version",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "User application key",
                "location": "query",
                "name": "key"
            }
        ],
        "response_desc": "Success",
        "url": "/api/applications/status/",
        "desc": "Remaining window and remaining count details, also returns reports that have been generated by this account.\n",
        "operation_id": null,
        "summary": "Used to understand API usage",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get the status of the API",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future.",
                "location": "query",
                "name": "report_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique report hash",
                "location": "query",
                "name": "report_hash"
            },
            {
                "example": 1,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Sample report indicator",
                "location": "query",
                "name": "sample"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Default value will be 'world'",
                "location": "query",
                "name": "baseline"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/",
        "desc": "Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.",
        "operation_id": null,
        "summary": "Obtain report output",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get the list of reports",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future.",
                "location": "query",
                "name": "report_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique report hash",
                "location": "query",
                "name": "report_hash"
            },
            {
                "example": 1,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Sample report indicator",
                "location": "query",
                "name": "sample"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Default value will be 'world'",
                "location": "query",
                "name": "baseline"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/",
        "desc": "Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.\n",
        "operation_id": null,
        "summary": "Obtain report output",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get the list of reports",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Upload hash to be used for inserting handles",
                "location": "query",
                "name": "upload_hash"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/custom/create/",
        "desc": "Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.\n",
        "operation_id": null,
        "summary": "Step 3 of executing custom report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "create a new custom report",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Upload hash to be used for inserting handles",
                "location": "query",
                "name": "upload_hash"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/custom/create/",
        "desc": "Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.\n",
        "operation_id": null,
        "summary": "Step 3 of executing custom report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "create a custom report",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the report",
                "location": "query",
                "name": "report_name"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/custom/generate/",
        "desc": "Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.\n",
        "operation_id": null,
        "summary": "Step 1 of executing custom report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "generate a custom report",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the report",
                "location": "query",
                "name": "report_name"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/custom/generate/",
        "desc": "Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.\n",
        "operation_id": null,
        "summary": "Step 1 of executing custom report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "generate custom reports",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "List of twitter ids, separated by commas, to be inserted into report. Ids must be enclosed with brackets ie. [177490485] or [177490485,23423434]",
                "location": "query",
                "name": "ids"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Upload hash to be used for inserting handles",
                "location": "query",
                "name": "upload_hash"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/custom/insert/",
        "desc": "Inserting twitter ids or handles into a custom report. This is used for custom reports only\n",
        "operation_id": null,
        "summary": "Step 2 of executing custom report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "insert custom reports",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "List of twitter ids, separated by commas, to be inserted into report. Ids must be enclosed with brackets ie. [177490485] or [177490485,23423434]",
                "location": "query",
                "name": "ids"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Upload hash to be used for inserting handles",
                "location": "query",
                "name": "upload_hash"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/custom/insert/",
        "desc": "Inserting twitter ids or handles into a custom report. This is used for custom reports only\n",
        "operation_id": null,
        "summary": "Step 2 of executing custom report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "insert a custom report",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique report hash",
                "location": "query",
                "name": "report_hash"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/dates/",
        "desc": "Get report dates available for a specific report.\n",
        "operation_id": null,
        "summary": "Get report dates available for a specific report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get report dates",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique report hash",
                "location": "query",
                "name": "report_hash"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/dates/",
        "desc": "Get report dates available for a specific report.\n",
        "operation_id": null,
        "summary": "Get report dates available for a specific report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get the list of report dates",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique hash belonging to report",
                "location": "query",
                "name": "report_hash"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/status/",
        "desc": "Returns a list of custom reports generated by user (report name to upload hash etc).\n",
        "operation_id": null,
        "summary": "Get list of generated reports",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get the list of generated reports",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique hash belonging to report",
                "location": "query",
                "name": "report_hash"
            }
        ],
        "response_desc": "Success",
        "url": "/api/reports/status/",
        "desc": "Returns a list of custom reports generated by user (report name to upload hash etc).\n",
        "operation_id": null,
        "summary": "Get list of generated reports",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "get the list of generated reports",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{\"operator\":\"\",\"word\":\"http://google.com\"},{\"operator\":\"or\",\"word\":\"#test\"},{\"operator\":\"and\",\"word\":\"test2\"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms.",
                "location": "query",
                "name": "terms"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A unix timestamp. start_date will be set to the previous midnight.",
                "location": "query",
                "name": "start_date"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A unix timestamp. end_date will be set to the next midnight.",
                "location": "query",
                "name": "end_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of report",
                "location": "query",
                "name": "report_name"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/tweet/create/",
        "desc": "This report details the audience of the users who have tweeted content that matches what was provided in the keywords. To create custom or twitter reports other methods must be used.\n",
        "operation_id": null,
        "summary": "Used to create tweet reports",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "create a tweet report",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{\"operator\":\"\",\"word\":\"http://google.com\"},{\"operator\":\"or\",\"word\":\"#test\"},{\"operator\":\"and\",\"word\":\"test2\"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms.",
                "location": "query",
                "name": "terms"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A unix timestamp. start_date will be set to the previous midnight.",
                "location": "query",
                "name": "start_date"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A unix timestamp. end_date will be set to the next midnight.",
                "location": "query",
                "name": "end_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of report",
                "location": "query",
                "name": "report_name"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/tweet/create/",
        "desc": "This report details the audience of the users who have tweeted content that matches what was provided in the keywords. To create custom or twitter reports other methods must be used.\n",
        "operation_id": null,
        "summary": "Used to create tweet reports",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "create a tweet report",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas.",
                "location": "query",
                "name": "twitter_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas.",
                "location": "query",
                "name": "twitter_handle"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/twitter/create/",
        "desc": "This report uses the twitter followers as the audience. To create custom or tweet reports other methods must be used. Any report older than two days will be automatically regenerated upon create.\n",
        "operation_id": null,
        "summary": "Used to create twitter follower report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "create a twitter report",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "(required if twitter_handle is not supplied) twitter_id must be sent with all client requests. Multiple handles are separated by commas.",
                "location": "query",
                "name": "twitter_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "(required if twitter_id is not supplied) twitter_handle must be sent with all client requests. Multiple ids are separated by commas.",
                "location": "query",
                "name": "twitter_handle"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "",
        "url": "/api/reports/twitter/create/",
        "desc": "This report uses the twitter followers as the audience. To create custom or tweet reports other methods must be used. Any report older than two days will be automatically regenerated upon create.\n",
        "operation_id": null,
        "summary": "Used to create twitter follower report",
        "api": "statsocial.com__1.0.0.yaml",
        "canonical_expr": "create a twitter report",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The id of the LegalEntity this invoice should be sent for.",
                "location": "body",
                "name": "invoice_submission.legalEntityId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "DEPRECATED. Use legalEntityId",
                "location": "body",
                "name": "invoice_submission.legalSupplierId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
                "for_auth": false,
                "desc": "The tax date is the date on which the supply of goods or of services was made or completed or the date on which the payment on account was made insofar as that date can be determined and differs from the date of the issue of the invoice. EU 2006-112 Article 226 Point 7. Note: For the Dutch TAX authorities the tac date should be the same as the issue date.",
                "location": "body",
                "name": "invoice_submission.invoice.taxPointDate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your id for this invoice line.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID the seller assigned to this item.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.sellersItemIdentification"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the acticlegroup.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupArticlegroupDescription"
            },
            {
                "example": 1,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The price per item (may be fractional)",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.itemPrice"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The articlegroup account number.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupArticlegroupAccount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The articlegroup code.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupArticlegroupCode"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$",
                "for_auth": false,
                "desc": "The period (or specific date) to which the invoice line applies. Format: yyyy-mm-dd - yyyy-mm-dd.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.invoicePeriod"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount excluding VAT. Should equal quantity x itemPrice + allowanceCharge. A difference of 5 cents or 1% between the calculated value and the provided value is allowed.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.amountExcludingVat"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The NZI account number.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupNziAccount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.accountingCostCode.list"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.accountingCostCode.code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.accountingCostCode.listAgency"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.accountingCostCode.listVersion"
            },
            {
                "example": 1,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The number of items (may be fractional).",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description of the NZI code.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupNziDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description for the code the customer gave this item.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupCustomerDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The description for this invoice line.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A URL to an image for the product in the invoice line.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.imageUrl"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The code the customer gave this item.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupCustomerCode"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The discount or surcharge on this item. Should be negative for discounts",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.allowanceCharge"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Standardized ID for the item. Identifiers based on GTIN.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.standardItemIdentification"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The NZI (Nationale Zorg Instelling) code.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupNziCode"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The percentage VAT. This should be a valid VAT percentage in the country at the time of the issueDate of this invoice.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.tax.percentage"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount of VAT. Should equal percentage x amountExcludingVat. A difference of 5 cents or 1% between the calculated value and the provided value is allowed.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.tax.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An ISO 3166-1 alpha-2 country code.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.tax.country"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The account number the customer assigned to this customer code.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceLines.groupCustomerAccount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the company receiving the invoice",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.companyName"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An optional county name.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.county"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The department the invoice is addressed to",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.department"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The postbox number",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.postbox"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The street name. The number can be provided in this fiedl OR in the number field, but not in both.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.street1"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An ISO 3166-1 alpha-2 country code.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The zipcode/postalzone.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.zip"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "This number will be added to the street1 element. The number can be provided in this field OR in the street1 field, but not in both.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the city.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.city"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The second street field. Use this if you used the first field for the building name.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.address.street2"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.contact.lastName"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.contact.email"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.party.contact.firstName"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The account id you assigned to the customer.",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCustomerParty.accountId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
                "for_auth": false,
                "desc": "Format: yyyy-mm-dd.",
                "location": "body",
                "name": "invoice_submission.invoice.dueDate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
                "for_auth": false,
                "desc": "Format: yyyy-mm-dd.",
                "location": "body",
                "name": "invoice_submission.invoice.issueDate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$",
                "for_auth": false,
                "desc": "The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.",
                "location": "body",
                "name": "invoice_submission.invoice.invoicePeriod"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A reference provided by the buyer used for internal routing of the document.",
                "location": "body",
                "name": "invoice_submission.invoice.buyerReference"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ISO 4217 currency code.",
                "location": "body",
                "name": "invoice_submission.invoice.documentCurrencyCode"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The payment id that you will use to match the payment against the invoice.",
                "location": "body",
                "name": "invoice_submission.invoice.paymentMeansPaymentId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The invoice number you assigned to the invoice. The invoiceNumber should be unique for the legalEntityId and year of the issueDate. This means invoice numbers can be reused in different years, as is customary in some countries.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceNumber"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCostCode.list"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCostCode.code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCostCode.listAgency"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "body",
                "name": "invoice_submission.invoice.accountingCostCode.listVersion"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A reference to a contract or framework agreement that this invoice relates to.",
                "location": "body",
                "name": "invoice_submission.invoice.contractDocumentReference"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A reference to an order for this invoice.",
                "location": "body",
                "name": "invoice_submission.invoice.orderReference"
            },
            {
                "example": "1",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason code for the allowance charge. Uses list http://www.unece.org/trade/untdid/d12a/tred/tred4465.htm , defaults to 1 - Agreed settlement",
                "location": "body",
                "name": "invoice_submission.invoice.allowanceCharges.reasonCode"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The percentage VAT. This should be a valid VAT percentage in the country at the time of the issueDate of this invoice.",
                "location": "body",
                "name": "invoice_submission.invoice.allowanceCharges.tax.percentage"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount of VAT. Should equal percentage x amountExcludingVat. A difference of 5 cents or 1% between the calculated value and the provided value is allowed.",
                "location": "body",
                "name": "invoice_submission.invoice.allowanceCharges.tax.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An ISO 3166-1 alpha-2 country code.",
                "location": "body",
                "name": "invoice_submission.invoice.allowanceCharges.tax.country"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The amount for the allowance charge, excluding VAT",
                "location": "body",
                "name": "invoice_submission.invoice.allowanceCharges.amountExcludingVat"
            },
            {
                "example": "Agreed settlement",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason for the allowance charge, free text",
                "location": "body",
                "name": "invoice_submission.invoice.allowanceCharges.reason"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Information about the project this invoice relates to.",
                "location": "body",
                "name": "invoice_submission.invoice.projectReference"
            },
            {
                "example": "380",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Use 380 for a regular invoice, 384 for a Corrective invoice.",
                "location": "body",
                "name": "invoice_submission.invoice.invoiceType"
            },
            {
                "example": false,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Whether or not the invoice is reverse charged",
                "location": "body",
                "name": "invoice_submission.invoice.vatReverseCharge"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Leave empty. Defaults to 31 if an IBAN is provided, otherwise defaults to 1. But leave empty.",
                "location": "body",
                "name": "invoice_submission.invoice.paymentMeansCode"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "amountIncludingVat is important because of rounding differences. In many invoices, the sum of the line item amounts excluding VAT and the VAT amounts is not equal to first summing the line items without VAT, and then applying VAT. The difference is automatically calculated and included in the electronic invoice, so the receiving accounting package can process the electronic invoice without problems.",
                "location": "body",
                "name": "invoice_submission.invoice.amountIncludingVat"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A reference to a commercial invoice or corrective invoice of which the current invoice is a correction.",
                "location": "body",
                "name": "invoice_submission.invoice.billingReference"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The IBAN the amount payable should be transferred to",
                "location": "body",
                "name": "invoice_submission.invoice.paymentMeansIban"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The invoice in PDF form. The document should be base64 encoded and the enocded string length should not exceed 2MB (2097152 bytes).",
                "location": "body",
                "name": "invoice_submission.document"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The mode in which to run this invoice submission.",
                "location": "body",
                "name": "invoice_submission.mode"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "DEPRECATED.",
                "location": "body",
                "name": "invoice_submission.supplierId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "DEPRECATED. Use widgetIdentification.id",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.id"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The email addresses the invoice should be sent to if none of the other identifiers can be used",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.emails"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The email address the invoice should be sent to",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.emails"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The actual identifier.",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.publicIdentifiers.id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The scheme of the identifier. See <<Peppol Schemes List>> for a list.",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.publicIdentifiers.scheme"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your id for this organization. This should match the id that you use for the Storecove widget (if you use that).",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.widgetIdentification.id"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The id of the LegalEntity this invoice should be sent for.",
                "location": "body",
                "name": "invoice_submission.invoiceRecipient.widgetIdentification.legalEntityId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A URL to retrieve the PDF document via HTTP GET. If the link expires, please allow at least 7 days of validity.",
                "location": "body",
                "name": "invoice_submission.documentUrl"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/invoice_submissions",
        "desc": "Submit an invoice for delivery.\ninclude::examples/invoice_submissions/create_invoice_submission/tabs.adoc[]",
        "operation_id": "create_invoice_submission",
        "summary": "Submit a new invoice",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "create a new invoice submission",
        "base_path": "/api/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "DEPRECATED.",
                "location": "body",
                "name": "invoice_recipient_preflight.supplierId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Your id for this organization. This should match the id that you use for the Storecove widget (if you use that).",
                "location": "body",
                "name": "invoice_recipient_preflight.widgetIdentification.id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The id of the LegalEntity this invoice should be sent for.",
                "location": "body",
                "name": "invoice_recipient_preflight.widgetIdentification.legalEntityId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The actual identifier.",
                "location": "body",
                "name": "invoice_recipient_preflight.publicIdentifiers.id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The scheme of the identifier. See <<Peppol Schemes List>> for a list.",
                "location": "body",
                "name": "invoice_recipient_preflight.publicIdentifiers.scheme"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/invoice_submissions/preflight",
        "desc": "Check whether Storecove can deliver an invoice for a list of ids.\ninclude::examples/invoice_submissions/preflight_invoice_recipient/tabs.adoc[]",
        "operation_id": "preflight_invoice_recipient",
        "summary": "Preflight an invoice recipient",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "check whether store cove can deliver an invoice submissions",
        "base_path": "/api/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The first address line.",
                "location": "body",
                "name": "legal_entity.line1"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The second address line, if applicable",
                "location": "body",
                "name": "legal_entity.line2"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The zipcode.",
                "location": "body",
                "name": "legal_entity.zip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "County, if applicable",
                "location": "body",
                "name": "legal_entity.county"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An ISO 3166-1 alpha-2 country code.",
                "location": "body",
                "name": "legal_entity.country"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the company.",
                "location": "body",
                "name": "legal_entity.party_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The city.",
                "location": "body",
                "name": "legal_entity.city"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/legal_entities",
        "desc": "Create a new LegalEntity.",
        "operation_id": "create_legal_entity",
        "summary": "Create a new LegalEntity",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "create a new legal entity",
        "base_path": "/api/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "legal_entity id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/v2/legal_entities/{id}",
        "desc": "Delete a specific LegalEntity.",
        "operation_id": "delete_legal_entity",
        "summary": "Delete LegalEntity",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "delete a legal entity by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "legal_entity id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/legal_entities/{id}",
        "desc": "Get a specific LegalEntity.",
        "operation_id": "get_legal_entity",
        "summary": "Get LegalEntity",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get a legal entity for id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "legal_entity id",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The first address line.",
                "location": "body",
                "name": "legal_entity.line1"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The second address line, if applicable",
                "location": "body",
                "name": "legal_entity.line2"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The zipcode.",
                "location": "body",
                "name": "legal_entity.zip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "County, if applicable",
                "location": "body",
                "name": "legal_entity.county"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "An ISO 3166-1 alpha-2 country code.",
                "location": "body",
                "name": "legal_entity.country"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the company.",
                "location": "body",
                "name": "legal_entity.party_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The city.",
                "location": "body",
                "name": "legal_entity.city"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/legal_entities/{id}",
        "desc": "Update a specific LegalEntity.",
        "operation_id": "update_legal_entity",
        "summary": "Update LegalEntity",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "update a legal entity for id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The id of the LegalEntity for which to create the PeppolIdentifier",
                "location": "path",
                "name": "legal_entity_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The identifier.",
                "location": "body",
                "name": "peppol_identifier.identifier"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The scheme of the identifier. See <<Peppol Schemes List>> for a list.",
                "location": "body",
                "name": "peppol_identifier.scheme"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".",
                "location": "body",
                "name": "peppol_identifier.superscheme"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/legal_entities/{legal_entity_id}/peppol_identifiers",
        "desc": "Create a new PeppolIdentifier.",
        "operation_id": "create_peppol_identifier",
        "summary": "Create a new PeppolIdentifier",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "create a new peppol identifiers for legal entity id being << legal_entity_id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The id of the LegalEntity this PeppolIdentifier belongs to",
                "location": "path",
                "name": "legal_entity_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".",
                "location": "path",
                "name": "superscheme"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "PEPPOL identifier scheme id, e.g. \"DE:VAT\". For a full list see <<Peppol Schemes List>>.",
                "location": "path",
                "name": "scheme"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "PEPPOL identifier",
                "location": "path",
                "name": "identifier"
            }
        ],
        "response_desc": "",
        "url": "/api/v2/legal_entities/{legal_entity_id}/peppol_identifiers/{superscheme}/{scheme}/{identifier}",
        "desc": "Delete a PeppolIdentifier.",
        "operation_id": "delete_peppol_identifier",
        "summary": "Delete PeppolIdentifier",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "delete a peppol with identifier being << identifier >> for legal entity id being << legal_entity_id >>, super scheme being << superscheme >>, and scheme being << scheme >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "purchase invoice guid",
                "location": "path",
                "name": "guid"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/purchase_invoices/{guid}",
        "desc": "Get a specific Invoice.",
        "operation_id": "get_invoice",
        "summary": "Get Invoice",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get a purchase invoice for guid being << guid >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "purchase invoice guid",
                "location": "path",
                "name": "guid"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/purchase_invoices/{guid}/ubl",
        "desc": "Get a specific Invoice in UBL form.",
        "operation_id": "get_invoice_ubl",
        "summary": "Get Invoice as UBL",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get a purchase invoice as ubl for guid being << guid >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by the external_user_id",
                "location": "query",
                "name": "external_user_id"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_account_requests",
        "desc": "Retrieve all active ShopAccountRequests for one of your entities.\ninclude::examples/shop_account_requests/shop_account_requests_index/tabs.adoc[]",
        "operation_id": "shop_account_requests_index",
        "summary": "Get ShopAccountRequests",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get the list of shop account requests",
        "base_path": "/api/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.password"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.username"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.external_user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.request_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.request_url"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_account_requests",
        "desc": "Create a new ShopAccountRequest\ninclude::examples/shop_account_requests/create_shop_account_request/tabs.adoc[]",
        "operation_id": "create_shop_account_request",
        "summary": "Create ShopAccountRequest",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "create a new shop account request",
        "base_path": "/api/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "shop_account_request id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/v2/shop_account_requests/{id}",
        "desc": "Delete a specific ShopAccountRequest\ninclude::examples/shop_account_requests/delete_shop_account_request/tabs.adoc[]",
        "operation_id": "delete_shop_account_request",
        "summary": "Delete ShopAccountRequest",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "delete a shop account requests by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "shop_account_request id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_account_requests/{id}",
        "desc": "Show a specific ShopAccountRequest\ninclude::examples/shop_account_requests/get_shop_account_request/tabs.adoc[]",
        "operation_id": "get_shop_account_request",
        "summary": "Get ShopAccountRequest",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get a shop account requests by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "shop_account_request id",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.password"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.request_url"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.request_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "shop_account_request.username"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_account_requests/{id}",
        "desc": "Update a specific ShopAccountRequest\ninclude::examples/shop_account_requests/update_shop_account_request/tabs.adoc[]",
        "operation_id": "update_shop_account_request",
        "summary": "Update ShopAccountRequest",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "update a shop account request by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by the external_user_id",
                "location": "query",
                "name": "external_user_id"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_accounts",
        "desc": "Retrieve all active ShopAccounts for one of your entities.\ninclude::examples/shop_accounts/shop_accounts_index/tabs.adoc[]",
        "operation_id": "shop_accounts_index",
        "summary": "Get ShopAccounts for an entity",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get the list of shop accounts",
        "base_path": "/api/v2"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The password for the account.",
                "location": "body",
                "name": "shop_account.password"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The _external_user_id_ is what identifies the entity for which you create---this ShopAccount. This could be a user, however, if your---users can manage multiple organizations/administrations, then it is a---better idea to put the organization/administration identifier in this---field, because the _external_user_id_ groups the ShopAccounts into a set---that all deliver their invoices to the same destination (typically an---email address).---",
                "location": "body",
                "name": "shop_account.external_user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "This is email address determines where the invoices for all ShopAccounts---in the same _external_user_id_ group are sent. Each time you create or---update a ShopAccount for an _external_user_id_ and also provide---__email__, the email destination for all the ShopAccounts in the---_external_user_id_ group are updated at the same time.------We suggest you provide an immutable email address. If your user can---change the email address to which the invoices are to be sent, then you---will need to do an update for one of the ShopAccounts for that user in---order for Storecove to start using the new email address.------Note that this field is mandatory for the first ShopAccount that you create for an entity.---",
                "location": "body",
                "name": "shop_account.email"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The id of the Shop the account is for.",
                "location": "body",
                "name": "shop_account.shop_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The username for the account. The username needs to be unique in combination with the shop_id.",
                "location": "body",
                "name": "shop_account.username"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_accounts",
        "desc": "Create a new ShopAccount.\ninclude::examples/shop_accounts/create_shop_account/tabs.adoc[]",
        "operation_id": "create_shop_account",
        "summary": "Create ShopAccount",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "create a new shop account",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Success",
        "url": "/api/v2/shop_accounts/auth_failures",
        "desc": "Get ShopAccounts with authorization failures.\ninclude::examples/shop_accounts/shop_accounts_auth_failures/tabs.adoc[]",
        "operation_id": "shop_accounts_auth_failures",
        "summary": "Get ShopAccounts with authorization failures",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get auth failures of shop accounts",
        "base_path": "/api/v2"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "shop_account id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/v2/shop_accounts/{id}",
        "desc": "Delete a specific ShopAccount.\ninclude::examples/shop_accounts/delete_shop_account/tabs.adoc[]",
        "operation_id": "delete_shop_account",
        "summary": "Delete ShopAccount",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "delete a shop accounts by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "shop_account id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_accounts/{id}",
        "desc": "Get a specific ShopAccount.\ninclude::examples/shop_accounts/get_shop_account/tabs.adoc[]",
        "operation_id": "get_shop_account",
        "summary": "Get ShopAccount",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get a shop account by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "patch",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "shop_account id",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "See <<_openapi_shopaccountinput>>.",
                "location": "body",
                "name": "shop_account.password"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "See <<_openapi_shopaccountinput>>.",
                "location": "body",
                "name": "shop_account.email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "See <<_openapi_shopaccountinput>>.",
                "location": "body",
                "name": "shop_account.username"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shop_accounts/{id}",
        "desc": "Update a specific ShopAccount.\ninclude::examples/shop_accounts/update_shop_account/tabs.adoc[]",
        "operation_id": "update_shop_account",
        "summary": "Update ShopAccount",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "update a shop account by id being << id >>",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Include creditcards in list. Add ?cc=true to URL to use.",
                "location": "query",
                "name": "cc"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v2/shops",
        "desc": "Get all available shops.\ninclude::examples/shops/shops_index/tabs.adoc[]",
        "operation_id": "shops_index",
        "summary": "Get Shops",
        "api": "storecove.com__2.0.1.yaml",
        "canonical_expr": "get the list of shops",
        "base_path": "/api/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The latitude for a location. Valid input is a number between -90 and 90.",
                "location": "query",
                "name": "lat"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The longitude for a location. Valid input is a number between -180 and 180.",
                "location": "query",
                "name": "lng"
            }
        ],
        "response_desc": "Successful request",
        "url": "//forecast",
        "desc": "Get forecast info for the given coordinates. For every hour and property, you will get a list of weather sources and their values.",
        "operation_id": "getForecast",
        "summary": "Get hourly forecasts by coordinates",
        "api": "stormglass.io__1.0.1.yaml",
        "canonical_expr": "forecast",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The format of the response",
                "location": "query",
                "name": "format"
            }
        ],
        "response_desc": "List of packages",
        "url": "/open511/areas",
        "desc": "Provides the geographical boundaries for all the jurisdictions.",
        "operation_id": null,
        "summary": null,
        "api": "surrey.ca__open511__0.1.yaml",
        "canonical_expr": "get the list of areas",
        "base_path": "/open511"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events on a given road as specified by the road name. An example of a valid road name is 'Highway 1'. The default is to return events on all roads.",
                "location": "query",
                "name": "road_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events tagged with one of the listed event types. The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION]. Multiple values may be listed, and should be separated by a comma. The default is to return events of all types.",
                "location": "query",
                "name": "event_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions.",
                "location": "query",
                "name": "jurisdiction"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events within one of the specified areas. An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of 'drivebc.ca/1' limits events to those within the Lower Mainland District. The default is to return events in all areas.",
                "location": "query",
                "name": "area_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The format of the response",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [<, <=, >, >=] to indicate 'before', 'before or equal to', 'after' or 'after or equal to' respectively. For example, >2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any creation time.",
                "location": "query",
                "name": "created"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE,MAJOR]. Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity.",
                "location": "query",
                "name": "severity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events having a given status.",
                "location": "query",
                "name": "status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [<, <=, >, >=] to indicate 'before', 'before or equal to', 'after' or 'after or equal to' respectively. For example, >2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time",
                "location": "query",
                "name": "updated"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the response to events that fall within the specified geographical bounding box. The bbox format must be '[min longitude],[min latitude],[max longitude],[max latitude]' with WGS84 coordinates. For example: -123.45,48.99,-122.45,49.49. The default is to return events in all geographical locations.",
                "location": "query",
                "name": "bbox"
            }
        ],
        "response_desc": "List of packages",
        "url": "/open511/events",
        "desc": "Provides real time traffic obstruction events.  The event resource provides information about road events (constructions, special events, etc.).",
        "operation_id": null,
        "summary": null,
        "api": "surrey.ca__open511__0.1.yaml",
        "canonical_expr": "get the list of traffic events",
        "base_path": "/open511"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The format of the response",
                "location": "query",
                "name": "format"
            }
        ],
        "response_desc": "List of packages",
        "url": "/open511/jurisdiction",
        "desc": "Lists the jurisdictions publishing data through this Open511 API implementation.",
        "operation_id": null,
        "summary": null,
        "api": "surrey.ca__open511__0.1.yaml",
        "canonical_expr": "get the list of jurisdictions",
        "base_path": "/open511"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The format of the response",
                "location": "query",
                "name": "format"
            }
        ],
        "response_desc": "List of packages",
        "url": "/open511/jurisdictiongeography",
        "desc": "Provides the geographical boundaries for all the jurisdictions.",
        "operation_id": null,
        "summary": null,
        "api": "surrey.ca__open511__0.1.yaml",
        "canonical_expr": "get the list of jurisdiction geography",
        "base_path": "/open511"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Beginning of the required date/time range in ISO 8601. For example March 24 2016 at 1:00 PM Pacific Standard Time would be 2016-03-24T13:00:00-08.",
                "location": "query",
                "name": "startdatetime"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "End of the required date/time range. For details see the startdatetime parameter.",
                "location": "query",
                "name": "enddatetime"
            }
        ],
        "response_desc": "City of Surrey Traffic Loop Counts",
        "url": "/fmedatastreaming/TrafficLoopCount/TrafficLoopCounts.fmw",
        "desc": "Provides traffic loop counts for the input time interval. The LOOP_ID and DATETIME combinations are unique in the output. The output timestamp will contain the time zone offset, either -08 (PST) or -07 (PDT) depending on whether daylight savings time was observed at the output datetime. In order to work with local time you may omit the time zone offset from the input and truncate it from the output.",
        "operation_id": null,
        "summary": null,
        "api": "surrey.ca__trafficloops__0.1.yaml",
        "canonical_expr": "get traffic loop counts",
        "base_path": "/fmedatastreaming/TrafficLoopCount"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The output projection EPSG code.  Eg. WGS84 is 4326 and NAD 83 UTM Zone 10 is 26910.  If this is left blank, the default is 4326.  For more on EPSG codes please see http://spatialreference.org/",
                "location": "query",
                "name": "proj_epsg"
            }
        ],
        "response_desc": "City of Surrey Traffic Loops",
        "url": "/fmedatastreaming/TrafficLoopCount/TrafficLoops.fmw",
        "desc": "Provides all the traffic loops maintained by the City of Surrey in GeoJSON format. LANE_DIRECTION indicates the heading of the traffic (NB, SB, EB, WB). INTERSECTION_ID corresponds to the INTID field in the intersections dataset which can be found on the Surrey Open Data site. ROAD_FACILITYID indicates which road segment the loop is located on.  This corresponds to the FACILITYID in the Road Centrelines dataset on the City of Surrey Open Data site.",
        "operation_id": null,
        "summary": null,
        "api": "surrey.ca__trafficloops__0.1.yaml",
        "canonical_expr": "get traffic loops fmw",
        "base_path": "/fmedatastreaming/TrafficLoopCount"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "successful operation",
        "url": "/api/gen/clients",
        "desc": "",
        "operation_id": "clientOptions",
        "summary": "Gets languages supported by the client generator",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "get the list of languages supported by the clients generator",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The target language for the client library",
                "location": "path",
                "name": "language"
            }
        ],
        "response_desc": "successful operation",
        "url": "/api/gen/clients/{language}",
        "desc": "",
        "operation_id": "getClientOptions",
        "summary": "Returns options for a client library",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "get options for a client library for language being << language >>",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The target language for the client library",
                "location": "path",
                "name": "language"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "securityDefinition.type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "securityDefinition.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "authorizationValue.type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "authorizationValue.keyName"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "authorizationValue.value"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "spec"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "options"
            },
            {
                "example": "http://petstore.swagger.io/v2/swagger.json",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "swaggerUrl"
            }
        ],
        "response_desc": "successful operation",
        "url": "/api/gen/clients/{language}",
        "desc": "Accepts a `GeneratorInput` options map for spec location and generation options",
        "operation_id": "generateClient",
        "summary": "Generates a client library",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "generate a client library for language being << language >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "fileId"
            }
        ],
        "response_desc": "successful operation",
        "url": "/api/gen/download/{fileId}",
        "desc": "A valid `fileId` is generated by the `/clients/{language}` or `/servers/{language}` POST operations.  The fileId code can be used just once, after which a new `fileId` will need to be requested.",
        "operation_id": "downloadFile",
        "summary": "Downloads a pre-generated file",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "download by file id being << fileId >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "successful operation",
        "url": "/api/gen/servers",
        "desc": "",
        "operation_id": "serverOptions",
        "summary": "Gets languages supported by the server generator",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "get the list of languages supported by the servers generator",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The target language for the server framework",
                "location": "path",
                "name": "framework"
            }
        ],
        "response_desc": "successful operation",
        "url": "/api/gen/servers/{framework}",
        "desc": "",
        "operation_id": "getServerOptions",
        "summary": "Returns options for a server framework",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "get the list of options for a server framework being << framework >>",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "framework",
                "location": "path",
                "name": "framework"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "securityDefinition.type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "securityDefinition.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "authorizationValue.type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "authorizationValue.keyName"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "authorizationValue.value"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "spec"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "options"
            },
            {
                "example": "http://petstore.swagger.io/v2/swagger.json",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "swaggerUrl"
            }
        ],
        "response_desc": "successful operation",
        "url": "/api/gen/servers/{framework}",
        "desc": "Accepts a `GeneratorInput` options map for spec location and generation options.",
        "operation_id": "generateServerForLanguage",
        "summary": "Generates a server library",
        "api": "swagger.io__generator__2.3.1.yaml",
        "canonical_expr": "generate a server library for framework being << framework >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "free text query to match",
                "location": "query",
                "name": "query"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "matches against tags associated with an API",
                "location": "query",
                "name": "tag"
            },
            {
                "example": "ALL",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "matches against published state of the spec---* UNPUBLISHED - spec is a draft, a work in progress---* PUBLISHED - spec is a stable version ready for consuming from client applications---* ANY - either PUBLISHED or UNPUBLISHED---",
                "location": "query",
                "name": "state"
            },
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "number of results per page",
                "location": "query",
                "name": "limit"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "page to return",
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "",
        "url": "/apis",
        "desc": "",
        "operation_id": "searchApis",
        "summary": "Retrieves a list of currently defined APIs in APIs.json format.",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the list of apis",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "page to return",
                "location": "query",
                "name": "page"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "number of results per page",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "a list of APIs in APIs.json format",
        "url": "/apis/{owner}",
        "desc": "",
        "operation_id": "getOwnerApis",
        "summary": "Retrieves an APIs.json listing of all APIs defined for this owner",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the list of apis by owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the API was successfully deleted",
        "url": "/apis/{owner}/{api}",
        "desc": "",
        "operation_id": "deleteApi",
        "summary": "Deletes the specified API",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "delete an api by API being << api >> and owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "a list of API versions in APIs.json format",
        "url": "/apis/{owner}/{api}",
        "desc": null,
        "operation_id": "getApiVersions",
        "summary": "Retrieves an APIs.json listing for all API versions for this owner and API",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get an api by API being << api >> and owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Defines whether the API has to be private",
                "location": "query",
                "name": "isPrivate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "api version",
                "location": "query",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "force update",
                "location": "query",
                "name": "force"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "definition"
            }
        ],
        "response_desc": "the API was successfully saved",
        "url": "/apis/{owner}/{api}",
        "desc": "Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.",
        "operation_id": "saveDefinition",
        "summary": "Saves the provided Swagger definition",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "create an api by owner being << owner >> and API being << api >>",
        "base_path": ""
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "",
        "url": "/apis/{owner}/{api}/.collaboration",
        "desc": null,
        "operation_id": "deleteCollaboration",
        "summary": "Deletes API's collaboration",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "delete a collaboration api by owner being << owner >> and API being << api >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "expandTeams"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the existing collaboration on an API",
        "url": "/apis/{owner}/{api}/.collaboration",
        "desc": null,
        "operation_id": "getCollaboration",
        "summary": "Gets API's collaboration",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get a collaboration api by owner being << owner >> and API being << api >>",
        "base_path": ""
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "members"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "members"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "owners"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "owners"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "type identifier of the managed entity",
                "location": "body",
                "name": "hint.type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "owner"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "teams"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "teams"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "pendingMembers"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "pendingMembers"
            }
        ],
        "response_desc": "",
        "url": "/apis/{owner}/{api}/.collaboration",
        "desc": null,
        "operation_id": "updateCollaboration",
        "summary": "Updates API's collaboration",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "replace a collaboration api by owner being << owner >> and API being << api >>",
        "base_path": ""
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the API version was successfully deleted",
        "url": "/apis/{owner}/{api}/{version}",
        "desc": "",
        "operation_id": "deleteApiVersion",
        "summary": "Deletes a particular version of the specified API",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "delete a version of an api by API with being << api >>, owner being << owner >>, and version being << version >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the Swagger API in requested format",
        "url": "/apis/{owner}/{api}/{version}",
        "desc": "",
        "operation_id": "getDefinition",
        "summary": "Retrieves the Swagger definition for the specified API and version",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get a version of an api by API with being << api >>, owner being << owner >>, and version being << version >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the Swagger API in JSON format",
        "url": "/apis/{owner}/{api}/{version}/swagger.json",
        "desc": "",
        "operation_id": "getJsonDefinition",
        "summary": "Retrieves the Swagger definition for the specified API and version in JSON format",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get a swagger of an api by API with being << api >>, owner being << owner >>, and version being << version >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API identifier",
                "location": "path",
                "name": "api"
            }
        ],
        "response_desc": "the Swagger API in YAML format",
        "url": "/apis/{owner}/{api}/{version}/swagger.yaml",
        "desc": "",
        "operation_id": "getYamlDefinition",
        "summary": "Retrieves the Swagger definition for the specified API and version in YAML format",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get a swagger of aa api by API with being << api >>, owner being << owner >>, and version being << version >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "free text query to match",
                "location": "query",
                "name": "query"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "matches against tags associated with a domain",
                "location": "query",
                "name": "tag"
            },
            {
                "example": "ALL",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "matches against published state of the spec---* UNPUBLISHED - spec is a draft, a work in progress---* PUBLISHED - spec is a stable version ready for consuming from client applications---* ANY - either PUBLISHED or UNPUBLISHED---",
                "location": "query",
                "name": "state"
            },
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "number of results per page",
                "location": "query",
                "name": "limit"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "page to return",
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "",
        "url": "/domains",
        "desc": null,
        "operation_id": "searchDomains",
        "summary": "Retrieves a list of currently defined domains in APIs.json format",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the list of domains",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "page to return",
                "location": "query",
                "name": "page"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "number of results per page",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "a list of domains in APIs.json format",
        "url": "/domains/{owner}",
        "desc": null,
        "operation_id": "getOwnerDomains",
        "summary": "Retrieves an APIs.json listing of all domains defined for this owner",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the list of domains by owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "force update",
                "location": "query",
                "name": "force"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            }
        ],
        "response_desc": "the domain was successfully deleted",
        "url": "/domains/{owner}/{domain}",
        "desc": null,
        "operation_id": "deleteDomain",
        "summary": "Deletes the specified domain",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "delete a domain by domain being << domain >> and owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            }
        ],
        "response_desc": "a list of domain versions in APIs.json format",
        "url": "/domains/{owner}/{domain}",
        "desc": null,
        "operation_id": "getDomainVersions",
        "summary": "Retrieves an APIs.json listing for all domain versions for this owner and domain",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get a domain by domain being << domain >> and owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Defines whether the API has to be private",
                "location": "query",
                "name": "isPrivate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain version",
                "location": "query",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "force update",
                "location": "query",
                "name": "force"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "definition"
            }
        ],
        "response_desc": "the domain was successfully saved",
        "url": "/domains/{owner}/{domain}",
        "desc": null,
        "operation_id": "saveDomainDefinition",
        "summary": "Saves the provided Swagger definition of a domain",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "create a domain by domain being << domain >> and owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "force update",
                "location": "query",
                "name": "force"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            }
        ],
        "response_desc": "the domain version was successfully deleted",
        "url": "/domains/{owner}/{domain}/{version}",
        "desc": null,
        "operation_id": "deleteDomainVersion",
        "summary": "Deletes a particular version of the specified domain",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "delete a version of the domains with domain being << domain >>, owner being << owner >> and version being << version >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            }
        ],
        "response_desc": "the Swagger domain in requested format",
        "url": "/domains/{owner}/{domain}/{version}",
        "desc": null,
        "operation_id": "getDomainDefinition",
        "summary": "Retrieves the Swagger definition for the specified domain and version",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the swagger of the domains with domain being << domain >>, owner being << owner >> and version being << version >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            }
        ],
        "response_desc": "definition in JSON format",
        "url": "/domains/{owner}/{domain}/{version}/domain.json",
        "desc": null,
        "operation_id": "getDomainJsonDefinition",
        "summary": "Retrieves the definition for the specified domain and version in JSON format",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the definition for the specified domain being << domain >> and version for owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "version identifier",
                "location": "path",
                "name": "version"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier",
                "location": "path",
                "name": "owner"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "domain identifier",
                "location": "path",
                "name": "domain"
            }
        ],
        "response_desc": "definition in YAML format",
        "url": "/domains/{owner}/{domain}/{version}/domain.yaml",
        "desc": null,
        "operation_id": "getDomainYamlDefinition",
        "summary": "Retrieves the definition for the specified domain and version in YAML format",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get  the definition of a domain being << domain >> and version in yaml format for owner being << owner >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "free text query to match",
                "location": "query",
                "name": "query"
            },
            {
                "example": "ASC",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order",
                "location": "query",
                "name": "order"
            },
            {
                "example": "ALL",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "matches against published state of the spec---* UNPUBLISHED - spec is a draft, a work in progress---* PUBLISHED - spec is a stable version ready for consuming from client applications---* ANY - either PUBLISHED or UNPUBLISHED---",
                "location": "query",
                "name": "state"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "number of results per page",
                "location": "query",
                "name": "limit"
            },
            {
                "example": "NAME",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "sort criteria or result set---* NAME ----* UPATED---* CREATED---* OWNER---",
                "location": "query",
                "name": "sort"
            },
            {
                "example": "ANY",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of Swagger specs to search---* API - APIs only---* DOMAIN - Domains only---* ANY - Both APIs and Domains---",
                "location": "query",
                "name": "specType"
            },
            {
                "example": "ANY",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The visibility of a spec in SwaggerHub---* PUBLIC - can be viewed by anyone---* PRIVATE - can only be viewed by you or your Org and those that you are collaborating with or have shared it with---* ANY - either PUBLIC or PRIVATE---",
                "location": "query",
                "name": "visibility"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "page to return",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "API or Domaion owner identifier. Can be username or Organization name",
                "location": "query",
                "name": "owner"
            }
        ],
        "response_desc": "a list of APIs and Domains in APIs.json format",
        "url": "/specs",
        "desc": "",
        "operation_id": "searchApisAndDomains",
        "summary": "Retrieves a list of currently defined APIs and Domains in APIs.json format",
        "api": "swaggerhub.com__1.0.45.yaml",
        "canonical_expr": "get the list of specs",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional metadata that will be associated with the video",
                "location": "formData",
                "name": "userdata"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            }
        ],
        "response_desc": "A video object, containing all metadata members.",
        "url": "/v1/video/create",
        "desc": "Create a new video, optionally setting some metadata fields. You may optionally set some of the metadata associated with the video. Only fields inside the \"userdata\" field can be set.",
        "operation_id": "create",
        "summary": "Create a new video, optionally setting some metadata fields.",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "create a video",
        "base_path": "/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the video to retrieve the metadata from",
                "location": "formData",
                "name": "video_id"
            }
        ],
        "response_desc": "A video object, containing all metadata members.",
        "url": "/v1/video/details",
        "desc": "Return details about a video. You may optionally request that only some of the metadata fields are returned.",
        "operation_id": "details",
        "summary": "Return details about a video.",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "get details of a video",
        "base_path": "/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "JavaScript code to be run over each video object, to determine what should be returend.",
                "location": "formData",
                "name": "filter"
            }
        ],
        "response_desc": "An array of arbitrary elements, up to one element for each video object",
        "url": "/v1/video/query",
        "desc": "Find videos matching any criteria, by running a JavaScript function over each video object. A detailed tutorial on how to use this functionality is available on the [documentation page](https://www.synq.fm/queries-video-api/).",
        "operation_id": "query",
        "summary": "Perform a JavaScript query to return video objects matching any desired criteria.",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "query videos",
        "base_path": "/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the video you want to stream to. The video needs to have been previously created.",
                "location": "formData",
                "name": "video_id"
            }
        ],
        "response_desc": "A JSON object with urls for streaming.",
        "url": "/v1/video/stream",
        "desc": "Returns a stream url that you can stream to from your broadcasting software, and a playback url people can use to watch the stream.",
        "operation_id": "stream",
        "summary": "Returns urls for streaming.",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "get the list urls of streaming",
        "base_path": "/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "JavaScript code to execute on the video object.",
                "location": "formData",
                "name": "source"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the video whose metadata will be updated",
                "location": "formData",
                "name": "video_id"
            }
        ],
        "response_desc": "A video object, containing all metadata members.",
        "url": "/v1/video/update",
        "desc": "Update a video's metadata through JavaScript code. Only fields inside the \"userdata\" object can be set.",
        "operation_id": "update",
        "summary": "Update a video's metadata.",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "update a video's metadata",
        "base_path": "/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the video you are going to upload into. The video needs to have been previously created.",
                "location": "formData",
                "name": "video_id"
            }
        ],
        "response_desc": "An object containing all parameters needed for uploading the file.",
        "url": "/v1/video/upload",
        "desc": "Return parameters needed for uploading a video file to Amazon Simple Storage Service. See http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html as well as the language-specific code-examples.\n#### *Example request*\n```shell\ncurl -s https://api.synq.fm/v1/video/upload \\\n  -F api_key=${SYNQ_API_KEY} \\\n  -F video_id=2d81c30ce62f4dfdb501dbca96c7ae56\n```\n\n#### *Example response*\n```json\n{\n  \"action\": \"https://synqfm.s3.amazonaws.com/\",\n  \"AWSAccessKeyId\": \"AKIAIP77Y7MMX3ITZMFA\",\n  \"Content-Type\": \"video/mp4\",\n  \"Policy\": \"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\",\n  \"Signature\": \"ysqDemlKXKr6hKzVFP0hCGgf/cs=\",\n  \"acl\": \"public-read\",\n  \"key\": \"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\"\n}\n```\n\nTo upload the file, you can then make a multipart POST request to the URL in `action`, and for all the other parameters returned, set them as form parameters.\n\nGiven the parameters above, you would upload a file `test.mp4` using cURL like this:\n\n```shell\ncurl -s https://synqfm.s3.amazonaws.com/ \\\n  -F AWSAccessKeyId=\"AKIAIP77Y7MMX3ITZMFA\" \\\n  -F Content-Type=\"video/mp4\" \\\n  -F Policy=\"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\" \\\n  -F Signature=\"ysqDemlKXKr6hKzVFP0hCGgf/cs=\" \\\n  -F acl=\"public-read\" \\\n  -F key=\"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\" \\\n  -F file=\"@my_video_file.mp4\"\n```\n\n",
        "operation_id": "upload",
        "summary": "Return parameters needed for uploading a video file.",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "get the list of parameters needed for uploading a video",
        "base_path": "/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "2 hours",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How long the uploader widget works for. Anything from '30 minutes' to '2 days'.",
                "location": "formData",
                "name": "timeout"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "formData",
                "name": "api_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the video you are going to upload into. The video needs to have been previously created.",
                "location": "formData",
                "name": "video_id"
            }
        ],
        "response_desc": "A JSON object with an embeddable url to an uploader page/widget.",
        "url": "/v1/video/uploader",
        "desc": "Returns an embeddable url, that contains an uploader widget that allows you to easily upload any mp4. Great way to simplify the uploading process for end users.",
        "operation_id": "uploader",
        "summary": "Return embeddable url to an uploader widget",
        "api": "synq.fm__1.9.1.yaml",
        "canonical_expr": "get the embeddable url to an uploader widget",
        "base_path": "/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Should only countries with tax supported be listed?",
                "location": "query",
                "name": "tax_supported"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/dictionaries/countries",
        "desc": null,
        "operation_id": "getCountriesDict",
        "summary": "Countries",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of dictionary countries",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//api/v1/dictionaries/currencies",
        "desc": null,
        "operation_id": "getCurrenciesDict",
        "summary": "Currencies",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of dictionary currencies",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//api/v1/dictionaries/product_types",
        "desc": null,
        "operation_id": "getProductTypesDict",
        "summary": "Product types",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of dictionary product types",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "//api/v1/geoip",
        "desc": null,
        "operation_id": "locateMyIP",
        "summary": "Locate IP",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "locate my ip",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "IP address.",
                "location": "path",
                "name": "ip"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/geoip/{ip}",
        "desc": null,
        "operation_id": "locateGivenIP",
        "summary": "Locate provided IP",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "locate given ip with ip being << ip >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.",
                "location": "query",
                "name": "currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output format. 'xml' and 'csv' values are accepted. Default format - json",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ISO 2-letter country code which will be used for determining which country is domestic.",
                "location": "query",
                "name": "country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Which date should be used for FX.",
                "location": "query",
                "name": "fx_date_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period end month in yyyy-MM format.",
                "location": "query",
                "name": "end_month"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period start month in yyyy-MM format.",
                "location": "query",
                "name": "start_month"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/reports/domestic/summary",
        "desc": null,
        "operation_id": "getDomesticSummaryReport",
        "summary": "Calculate domestic summary",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the summary of a domestic report",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sequence number used to generate report in Large Filer Format. If not specified then '0000000001' will be used.",
                "location": "query",
                "name": "lff_sequence_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Length of report period. 'month', 'quarter' and 'year' values are accepted. Required only if Large Filer Format is requested.",
                "location": "query",
                "name": "period_length"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "MOSS-assigned tax ID - if not provided, merchant's national tax number will be used.",
                "location": "query",
                "name": "tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output format. 'xml', 'csv' and 'lff' (only for Ireland) values are accepted as well",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ISO 2-letter country code which will be used for determining which country is domestic.",
                "location": "query",
                "name": "eu_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period start month in yyyy-MM format.",
                "location": "query",
                "name": "start_month"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats.",
                "location": "query",
                "name": "transformation"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.",
                "location": "query",
                "name": "currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Which date should be used for FX.",
                "location": "query",
                "name": "fx_date_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Period end month in yyyy-MM format.",
                "location": "query",
                "name": "end_month"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/reports/eu/vies",
        "desc": null,
        "operation_id": "getEuViesReport",
        "summary": "Calculate EU VIES report",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of eu vies reports",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of 2-letter country codes",
                "location": "query",
                "name": "country_codes"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Offset. Defaults to 0",
                "location": "query",
                "name": "offset"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output format. 'json' or 'csv'. Default value is 'json'",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Take only refunds issued at or after the date. Format: yyyy-MM-dd",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Take only refunds issued at or before the date. Format: yyyy-MM-dd",
                "location": "query",
                "name": "date_to"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit (no more than 1000, defaults to 100).",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/settlement/detailed_refunds",
        "desc": null,
        "operation_id": "getDetailedRefunds",
        "summary": "Detailed refunds",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of detailed refunds",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Take only refunds issued at or after the date. Format: yyyy-MM-dd",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "MOSS country code, used to determine currency. If ommited, merchant default setting is used.",
                "location": "query",
                "name": "moss_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region key, defaults to EU for backwards compatibility.",
                "location": "query",
                "name": "tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output format. 'csv' value is accepted as well",
                "location": "query",
                "name": "format"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/settlement/refunds",
        "desc": null,
        "operation_id": "getRefunds",
        "summary": "Fetch refunds",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of refunds",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to 'range'.",
                "location": "path",
                "name": "quarter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.",
                "location": "query",
                "name": "end_month"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "MOSS country code, used to determine currency. If ommited, merchant default setting is used.",
                "location": "query",
                "name": "moss_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region key",
                "location": "query",
                "name": "tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.",
                "location": "query",
                "name": "start_month"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/settlement/summary/{quarter}",
        "desc": null,
        "operation_id": "getSettlementSummary",
        "summary": "Fetch summary",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get settlement summary for quarter being << quarter >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to 'order_date' to show only refunds for the transactions in the selected reporting period. Set to 'refund_timestamp' to show refunds that were created in the selected reporting period. Do not set to use the default region's setting.",
                "location": "query",
                "name": "refund_date_kind_override"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region's currency code.",
                "location": "query",
                "name": "currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax entity country code, used to determine currency/region. ",
                "location": "query",
                "name": "tax_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to 'range'.",
                "location": "path",
                "name": "quarter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.",
                "location": "query",
                "name": "tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output format. 'csv' value is accepted as well",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.",
                "location": "query",
                "name": "moss_tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.",
                "location": "query",
                "name": "end_month"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code.",
                "location": "query",
                "name": "moss_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.",
                "location": "query",
                "name": "start_month"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/settlement/{quarter}",
        "desc": null,
        "operation_id": "getSettlement",
        "summary": "Fetch settlement",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get settlement for quarter being << quarter >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date from in yyyy-MM format.",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date to in yyyy-MM format.",
                "location": "query",
                "name": "date_to"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/stats/settlement/by_country",
        "desc": null,
        "operation_id": "getSettlementStatsByCountry",
        "summary": "Settlement by country",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get settlement stats by country",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date from in yyyy-MM format.",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date to in yyyy-MM format.",
                "location": "query",
                "name": "date_to"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/stats/settlement/by_taxation_type",
        "desc": null,
        "operation_id": "getSettlementStatsByTaxationType",
        "summary": "Settlement by tax type",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get settlement stats by taxation type",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date from in yyyy-MM format.",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date to in yyyy-MM format.",
                "location": "query",
                "name": "date_to"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Interval type - day, week, month.",
                "location": "query",
                "name": "interval"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/stats/settlement/daily",
        "desc": null,
        "operation_id": "getDailySettlementStats",
        "summary": "Settlement stats over time",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get daily settlement stats",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date from in yyyy-MM format.",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date to in yyyy-MM format.",
                "location": "query",
                "name": "date_to"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Interval. Accepted values are 'day', 'week' and 'month'.",
                "location": "query",
                "name": "interval"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/stats/transactions",
        "desc": null,
        "operation_id": "getTransactionsStats",
        "summary": "Transaction stats",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of stats of transactions",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date from in yyyy-MM format.",
                "location": "query",
                "name": "date_from"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Global currency code to use for conversion - in addition to country's currency if rate is available. Conversion is indicative and based on most-recent rate from ECB.",
                "location": "query",
                "name": "global_currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date to in yyyy-MM format.",
                "location": "query",
                "name": "date_to"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/stats/transactions/by_country",
        "desc": null,
        "operation_id": "getTransactionsStatsByCountry",
        "summary": "Settlement by country",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of stats of transactions by country",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice address/region",
                "location": "query",
                "name": "invoice_address_region"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Currency code for transaction - e.g. EUR.",
                "location": "query",
                "name": "currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount. Required if total amount or both unit price and quantity are not provided.",
                "location": "query",
                "name": "amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice address/postal_code",
                "location": "query",
                "name": "invoice_address_city"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.",
                "location": "query",
                "name": "buyer_tax_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "query",
                "name": "buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit price.",
                "location": "query",
                "name": "unit_price"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount. Required if amount or both unit price and quantity are not provided.",
                "location": "query",
                "name": "total_amount"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.",
                "location": "query",
                "name": "tax_deducted"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.",
                "location": "query",
                "name": "order_date"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity Defaults to 1.",
                "location": "query",
                "name": "quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product type, according to dictionary /dictionaries/product_types. ",
                "location": "query",
                "name": "product_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "query",
                "name": "billing_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.",
                "location": "query",
                "name": "force_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice address/postal_code",
                "location": "query",
                "name": "invoice_address_postal_code"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/tax/calculate",
        "desc": null,
        "operation_id": "calculateSimpleTax",
        "summary": "Simple tax",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "calculate tax",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom data related to transaction.",
                "location": "body",
                "name": "input.transaction.custom_data"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional information about the transaction - for example if the evidence has been amended.",
                "location": "body",
                "name": "input.transaction.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.forced.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom identifier provided upon transaction creation.",
                "location": "body",
                "name": "input.transaction.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction description.",
                "location": "body",
                "name": "input.transaction.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice date of issue.",
                "location": "body",
                "name": "input.transaction.invoice_date"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (w/o TAX) in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "3-letter ISO currency code.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign exchange rate used in calculation",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.fx_rate"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Sub account identifier.",
                "location": "body",
                "name": "input.transaction.sub_account_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom id, provided by ecommerce software.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_id"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Deducted tax rate, calculated by taxamo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.deducted_tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Generated line key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.line_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax name, calculated by taxamo.  Can be overwritten when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_name"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit price.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_price"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount. Required if amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.total_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity Defaults to 1.",
                "location": "body",
                "name": "input.transaction.transaction_lines.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Product type, according to dictionary /dictionaries/product_types. ",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_type"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax rate, calculated by taxamo. Must be provided when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date of supply in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.transaction_lines.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "External product tax code for a line, for example TIC in US Sales tax.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_tax_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit of measure.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_of_measure"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.",
                "location": "body",
                "name": "input.transaction.transaction_lines.informative"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount. Required if total amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Line contents description.",
                "location": "body",
                "name": "input.transaction.transaction_lines.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal product code, used for invoicing for example.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Currency code for transaction - e.g. EUR.",
                "location": "body",
                "name": "input.transaction.currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "body",
                "name": "input.transaction.buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.",
                "location": "body",
                "name": "input.transaction.invoice_address.freeform_address"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Building number.",
                "location": "body",
                "name": "input.transaction.invoice_address.building_number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": " Street name.",
                "location": "body",
                "name": "input.transaction.invoice_address.street_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Postal code.",
                "location": "body",
                "name": "input.transaction.invoice_address.postal_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Address details - for example apartament number.",
                "location": "body",
                "name": "input.transaction.invoice_address.address_detail"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "2-letter ISO country code.",
                "location": "body",
                "name": "input.transaction.invoice_address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Region, for United States - state code - e.g. NJ.",
                "location": "body",
                "name": "input.transaction.invoice_address.region"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "City name.",
                "location": "body",
                "name": "input.transaction.invoice_address.city"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.",
                "location": "body",
                "name": "input.transaction.tax_deducted"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.billing_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.",
                "location": "body",
                "name": "input.transaction.tax_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice number.",
                "location": "body",
                "name": "input.transaction.invoice_number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.",
                "location": "body",
                "name": "input.transaction.note"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.",
                "location": "body",
                "name": "input.transaction.original_transaction_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.",
                "location": "body",
                "name": "input.transaction.status"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).",
                "location": "body",
                "name": "input.transaction.buyer_ip"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Free-form field for storing customer id.",
                "location": "body",
                "name": "input.transaction.customer_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The exemption certificate number.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.certificate_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser business type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address1"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The value of exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Identifier for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.identifier_for_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Exemption reason",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.reason_for_exemption"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two character state abbreviation.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.state_abbr"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's second address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address2"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_first_name"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if this certificate is valid for single purchase only.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's zip code.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_zip"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If business type is other, a short description must be provided.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type_other_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's last name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_last_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax id type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "State of issue",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.state_of_issue"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax ID",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's state.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_state"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's city.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_city"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchase/order identifier for single purchase.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase_order_identifier"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's title.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice place of issue.",
                "location": "body",
                "name": "input.transaction.invoice_place"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": " Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.",
                "location": "body",
                "name": "input.transaction.buyer_tax_number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.",
                "location": "body",
                "name": "input.transaction.force_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Supply date in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's name - first name and last name or company name.",
                "location": "body",
                "name": "input.transaction.buyer_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Verification token",
                "location": "body",
                "name": "input.transaction.verification_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.",
                "location": "body",
                "name": "input.transaction.order_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's declared email address.",
                "location": "body",
                "name": "input.transaction.buyer_email"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/tax/calculate",
        "desc": null,
        "operation_id": "calculateTax",
        "summary": "Calculate tax",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "calculate tax",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "query",
                "name": "buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "query",
                "name": "billing_country_code"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/tax/location/calculate",
        "desc": null,
        "operation_id": "calculateTaxLocation",
        "summary": "Calculate location",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "calculate tax location",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax number",
                "location": "path",
                "name": "tax_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code.",
                "location": "query",
                "name": "country_code"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/tax/vat_numbers/{tax_number}/validate",
        "desc": null,
        "operation_id": "validateTaxNumber",
        "summary": "Validate VAT number",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "validate vat numbers by tax number being << tax_number >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filtering expression",
                "location": "query",
                "name": "filter_text"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction invoice number.",
                "location": "query",
                "name": "invoice_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Taxamo provided transaction key or custom id",
                "location": "query",
                "name": "key_or_custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Taxamo provided original transaction key",
                "location": "query",
                "name": "original_transaction_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output format - supports 'csv' value for this operation.",
                "location": "query",
                "name": "format"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date to in yyyy-MM-dd format.",
                "location": "query",
                "name": "order_date_to"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date from in yyyy-MM-dd format.",
                "location": "query",
                "name": "order_date_from"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, results are sorted in descending order.",
                "location": "query",
                "name": "sort_reverse"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of of transaction statuses. 'N' - unconfirmed transaction, 'C' - confirmed transaction.",
                "location": "query",
                "name": "statuses"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO currency code.",
                "location": "query",
                "name": "currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.",
                "location": "query",
                "name": "total_amount_less_than"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Offset",
                "location": "query",
                "name": "offset"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.",
                "location": "query",
                "name": "total_amount_greater_than"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma separated list of two letter ISO tax country codes.",
                "location": "query",
                "name": "tax_country_codes"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Return only transactions with a note field set.",
                "location": "query",
                "name": "has_note"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit (no more than 1000, defaults to 100).",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO tax country code.",
                "location": "query",
                "name": "tax_country_code"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions",
        "desc": null,
        "operation_id": "listTransactions",
        "summary": "Browse transactions",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of transactions",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom data related to transaction.",
                "location": "body",
                "name": "input.transaction.custom_data"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional information about the transaction - for example if the evidence has been amended.",
                "location": "body",
                "name": "input.transaction.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.forced.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.used"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom identifier provided upon transaction creation.",
                "location": "body",
                "name": "input.transaction.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction description.",
                "location": "body",
                "name": "input.transaction.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice date of issue.",
                "location": "body",
                "name": "input.transaction.invoice_date"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (w/o TAX) in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "3-letter ISO currency code.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign exchange rate used in calculation",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.fx_rate"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Sub account identifier.",
                "location": "body",
                "name": "input.transaction.sub_account_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom id, provided by ecommerce software.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_id"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Deducted tax rate, calculated by taxamo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.deducted_tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Generated line key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.line_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax name, calculated by taxamo.  Can be overwritten when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_name"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit price.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_price"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount. Required if amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.total_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity Defaults to 1.",
                "location": "body",
                "name": "input.transaction.transaction_lines.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Product type, according to dictionary /dictionaries/product_types. ",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_type"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax rate, calculated by taxamo. Must be provided when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Date of supply in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.transaction_lines.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "External product tax code for a line, for example TIC in US Sales tax.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_tax_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit of measure.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_of_measure"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.",
                "location": "body",
                "name": "input.transaction.transaction_lines.informative"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount. Required if total amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Line contents description.",
                "location": "body",
                "name": "input.transaction.transaction_lines.description"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal product code, used for invoicing for example.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Currency code for transaction - e.g. EUR.",
                "location": "body",
                "name": "input.transaction.currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "body",
                "name": "input.transaction.buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.",
                "location": "body",
                "name": "input.transaction.invoice_address.freeform_address"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Building number.",
                "location": "body",
                "name": "input.transaction.invoice_address.building_number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": " Street name.",
                "location": "body",
                "name": "input.transaction.invoice_address.street_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Postal code.",
                "location": "body",
                "name": "input.transaction.invoice_address.postal_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Address details - for example apartament number.",
                "location": "body",
                "name": "input.transaction.invoice_address.address_detail"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "2-letter ISO country code.",
                "location": "body",
                "name": "input.transaction.invoice_address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Region, for United States - state code - e.g. NJ.",
                "location": "body",
                "name": "input.transaction.invoice_address.region"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "City name.",
                "location": "body",
                "name": "input.transaction.invoice_address.city"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.",
                "location": "body",
                "name": "input.transaction.tax_deducted"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.billing_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.",
                "location": "body",
                "name": "input.transaction.tax_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice number.",
                "location": "body",
                "name": "input.transaction.invoice_number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.",
                "location": "body",
                "name": "input.transaction.note"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.",
                "location": "body",
                "name": "input.transaction.original_transaction_key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.",
                "location": "body",
                "name": "input.transaction.status"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).",
                "location": "body",
                "name": "input.transaction.buyer_ip"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Free-form field for storing customer id.",
                "location": "body",
                "name": "input.transaction.customer_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The exemption certificate number.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.certificate_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser business type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address1"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The value of exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Identifier for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.identifier_for_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Exemption reason",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.reason_for_exemption"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two character state abbreviation.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.state_abbr"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's second address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address2"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_first_name"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if this certificate is valid for single purchase only.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's zip code.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_zip"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "If business type is other, a short description must be provided.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type_other_value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's last name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_last_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax id type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id_type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "State of issue",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.state_of_issue"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax ID",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's state.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_state"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's city.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_city"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchase/order identifier for single purchase.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase_order_identifier"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's title.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_title"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice place of issue.",
                "location": "body",
                "name": "input.transaction.invoice_place"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": " Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.",
                "location": "body",
                "name": "input.transaction.buyer_tax_number"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.",
                "location": "body",
                "name": "input.transaction.force_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Supply date in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's name - first name and last name or company name.",
                "location": "body",
                "name": "input.transaction.buyer_name"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Verification token",
                "location": "body",
                "name": "input.transaction.verification_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.",
                "location": "body",
                "name": "input.transaction.order_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's declared email address.",
                "location": "body",
                "name": "input.transaction.buyer_email"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Use manual mode, bypassing country detection. Only allowed with private token. This flag allows to use original_transaction_key field",
                "location": "body",
                "name": "input.manual_mode"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions",
        "desc": null,
        "operation_id": "createTransaction",
        "summary": "Store transaction",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "create a new transaction",
        "base_path": "/"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key",
                "location": "path",
                "name": "key"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}",
        "desc": null,
        "operation_id": "cancelTransaction",
        "summary": "Delete transaction",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "delete a transaction with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key",
                "location": "path",
                "name": "key"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}",
        "desc": null,
        "operation_id": "getTransaction",
        "summary": "Retrieve transaction data.",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get a transaction by key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom data related to transaction.",
                "location": "body",
                "name": "input.transaction.custom_data"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the 'manual' flag or use false value there and provide customer's ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.",
                "location": "body",
                "name": "input.transaction.manual"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.",
                "location": "body",
                "name": "input.transaction.buyer_tax_number_valid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "To which entity is the tax due.",
                "location": "body",
                "name": "input.transaction.tax_entity_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Currency code for transaction - e.g. EUR.",
                "location": "body",
                "name": "input.transaction.currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "body",
                "name": "input.transaction.buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).",
                "location": "body",
                "name": "input.transaction.buyer_ip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.by_ip.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_ip.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_ip.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_ip.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.by_cc.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_cc.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_cc.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_cc.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.self_declaration.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.self_declaration.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.self_declaration.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_tax_number.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.by_billing.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_billing.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_billing.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_billing.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.guessed_from_ip.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.other_commercially_relevant_info.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.by_token.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.by_token.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.by_token.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_token.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.by_token.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_token.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_token.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.by_token.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_token.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_token.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_token.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.by_token.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_token.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_token.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.by_2003_rules.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.detected.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.detected.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.detected.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.detected.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.detected.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.detected.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.detected.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.detected.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.detected.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.detected.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.detected.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.detected.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.detected.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.detected.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name.",
                "location": "body",
                "name": "input.transaction.countries.forced.name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax region code - e.g. EU, US, NO, JP...",
                "location": "body",
                "name": "input.transaction.countries.forced.tax_region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "VAT number country code. Important for Greece.",
                "location": "body",
                "name": "input.transaction.countries.forced.tax_number_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.forced.codenum"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of phone number calling codes.",
                "location": "body",
                "name": "input.transaction.countries.forced.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.forced.callingCode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.forced.cca2"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if tax calculation supported for this country.",
                "location": "body",
                "name": "input.transaction.countries.forced.tax_supported"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country ISO 3-digit code.",
                "location": "body",
                "name": "input.transaction.countries.forced.ccn3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.forced.cca3"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Three letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.forced.code_long"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "List of currencies.",
                "location": "body",
                "name": "input.transaction.countries.forced.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "input.transaction.countries.forced.currency"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.countries.forced.code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's declared email address.",
                "location": "body",
                "name": "input.transaction.buyer_email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.billing_country_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Refunded tax amount.",
                "location": "body",
                "name": "input.transaction.refunded_tax_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.",
                "location": "body",
                "name": "input.transaction.note"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount of transaction without tax.",
                "location": "body",
                "name": "input.transaction.amount"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if transaction has only informative lines.",
                "location": "body",
                "name": "input.transaction.fully_informative"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id generated by taxamo.",
                "location": "body",
                "name": "input.transaction.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.",
                "location": "body",
                "name": "input.transaction.status"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (w/o TAX) in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "3-letter ISO currency code.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign exchange rate used in calculation",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.fx_rate"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Free-form field for storing customer id.",
                "location": "body",
                "name": "input.transaction.customer_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The exemption certificate number.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.certificate_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser business type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address1"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The value of exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Identifier for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.identifier_for_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Exemption reason",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.reason_for_exemption"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two character state abbreviation.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.state_abbr"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's second address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address2"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_first_name"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if this certificate is valid for single purchase only.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's zip code.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_zip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If business type is other, a short description must be provided.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type_other_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's last name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_last_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax id type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "State of issue",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.state_of_issue"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax ID",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's state.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_state"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's city.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_city"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchase/order identifier for single purchase.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase_order_identifier"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's title.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_title"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice place of issue.",
                "location": "body",
                "name": "input.transaction.invoice_place"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.",
                "location": "body",
                "name": "input.transaction.buyer_tax_number"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How much tax has been deducted.",
                "location": "body",
                "name": "input.transaction.deducted_tax_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's name - first name and last name or company name.",
                "location": "body",
                "name": "input.transaction.buyer_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Date and time of transaction confirmation.",
                "location": "body",
                "name": "input.transaction.confirm_timestamp"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.custom_fields.value"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount refunde (including tax).",
                "location": "body",
                "name": "input.transaction.refunded_total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Supply date in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice date of issue.",
                "location": "body",
                "name": "input.transaction.invoice_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional information about the transaction - for example if the evidence has been amended.",
                "location": "body",
                "name": "input.transaction.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.forced.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.resolved_country_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount of transaction.",
                "location": "body",
                "name": "input.transaction.tax_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction description.",
                "location": "body",
                "name": "input.transaction.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sub account identifier.",
                "location": "body",
                "name": "input.transaction.sub_account_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Verification token",
                "location": "body",
                "name": "input.transaction.verification_token"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice image URL - provided by Taxamo.",
                "location": "body",
                "name": "input.transaction.invoice_image_url"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.",
                "location": "body",
                "name": "input.transaction.order_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.",
                "location": "body",
                "name": "input.transaction.invoice_address.freeform_address"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Building number.",
                "location": "body",
                "name": "input.transaction.invoice_address.building_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Street name.",
                "location": "body",
                "name": "input.transaction.invoice_address.street_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Postal code.",
                "location": "body",
                "name": "input.transaction.invoice_address.postal_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Address details - for example apartament number.",
                "location": "body",
                "name": "input.transaction.invoice_address.address_detail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "2-letter ISO country code.",
                "location": "body",
                "name": "input.transaction.invoice_address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Region, for United States - state code - e.g. NJ.",
                "location": "body",
                "name": "input.transaction.invoice_address.region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "City name.",
                "location": "body",
                "name": "input.transaction.invoice_address.city"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction external key",
                "location": "body",
                "name": "input.transaction.external_key"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.",
                "location": "body",
                "name": "input.transaction.tax_deducted"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount of transaction.",
                "location": "body",
                "name": "input.transaction.total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.",
                "location": "body",
                "name": "input.transaction.tax_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction source software - e.g. plugin",
                "location": "body",
                "name": "input.transaction.source"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice number.",
                "location": "body",
                "name": "input.transaction.invoice_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.",
                "location": "body",
                "name": "input.transaction.original_transaction_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax number service identifier - if available for a given region and the region is enabled.",
                "location": "body",
                "name": "input.transaction.tax_number_service"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction kind: eu-b2c, eu-b2b, domestic, untaxed",
                "location": "body",
                "name": "input.transaction.kind"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Is tax calculation supported for a detected tax location?",
                "location": "body",
                "name": "input.transaction.tax_supported"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Was this transaction created in test mode?",
                "location": "body",
                "name": "input.transaction.test"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Timezone name for tax transaction.",
                "location": "body",
                "name": "input.transaction.tax_timezone"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Generated id.",
                "location": "body",
                "name": "input.transaction.transaction_lines.id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "External product tax code for a line, for example TIC in US Sales tax.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_tax_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Deducted tax rate, calculated by taxamo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.deducted_tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Generated line key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.line_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax name, calculated by taxamo.  Can be overwritten when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit price.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_price"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount. Required if amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.total_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity Defaults to 1.",
                "location": "body",
                "name": "input.transaction.transaction_lines.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product type, according to dictionary /dictionaries/product_types. ",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_type"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax rate, calculated by taxamo. Must be provided when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Date of supply in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.transaction_lines.supply_date"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Refunded tax amount, calculated by taxmo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.refunded_tax_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit of measure.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_of_measure"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (w/o TAX) in designated currency.",
                "location": "body",
                "name": "input.transaction.transaction_lines.additional_currencies.invoice.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "3-letter ISO currency code.",
                "location": "body",
                "name": "input.transaction.transaction_lines.additional_currencies.invoice.currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign exchange rate used in calculation",
                "location": "body",
                "name": "input.transaction.transaction_lines.additional_currencies.invoice.fx_rate"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount in designated currency.",
                "location": "body",
                "name": "input.transaction.transaction_lines.additional_currencies.invoice.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount in designated currency.",
                "location": "body",
                "name": "input.transaction.transaction_lines.additional_currencies.invoice.total_amount"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.",
                "location": "body",
                "name": "input.transaction.transaction_lines.informative"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.value"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount. Required if total amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Deducted tax amount, calculated by taxmo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.deducted_tax_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Line contents description.",
                "location": "body",
                "name": "input.transaction.transaction_lines.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom id, provided by ecommerce software.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal product code, used for invoicing for example.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount, calculated by taxamo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Refunded total amount, calculated by taxmo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.refunded_total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom identifier provided upon transaction creation.",
                "location": "body",
                "name": "input.transaction.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Date and time of transaction creation.",
                "location": "body",
                "name": "input.transaction.create_timestamp"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.",
                "location": "body",
                "name": "input.transaction.force_country_code"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}",
        "desc": null,
        "operation_id": "updateTransaction",
        "summary": "Update transaction",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "update a transaction by key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom data related to transaction.",
                "location": "body",
                "name": "input.transaction.custom_data"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional information about the transaction - for example if the evidence has been amended.",
                "location": "body",
                "name": "input.transaction.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.forced.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom identifier provided upon transaction creation.",
                "location": "body",
                "name": "input.transaction.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction description.",
                "location": "body",
                "name": "input.transaction.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice date of issue.",
                "location": "body",
                "name": "input.transaction.invoice_date"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (w/o TAX) in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "3-letter ISO currency code.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign exchange rate used in calculation",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.fx_rate"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sub account identifier.",
                "location": "body",
                "name": "input.transaction.sub_account_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom id, provided by ecommerce software.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Deducted tax rate, calculated by taxamo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.deducted_tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Generated line key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.line_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax name, calculated by taxamo.  Can be overwritten when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit price.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_price"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount. Required if amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.total_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity Defaults to 1.",
                "location": "body",
                "name": "input.transaction.transaction_lines.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product type, according to dictionary /dictionaries/product_types. ",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_type"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax rate, calculated by taxamo. Must be provided when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Date of supply in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.transaction_lines.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "External product tax code for a line, for example TIC in US Sales tax.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_tax_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit of measure.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_of_measure"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.",
                "location": "body",
                "name": "input.transaction.transaction_lines.informative"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount. Required if total amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Line contents description.",
                "location": "body",
                "name": "input.transaction.transaction_lines.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal product code, used for invoicing for example.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Currency code for transaction - e.g. EUR.",
                "location": "body",
                "name": "input.transaction.currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "body",
                "name": "input.transaction.buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.",
                "location": "body",
                "name": "input.transaction.invoice_address.freeform_address"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Building number.",
                "location": "body",
                "name": "input.transaction.invoice_address.building_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Street name.",
                "location": "body",
                "name": "input.transaction.invoice_address.street_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Postal code.",
                "location": "body",
                "name": "input.transaction.invoice_address.postal_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Address details - for example apartament number.",
                "location": "body",
                "name": "input.transaction.invoice_address.address_detail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "2-letter ISO country code.",
                "location": "body",
                "name": "input.transaction.invoice_address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Region, for United States - state code - e.g. NJ.",
                "location": "body",
                "name": "input.transaction.invoice_address.region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "City name.",
                "location": "body",
                "name": "input.transaction.invoice_address.city"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.",
                "location": "body",
                "name": "input.transaction.tax_deducted"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.billing_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.",
                "location": "body",
                "name": "input.transaction.tax_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice number.",
                "location": "body",
                "name": "input.transaction.invoice_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.",
                "location": "body",
                "name": "input.transaction.note"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.",
                "location": "body",
                "name": "input.transaction.original_transaction_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.",
                "location": "body",
                "name": "input.transaction.status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).",
                "location": "body",
                "name": "input.transaction.buyer_ip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Free-form field for storing customer id.",
                "location": "body",
                "name": "input.transaction.customer_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The exemption certificate number.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.certificate_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser business type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address1"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The value of exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Identifier for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.identifier_for_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Exemption reason",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.reason_for_exemption"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two character state abbreviation.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.state_abbr"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's second address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address2"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_first_name"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if this certificate is valid for single purchase only.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's zip code.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_zip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If business type is other, a short description must be provided.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type_other_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's last name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_last_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax id type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "State of issue",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.state_of_issue"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax ID",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's state.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_state"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's city.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_city"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchase/order identifier for single purchase.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase_order_identifier"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's title.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_title"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice place of issue.",
                "location": "body",
                "name": "input.transaction.invoice_place"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.",
                "location": "body",
                "name": "input.transaction.buyer_tax_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.",
                "location": "body",
                "name": "input.transaction.force_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Supply date in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's name - first name and last name or company name.",
                "location": "body",
                "name": "input.transaction.buyer_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Verification token",
                "location": "body",
                "name": "input.transaction.verification_token"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.",
                "location": "body",
                "name": "input.transaction.order_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's declared email address.",
                "location": "body",
                "name": "input.transaction.buyer_email"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/confirm",
        "desc": null,
        "operation_id": "confirmTransaction",
        "summary": "Confirm transaction",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "confirm a transaction by key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Refund note id.",
                "location": "path",
                "name": "refund_note_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Email to send the credit note/refund note. If not provided, transaction.buyer_email will be used.",
                "location": "body",
                "name": "input.buyer_email"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/invoice/refunds/{refund_note_number}/send_email",
        "desc": null,
        "operation_id": "emailRefund",
        "summary": "Email credit note",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "send email about a refund of a transaction with refund note number being << refund_note_number >> and key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Email to send the invoice. If not provided, transaction.buyer_email will be used.",
                "location": "body",
                "name": "input.buyer_email"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/invoice/send_email",
        "desc": null,
        "operation_id": "emailInvoice",
        "summary": "Email invoice",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "send email about an invoice of a transaction with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Max record count (no more than 100, defaults to 10).",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How many records need to be skipped, defaults to 0.",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/payments",
        "desc": null,
        "operation_id": "listPayments",
        "summary": "List payments",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of payments of a transaction by key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "When the payment was received in yyyy-MM-dd'T'HH:mm:ss(.SSS)'Z' format (24 hour, UTC timezone). Defaults to current date and time.",
                "location": "body",
                "name": "input.payment_timestamp"
            },
            {
                "example": null,
                "type": "number",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount that has been paid. Use negative value to register refunds.",
                "location": "body",
                "name": "input.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional payment information.",
                "location": "body",
                "name": "input.payment_information"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/payments",
        "desc": null,
        "operation_id": "createPayment",
        "summary": "Register a payment",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "create a payment of a transaction with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/payments/capture",
        "desc": null,
        "operation_id": "capturePayment",
        "summary": "Capture payment",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "capture payments of a transaction with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/refunds",
        "desc": null,
        "operation_id": "listRefunds",
        "summary": "Get transaction refunds",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "get the list of refunds of a transaction with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (without tax) to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.",
                "location": "body",
                "name": "input.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Line custom identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.",
                "location": "body",
                "name": "input.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.",
                "location": "body",
                "name": "input.line_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Refund reason, displayed on the credit note.",
                "location": "body",
                "name": "input.refund_reason"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount, including tax, to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.",
                "location": "body",
                "name": "input.total_amount"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/refunds",
        "desc": null,
        "operation_id": "createRefund",
        "summary": "Create a refund",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "create a refund of a transactions with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction key.",
                "location": "path",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom data related to transaction.",
                "location": "body",
                "name": "input.transaction.custom_data"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional information about the transaction - for example if the evidence has been amended.",
                "location": "body",
                "name": "input.transaction.comments"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_cc.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.self_declaration.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_tax_number.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_billing.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_token.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.forced.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.forced.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.forced.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.other_commercially_relevant_info.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.guessed_from_ip.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_2003_rules.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the evidence was used to match the actual country.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.used"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Value provided as evidence - for example IP address.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.evidence_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code that was resolved using this evidence.",
                "location": "body",
                "name": "input.transaction.evidence.by_payment_method.resolved_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom identifier provided upon transaction creation.",
                "location": "body",
                "name": "input.transaction.custom_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction description.",
                "location": "body",
                "name": "input.transaction.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice date of issue.",
                "location": "body",
                "name": "input.transaction.invoice_date"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount (w/o TAX) in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "3-letter ISO currency code.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.currency_code"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign exchange rate used in calculation",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.fx_rate"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.tax_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount in designated currency.",
                "location": "body",
                "name": "input.transaction.additional_currencies.invoice.total_amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sub account identifier.",
                "location": "body",
                "name": "input.transaction.sub_account_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Custom id, provided by ecommerce software.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Deducted tax rate, calculated by taxamo.",
                "location": "body",
                "name": "input.transaction.transaction_lines.deducted_tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Generated line key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.line_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax name, calculated by taxamo.  Can be overwritten when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit price.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_price"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount. Required if amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.total_amount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity Defaults to 1.",
                "location": "body",
                "name": "input.transaction.transaction_lines.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product type, according to dictionary /dictionaries/product_types. ",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_type"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax rate, calculated by taxamo. Must be provided when informative field is true.",
                "location": "body",
                "name": "input.transaction.transaction_lines.tax_rate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Date of supply in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.transaction_lines.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "External product tax code for a line, for example TIC in US Sales tax.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_tax_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unit of measure.",
                "location": "body",
                "name": "input.transaction.transaction_lines.unit_of_measure"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.",
                "location": "body",
                "name": "input.transaction.transaction_lines.informative"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount. Required if total amount or both unit price and quantity are not provided.",
                "location": "body",
                "name": "input.transaction.transaction_lines.amount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Line contents description.",
                "location": "body",
                "name": "input.transaction.transaction_lines.description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.transaction_lines.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal product code, used for invoicing for example.",
                "location": "body",
                "name": "input.transaction.transaction_lines.product_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Currency code for transaction - e.g. EUR.",
                "location": "body",
                "name": "input.transaction.currency_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "First 6 digits of buyer's credit card prefix.",
                "location": "body",
                "name": "input.transaction.buyer_credit_card_prefix"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.",
                "location": "body",
                "name": "input.transaction.invoice_address.freeform_address"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Building number.",
                "location": "body",
                "name": "input.transaction.invoice_address.building_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Street name.",
                "location": "body",
                "name": "input.transaction.invoice_address.street_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Postal code.",
                "location": "body",
                "name": "input.transaction.invoice_address.postal_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Address details - for example apartament number.",
                "location": "body",
                "name": "input.transaction.invoice_address.address_detail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "2-letter ISO country code.",
                "location": "body",
                "name": "input.transaction.invoice_address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Region, for United States - state code - e.g. NJ.",
                "location": "body",
                "name": "input.transaction.invoice_address.region"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "City name.",
                "location": "body",
                "name": "input.transaction.invoice_address.city"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.",
                "location": "body",
                "name": "input.transaction.tax_deducted"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Billing two letter ISO country code.",
                "location": "body",
                "name": "input.transaction.billing_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.",
                "location": "body",
                "name": "input.transaction.tax_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice number.",
                "location": "body",
                "name": "input.transaction.invoice_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.",
                "location": "body",
                "name": "input.transaction.note"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.",
                "location": "body",
                "name": "input.transaction.original_transaction_key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.",
                "location": "body",
                "name": "input.transaction.status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).",
                "location": "body",
                "name": "input.transaction.buyer_ip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Free-form field for storing customer id.",
                "location": "body",
                "name": "input.transaction.customer_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The exemption certificate number.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.certificate_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The reason for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser business type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address1"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The value of exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_exemption_reason_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Identifier for exemption reason.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.identifier_for_exemption_reason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Exemption reason",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.reason_for_exemption"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two character state abbreviation.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.exempt_states.state_abbr"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's second address line.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_address2"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's first name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_first_name"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if this certificate is valid for single purchase only.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's zip code.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_zip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If business type is other, a short description must be provided.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_business_type_other_value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's last name.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_last_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax id type.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id_type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "State of issue",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.state_of_issue"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax ID",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_tax_id.tax_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's state.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_state"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's city.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_city"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchase/order identifier for single purchase.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.single_purchase_order_identifier"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Purchaser's title.",
                "location": "body",
                "name": "input.transaction.tax_data.us_tax_exemption_certificate.detail.purchaser_title"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice place of issue.",
                "location": "body",
                "name": "input.transaction.invoice_place"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": " Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.",
                "location": "body",
                "name": "input.transaction.buyer_tax_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.",
                "location": "body",
                "name": "input.transaction.force_country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Supply date in yyyy-MM-dd format.",
                "location": "body",
                "name": "input.transaction.supply_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's name - first name and last name or company name.",
                "location": "body",
                "name": "input.transaction.buyer_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Verification token",
                "location": "body",
                "name": "input.transaction.verification_token"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.",
                "location": "body",
                "name": "input.transaction.order_date"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's key.",
                "location": "body",
                "name": "input.transaction.custom_fields.key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field's value.",
                "location": "body",
                "name": "input.transaction.custom_fields.value"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Buyer's declared email address.",
                "location": "body",
                "name": "input.transaction.buyer_email"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/transactions/{key}/unconfirm",
        "desc": null,
        "operation_id": "unconfirmTransaction",
        "summary": "Un-confirm the transaction",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "unconfirm a transaction with key being << key >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Two letter ISO country code.",
                "location": "body",
                "name": "input.country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Recipient phone number.",
                "location": "body",
                "name": "input.recipient"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/verification/sms",
        "desc": null,
        "operation_id": "createSMSToken",
        "summary": "Create SMS token",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "create sms token",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "Provided token.",
                "location": "path",
                "name": "token"
            }
        ],
        "response_desc": "OK",
        "url": "//api/v1/verification/sms/{token}",
        "desc": null,
        "operation_id": "verifySMSToken",
        "summary": "Verify SMS token",
        "api": "taxamo.com__1.yaml",
        "canonical_expr": "verify sms token",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "The token you got from <<token>> endpoint",
                "location": "query",
                "name": "token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "You have to use api_member as a scope.",
                "location": "query",
                "name": "clientscope"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Domain name: api.taxrates.io",
                "location": "query",
                "name": "domain"
            }
        ],
        "response_desc": "Success. JSON formatted authorization string in return.",
        "url": "/api/v1/oauth/dialog",
        "desc": "This is the second endpoint you have to hit. When you got your token here you can generate your Bearer authorization header. The header will be used to authorize every API call.",
        "operation_id": null,
        "summary": "Authorization endpoint",
        "api": "taxrates.io__0.0.1.yaml",
        "canonical_expr": "get oauth string",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your Client ID goes here. Check the dashboard if you do not know your Client ID.",
                "location": "query",
                "name": "clientid"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your Client Secret key goes here. Check the dashboard if you do not know your Client Secret key.",
                "location": "query",
                "name": "clientsecret"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "You have to use api_member as a scope.",
                "location": "query",
                "name": "clientscope"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Domain name: api.taxrates.io",
                "location": "query",
                "name": "domain"
            }
        ],
        "response_desc": "Success. JSON formatted string in return.",
        "url": "/api/v1/oauth/token",
        "desc": "This the very first URL you must hit when you want to use taxrates.io API. When you got your Client ID key and Client Secret key you are able to use our API resources.",
        "operation_id": null,
        "summary": "Token generating URL",
        "api": "taxrates.io__0.0.1.yaml",
        "canonical_expr": "get oauth token",
        "base_path": "/api/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Domain name: api.taxrates.io",
                "location": "query",
                "name": "domain"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Street number",
                "location": "body",
                "name": "address.street_number"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Province or state",
                "location": "body",
                "name": "address.state"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Country name",
                "location": "body",
                "name": "address.country"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Street",
                "location": "body",
                "name": "address.street"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "City zip code",
                "location": "body",
                "name": "address.postal_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "City name",
                "location": "body",
                "name": "address.city"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Apartment number if any",
                "location": "body",
                "name": "address.apartment_number"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v1/tax/byaddress",
        "desc": "This endpoint returns tax rates for the country based on the address provided",
        "operation_id": null,
        "summary": "Get tax rates by address",
        "api": "taxrates.io__0.0.1.yaml",
        "canonical_expr": "get the list of tax rates by address",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Country code alpha 2",
                "location": "query",
                "name": "country_code"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Domain name: api.taxrates.io",
                "location": "query",
                "name": "domain"
            }
        ],
        "response_desc": "Success",
        "url": "/api/v1/tax/countrycode",
        "desc": "This endpoint returns all available tax rates for selected country",
        "operation_id": null,
        "summary": "Returns tax rate for selected country",
        "api": "taxrates.io__0.0.1.yaml",
        "canonical_expr": "get the tax rate for country",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Customer's IP address",
                "location": "query",
                "name": "ip"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Domain name: api.taxrates.io",
                "location": "query",
                "name": "domain"
            }
        ],
        "response_desc": "An array of tax rates for VAT, GST & TAX",
        "url": "/api/v1/tax/ip",
        "desc": "This endpoint will return tax rates for country discovered based on Customer's IP address",
        "operation_id": null,
        "summary": "Tax rates by geolocation based on Customer IP address",
        "api": "taxrates.io__0.0.1.yaml",
        "canonical_expr": "get the tax rate by ip",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Domain name: api.taxrates.io",
                "location": "query",
                "name": "domain"
            }
        ],
        "response_desc": "An array of tax rates",
        "url": "/api/v1/tax/rates",
        "desc": "This method returns all tax rates configured on Member's account",
        "operation_id": null,
        "summary": "Get all tax rates",
        "api": "taxrates.io__0.0.1.yaml",
        "canonical_expr": "get the list of tax rates",
        "base_path": "/api/v1"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/Root",
        "desc": null,
        "operation_id": "Root_Get",
        "summary": null,
        "api": "text2data.org__v3.1.yaml",
        "canonical_expr": null,
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.PrivateKey"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.DocumentLanguage"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.DocumentText"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.UserCategoryModelName"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.IsTwitterContent"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.SerializeFormat"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "requestDoc.Secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/Root",
        "desc": null,
        "operation_id": "Root_Post",
        "summary": null,
        "api": "text2data.org__v3.1.yaml",
        "canonical_expr": null,
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Collection id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//collection/{id}",
        "desc": "Returns a single collection",
        "operation_id": "getCollectionById",
        "summary": "Get collection by id",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get a collection by id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Collection id",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results of limit length to displace or skip over",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to displace or skip over",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//collection/{id}/icons",
        "desc": "Returns a list of icons associated with a collection",
        "operation_id": "getCollectionIconsById",
        "summary": "Get collection icons by id",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the list of icons of a collection with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Collection slug",
                "location": "path",
                "name": "slug"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//collection/{slug}",
        "desc": "Returns a single collection",
        "operation_id": "getCollectionBySlug",
        "summary": "Get collection by slug",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get a collection by slug being << slug >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Collection slug",
                "location": "path",
                "name": "slug"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results of limit length to displace or skip over",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to displace or skip over",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//collection/{slug}/icons",
        "desc": "Returns a list of icons associated with a collection",
        "operation_id": "getCollectionIconsBySlug",
        "summary": "Get collection icons by slug",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the list of icons by slug being << slug >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results of limit length to displace or skip over",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to displace or skip over",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//collections",
        "desc": "Return's a list of all collections",
        "operation_id": "getAllCollections",
        "summary": "Get all collections",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the list of collections",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Icon id",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//icon/{id}",
        "desc": "Returns a single icon",
        "operation_id": "getIconById",
        "summary": "Get icon by id",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get an icon by id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Icon term",
                "location": "path",
                "name": "term"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//icon/{term}",
        "desc": "Returns a single icon",
        "operation_id": "getIconByTerm",
        "summary": "Get icon by term",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get an icon by term being << term >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results of limit length to displace or skip over",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to displace or skip over",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//icons/recent_uploads",
        "desc": "Returns list of most recently uploaded icons",
        "operation_id": "getRecentIcons",
        "summary": "Get recent icons",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the list of recent upload icons",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Icon term",
                "location": "path",
                "name": "term"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit results to public domain icons only",
                "location": "query",
                "name": "limit_to_public_domain"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results of limit length to displace or skip over",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to displace or skip over",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//icons/{term}",
        "desc": "Returns a list of icons",
        "operation_id": "getIconsByTerm",
        "summary": "Get icons by term",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get an icon by term being << term >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "No response was specified",
        "url": "//oauth/usage",
        "desc": "Returns current oauth usage and limits",
        "operation_id": "getApiQuotaStatus",
        "summary": "Get api quota status",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the usage status",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "User id",
                "location": "path",
                "name": "user_id"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//user/{user_id}/collections",
        "desc": "Returns a list of collections associated with a user",
        "operation_id": "getUserCollections",
        "summary": "Get user collections",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the list of collections for user id being << user_id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "User id",
                "location": "path",
                "name": "user_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Collection slug",
                "location": "path",
                "name": "slug"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//user/{user_id}/collections/{slug}",
        "desc": "Returns a single collection associated with a user",
        "operation_id": "getUserCollection",
        "summary": "Get user collection",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get a user slug collection by slug being << slug >> and user id being << user_id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results to displace or skip over",
                "location": "query",
                "name": "offset"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of results",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of results of limit length to displace or skip over",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Username",
                "location": "path",
                "name": "username"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//user/{username}/uploads",
        "desc": "Returns a list of uploads associated with a user",
        "operation_id": "getUserUploadsWithUser",
        "summary": "Get user uploads with user",
        "api": "thenounproject.com__1.0.0.yaml",
        "canonical_expr": "get the list of uploads with user with username being << username >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the episode",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "An array of query keys as strings",
        "url": "//episodes/{id}",
        "desc": "Returns the full information for a given episode id. __Deprecation Warning:__ The _director_ key will be deprecated in favor of the new _directors_ key in a future release.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get an episode with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "An array of language objects.",
        "url": "//languages",
        "desc": "All available languages. These language abbreviations can be used in the `Accept-Language` header for routes that return translation records.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of languages",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the language",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "An array of language objects.",
        "url": "//languages/{id}",
        "desc": "Information about a particular language, given the language ID.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get a language with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "Authentication string.apikey"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "Authentication string.userkey"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "Authentication string.username"
            }
        ],
        "response_desc": "Returns a JWT token for use with the rest of the API routes",
        "url": "//login",
        "desc": "Returns a session token to be included in the rest of the requests. Note that API key authentication is required for all subsequent requests and user auth is required for routes in the `User` section",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get a session token",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Returns a new token to use in your subsequent requests",
        "url": "//refresh_token",
        "desc": "Refreshes your current, valid JWT token and returns a new token. Hit this route so that you do not have to post to `/login` with your API key and credentials once you have already been authenticated.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "refresh token",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "IMDB id of the series",
                "location": "query",
                "name": "imdbId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Zap2it ID of the series to search for.",
                "location": "query",
                "name": "zap2itId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the series to search for.",
                "location": "query",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "An array of results that match the provided query.",
        "url": "//search/series",
        "desc": "Allows the user to search for a series based on the following parameters.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "search for a series",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "An array of query keys as strings",
        "url": "//search/series/params",
        "desc": "Returns an array of parameters to query by in the `/search/series` route.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of parameters to query by in the search series route",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "A series record.",
        "url": "//series/{id}",
        "desc": "Returns a series records that contains all information known about a particular series id.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get a series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "An array of actor objects for the given series id.",
        "url": "//series/{id}/actors",
        "desc": "Returns actors for the given series id",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of actors of a series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page of results to fetch. Defaults to page 1 if not provided.",
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "An array of episode objects for the given series id.",
        "url": "//series/{id}/episodes",
        "desc": "All episodes for a given series. Paginated with 100 results per page.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of episodes of a series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Absolute number of the episode",
                "location": "query",
                "name": "absoluteNumber"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "DVD season number",
                "location": "query",
                "name": "dvdSeason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Aired season number",
                "location": "query",
                "name": "airedSeason"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "DVD episode number",
                "location": "query",
                "name": "dvdEpisode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Aired episode number",
                "location": "query",
                "name": "airedEpisode"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page of results to fetch. Defaults to page 1 if not provided.",
                "location": "query",
                "name": "page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "IMDB id of the series",
                "location": "query",
                "name": "imdbId"
            }
        ],
        "response_desc": "An array of basic Episode results that matched the query",
        "url": "//series/{id}/episodes/query",
        "desc": "This route allows the user to query against episodes for the given series. The response is a paginated array of episode records.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "query the episodes of the series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "An array of query keys as strings",
        "url": "//series/{id}/episodes/query/params",
        "desc": "Returns the allowed query keys for the `/series/{id}/episodes/query` route",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of episodes query params for the series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "A summary of the episodes and seasons avaialable for the given series.",
        "url": "//series/{id}/episodes/summary",
        "desc": "Returns a summary of the episodes and seasons available for the series.\n\n__Note__: Season \"0\" is for all episodes that are considered to be specials.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of summary episodes of a series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma-separated list of keys to filter by",
                "location": "query",
                "name": "keys"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "A filtered series record",
        "url": "//series/{id}/filter",
        "desc": "Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the `/series/{id}/filter/params` route.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "filter a series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "A list of keys to filter by",
        "url": "//series/{id}/filter/params",
        "desc": "Returns the list of keys available for the `/series/{id}/filter` route",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of filter params for the series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "A summary of the image types and counts available for the given series.",
        "url": "//series/{id}/images",
        "desc": "Returns a summary of the images for a particular series",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of images of a series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Resolution to filter by (1280x1024, for example)",
                "location": "query",
                "name": "resolution"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subkey for the above query keys. See /series/{id}/images/query/params for more information",
                "location": "query",
                "name": "subKey"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of image you're querying for (fanart, poster, etc. See ../images/query/params for more details).",
                "location": "query",
                "name": "keyType"
            }
        ],
        "response_desc": "An array of basic Episode results that matched the query",
        "url": "//series/{id}/images/query",
        "desc": "Query images for the given series ID.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "query the images of the series with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "An array of query keys as strings",
        "url": "//series/{id}/images/query/params",
        "desc": "Returns the allowed query keys for the `/series/{id}/images/query` route. Contains a parameter record for each unique `keyType`, listing values that will return results.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the query params for the series with id being << id >> id images query route",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Epoch time to start your date range.",
                "location": "query",
                "name": "fromTime"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Epoch time to end your date range. Must be one week from `fromTime`.",
                "location": "query",
                "name": "toTime"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields.",
                "location": "header",
                "name": "Accept-Language"
            }
        ],
        "response_desc": "An array of Update objects that match the given timeframe.",
        "url": "//updated/query",
        "desc": "Returns an array of series that have changed in a maximum of one week blocks since the provided `fromTime`.\n\n\nThe user may specify a `toTime` to grab results for less than a week. Any timespan larger than a week will be reduced down to one week automatically.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of updated series",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "An array of Update objects that match the given timeframe.",
        "url": "//updated/query/params",
        "desc": "Returns an array of valid query keys for the `/updated/query/params` route.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of query keys for the updated query params route",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "User information.",
        "url": "//user",
        "desc": "Returns basic information about the currently authenticated user.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get my information",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "User favorites.",
        "url": "//user/favorites",
        "desc": "Returns an array of favorite series for a given user, will be a blank array if no favorites exist.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of favorites",
        "base_path": "/"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "List of user favorites.",
        "url": "//user/favorites/{id}",
        "desc": "Deletes the given series ID from the user\u2019s favorite\u2019s list and returns the updated list.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "delete a favorite by id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the series",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "List of user favorites.",
        "url": "//user/favorites/{id}",
        "desc": "Adds the supplied series ID to the user\u2019s favorite\u2019s list and returns the updated list.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "replace the favorite with id being << id >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Array of user ratings.",
        "url": "//user/ratings",
        "desc": "Returns an array of ratings for the given user.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of ratings",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Item to query. Can be either 'series', 'episode', or 'banner'",
                "location": "query",
                "name": "itemType"
            }
        ],
        "response_desc": "List of user ratings that match the given query.",
        "url": "//user/ratings/query",
        "desc": "Returns an array of ratings for a given user that match the query.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "query the list of ratings",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "Parameters to use for querying.",
        "url": "//user/ratings/query/params",
        "desc": "Returns a list of query params for use in the `/user/ratings/query` route.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "get the list of query params in my ratings",
        "base_path": "/"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the ratings record that you wish to modify",
                "location": "path",
                "name": "itemId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Item to update. Can be either 'series', 'episode', or 'image'",
                "location": "path",
                "name": "itemType"
            }
        ],
        "response_desc": "Returns OK if the delete was successful",
        "url": "//user/ratings/{itemType}/{itemId}",
        "desc": "This route deletes a given rating of a given type.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "delete an item type of a rating with item type being << itemType >> and item id being << itemId >>",
        "base_path": "/"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The updated rating number",
                "location": "path",
                "name": "itemRating"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the ratings record that you wish to modify",
                "location": "path",
                "name": "itemId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Item to update. Can be either 'series', 'episode', or 'image'",
                "location": "path",
                "name": "itemType"
            }
        ],
        "response_desc": "Update OK if the update was successful",
        "url": "//user/ratings/{itemType}/{itemId}/{itemRating}",
        "desc": "This route updates a given rating of a given type.",
        "operation_id": null,
        "summary": null,
        "api": "thetvdb.com__2.2.0.yaml",
        "canonical_expr": "replace the item rating being << itemRating >> with item id being << itemId >> and item type being << itemType >>",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _groupId_s, they have access to",
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "refresh"
            }
        ],
        "response_desc": "OK",
        "url": "/api/attributes/computed",
        "desc": "Without params, it returns a list of Attributes the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Attributes",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of computed attributes",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String|Number|Boolean",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "expression"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attribute"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            }
        ],
        "response_desc": "OK",
        "url": "/api/attributes/computed",
        "desc": null,
        "operation_id": null,
        "summary": "Create an Attribute",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a computed attribute",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/attributes/computed/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete an Attribute",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a computed attribute by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "String|Number|Boolean",
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "expression"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attribute"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            }
        ],
        "response_desc": "OK",
        "url": "/api/attributes/computed/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update an Attribute",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "update a computed attributes by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            }
        ],
        "response_desc": "OK",
        "url": "/api/calendars",
        "desc": "Without params, it returns a list of Calendars the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Calendars",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of calendars",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "base64 encoded in iCalendar format",
                "location": "body",
                "name": "data"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "atributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/calendars",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Calendar",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a calendar",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/calendars/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Calendar",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a calendar by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "base64 encoded in iCalendar format",
                "location": "body",
                "name": "data"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "atributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/calendars/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Calendar",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "replace a calendar by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _groupId_s, they have access to",
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "refresh"
            }
        ],
        "response_desc": "OK",
        "url": "/api/commands",
        "desc": "Without params, it returns a list of Drivers the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Saved Commands",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of commands",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/commands",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Saved Command",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create the list of commands",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            }
        ],
        "response_desc": "OK",
        "url": "/api/commands/send",
        "desc": "Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support",
        "operation_id": null,
        "summary": "Fetch a list of Saved Commands supported by Device at the moment",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of commands",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            }
        ],
        "response_desc": "Command sent",
        "url": "/api/commands/send",
        "desc": "Dispatch a new command or Saved Command if _body.id_ set",
        "operation_id": null,
        "summary": "Dispatch commands to device",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "send commands",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "textChannel"
            }
        ],
        "response_desc": "OK",
        "url": "/api/commands/types",
        "desc": null,
        "operation_id": null,
        "summary": "Fetch a list of available Commands for the Device or all possible Commands if Device ommited",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of command types",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/commands/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Saved Command",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a command by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/commands/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Saved Command",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "replace a command by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "To fetch one or more devices. Multiple params can be passed like `id=31&id=42`",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "To fetch one or more devices. Multiple params can be passed like `uniqueId=333331&uniqieId=44442`",
                "location": "query",
                "name": "uniqueId"
            }
        ],
        "response_desc": "OK",
        "url": "/api/devices",
        "desc": "Without any params, returns a list of the user's devices",
        "operation_id": null,
        "summary": "Fetch a list of Devices",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of devices",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "model"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "positionId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "contact"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "body",
                "name": "lastUpdate"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "geofenceIds"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "geofenceIds"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "disabled"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "category"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "uniqueId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "phone"
            }
        ],
        "response_desc": "OK",
        "url": "/api/devices",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Device",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a device",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/devices/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Device",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a device by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "model"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "positionId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "contact"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "body",
                "name": "lastUpdate"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "geofenceIds"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "geofenceIds"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "disabled"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "category"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "uniqueId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "phone"
            }
        ],
        "response_desc": "OK",
        "url": "/api/devices/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Device",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "replace a device by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in meters",
                "location": "body",
                "name": "totalDistance"
            }
        ],
        "response_desc": "",
        "url": "/api/devices/{id}/distance",
        "desc": null,
        "operation_id": null,
        "summary": "Update the distance counter of the Device",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "replace the distance of a device by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _groupId_s, they have access to",
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "refresh"
            }
        ],
        "response_desc": "OK",
        "url": "/api/drivers",
        "desc": "Without params, it returns a list of Drivers the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Drivers",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of drivers",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "uniqueId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "atributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/drivers",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Driver",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new driver",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/drivers/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Driver",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a driver by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "uniqueId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "atributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/drivers/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Driver",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "replace a driver by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/events/{id}",
        "desc": null,
        "operation_id": null,
        "summary": null,
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get an event with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _groupId_s, they have access to",
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "refresh"
            }
        ],
        "response_desc": "OK",
        "url": "/api/geofences",
        "desc": "Without params, it returns a list of Geofences the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Geofences",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of geo fences",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "calendarId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "area"
            }
        ],
        "response_desc": "OK",
        "url": "/api/geofences",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Geofence",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new geo fence",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/geofences/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Geofence",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a geo fence by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "calendarId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "description"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "area"
            }
        ],
        "response_desc": "OK",
        "url": "/api/geofences/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Geofence",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "replace a geo fence by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            }
        ],
        "response_desc": "OK",
        "url": "/api/groups",
        "desc": "Without any params, returns a list of the Groups the user belongs to",
        "operation_id": null,
        "summary": "Fetch a list of Groups",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of groups",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/groups",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Group",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new group",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/groups/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Group",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a group by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/groups/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Group",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "update a group by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _groupId_s, they have access to",
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "refresh"
            }
        ],
        "response_desc": "OK",
        "url": "/api/maintenances",
        "desc": "Without params, it returns a list of Maintenances the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Maintenances",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of maintenances",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "period"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "start"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "atributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/maintenances",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Maintenance",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new maintenance",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/maintenances/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Maintenance",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a maintenance by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "period"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "start"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "atributes"
            }
        ],
        "response_desc": "OK",
        "url": "/api/maintenances/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Maintenance",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "update a maintenance by id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with their own _userId_",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admins or managers to fetch all entities",
                "location": "query",
                "name": "all"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _groupId_s, they have access to",
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Standard users can use this only with _deviceId_s, they have access to",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "refresh"
            }
        ],
        "response_desc": "OK",
        "url": "/api/notifications",
        "desc": "Without params, it returns a list of Notifications the user has access to",
        "operation_id": null,
        "summary": "Fetch a list of Notifications",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of notifications",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "always"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "sms"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "calendarId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "mail"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "web"
            }
        ],
        "response_desc": "OK",
        "url": "/api/notifications",
        "desc": null,
        "operation_id": null,
        "summary": "Create a Notification",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new notification",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [],
        "response_desc": "",
        "url": "/api/notifications/test",
        "desc": null,
        "operation_id": null,
        "summary": "Send test notification to current user via Email and SMS",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "test notifications",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/notifications/types",
        "desc": null,
        "operation_id": null,
        "summary": "Fetch a list of available Notification types",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of notification types",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/notifications/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a Notification",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a notification with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "always"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "type"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "sms"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "calendarId"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "mail"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "web"
            }
        ],
        "response_desc": "OK",
        "url": "/api/notifications/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a Notification",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "update a notification with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Driver Id, can be second parameter only",
                "location": "body",
                "name": "driverId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Group Id, can be first parameter or second only in combination with userId",
                "location": "body",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Geofence Id, can be second parameter only",
                "location": "body",
                "name": "geofenceId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Geofence Id, can be second parameter only and only in combination with userId",
                "location": "body",
                "name": "calendarId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "User Id, can be only first parameter",
                "location": "body",
                "name": "userId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Computed Attribute Id, can be second parameter only",
                "location": "body",
                "name": "attributeId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "User Id, can be second parameter only and only in combination with userId",
                "location": "body",
                "name": "managedUserId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Id, can be first parameter or second only in combination with userId",
                "location": "body",
                "name": "deviceId"
            }
        ],
        "response_desc": "",
        "url": "/api/permissions",
        "desc": null,
        "operation_id": null,
        "summary": "Unlink an Object from another Object",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete permissions link",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Driver Id, can be second parameter only",
                "location": "body",
                "name": "driverId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Group Id, can be first parameter or second only in combination with userId",
                "location": "body",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Geofence Id, can be second parameter only",
                "location": "body",
                "name": "geofenceId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Geofence Id, can be second parameter only and only in combination with userId",
                "location": "body",
                "name": "calendarId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "User Id, can be only first parameter",
                "location": "body",
                "name": "userId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Computed Attribute Id, can be second parameter only",
                "location": "body",
                "name": "attributeId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "User Id, can be second parameter only and only in combination with userId",
                "location": "body",
                "name": "managedUserId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Device Id, can be first parameter or second only in combination with userId",
                "location": "body",
                "name": "deviceId"
            }
        ],
        "response_desc": "OK",
        "url": "/api/permissions",
        "desc": null,
        "operation_id": null,
        "summary": "Link an Object to another Object",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new permission",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "To fetch one or more positions. Multiple params can be passed like `id=31&id=42`",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "_deviceId_ is optional, but requires the _from_ and _to_ parameters when used",
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/positions",
        "desc": "Without any params, it returns a list of last known positions for all the user's Devices. _from_ and _to_ fields are not required with _id_",
        "operation_id": null,
        "summary": "Fetches a list of Positions",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of positions",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "% can be used to return events of all types",
                "location": "query",
                "name": "type"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/reports/events",
        "desc": "At least one _deviceId_ or one _groupId_ must be passed",
        "operation_id": null,
        "summary": "Fetch a list of Events within the time period for the Devices or Groups",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of events reports",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/reports/route",
        "desc": "At least one _deviceId_ or one _groupId_ must be passed",
        "operation_id": null,
        "summary": "Fetch a list of Positions within the time period for the Devices or Groups",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of positions",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/reports/stops",
        "desc": "At least one _deviceId_ or one _groupId_ must be passed",
        "operation_id": null,
        "summary": "Fetch a list of ReportStops within the time period for the Devices or Groups",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of report stops",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/reports/summary",
        "desc": "At least one _deviceId_ or one _groupId_ must be passed",
        "operation_id": null,
        "summary": "Fetch a list of ReportSummary within the time period for the Devices or Groups",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of summary reports",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "groupId"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "deviceId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/reports/trips",
        "desc": "At least one _deviceId_ or one _groupId_ must be passed",
        "operation_id": null,
        "summary": "Fetch a list of ReportTrips within the time period for the Devices or Groups",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of trip reports",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/api/server",
        "desc": null,
        "operation_id": null,
        "summary": "Fetch Server information",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get server information",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "map"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "registration"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "bingKey"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceReadonly"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "zoom"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "version"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "readonly"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "forceSettings"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "coordinateFormat"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "twelveHourFormat"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "limitCommands"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "latitude"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "longitude"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "mapUrl"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "poiLayer"
            }
        ],
        "response_desc": "OK",
        "url": "/api/server",
        "desc": null,
        "operation_id": null,
        "summary": "Update Server information",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "update server information",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [],
        "response_desc": "",
        "url": "/api/session",
        "desc": null,
        "operation_id": null,
        "summary": "Close the Session",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a session",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "query",
                "name": "token"
            }
        ],
        "response_desc": "OK",
        "url": "/api/session",
        "desc": null,
        "operation_id": null,
        "summary": "Fetch Session information",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get session information",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "formData",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "formData",
                "name": "email"
            }
        ],
        "response_desc": "OK",
        "url": "/api/session",
        "desc": null,
        "operation_id": null,
        "summary": "Create a new Session",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new session",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "to"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "query",
                "name": "from"
            }
        ],
        "response_desc": "OK",
        "url": "/api/statistics",
        "desc": null,
        "operation_id": null,
        "summary": "Fetch server Statistics",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get server statistics",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Can only be used by admin or manager users",
                "location": "query",
                "name": "userId"
            }
        ],
        "response_desc": "OK",
        "url": "/api/users",
        "desc": null,
        "operation_id": null,
        "summary": "Fetch a list of Users",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "get the list of users",
        "base_path": "/api"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "body",
                "name": "expirationTime"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "map"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "administrator"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceReadonly"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "zoom"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "body",
                "name": "token"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "userLimit"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "readonly"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "coordinateFormat"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceLimit"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "email"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "twelveHourFormat"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "limitCommands"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "latitude"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "disabled"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "longitude"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "poiLayer"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "password"
            }
        ],
        "response_desc": "OK",
        "url": "/api/users",
        "desc": null,
        "operation_id": null,
        "summary": "Create a User",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "create a new user",
        "base_path": "/api"
    },
    {
        "verb": "delete",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/users/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Delete a User",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "delete a user with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "put",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "in IS0 8601 format. eg. `1963-11-22T18:30:00Z`",
                "location": "body",
                "name": "expirationTime"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "map"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "administrator"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceReadonly"
            },
            {
                "example": null,
                "type": "object",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "attributes"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "zoom"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": true,
                "desc": null,
                "location": "body",
                "name": "token"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "userLimit"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "readonly"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "coordinateFormat"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "deviceLimit"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "email"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "twelveHourFormat"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "limitCommands"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "latitude"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "disabled"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "longitude"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "poiLayer"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "body",
                "name": "password"
            }
        ],
        "response_desc": "OK",
        "url": "/api/users/{id}",
        "desc": null,
        "operation_id": null,
        "summary": "Update a User",
        "api": "traccar.org__4.0.yaml",
        "canonical_expr": "update a user with id being << id >>",
        "base_path": "/api"
    },
    {
        "verb": "get",
        "params": [],
        "response_desc": "OK",
        "url": "/v2/airports/",
        "desc": "Retrieve all airports.",
        "operation_id": "58d8bcb7a9e6240e200cff24",
        "summary": "All airports",
        "api": "transavia.com__1.0.yaml",
        "canonical_expr": "get the list of airports",
        "base_path": "/v2/airports"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Comma-separated list of country codes (2-character ISO 3166-1). More than 3 country codes is not allowed.",
                "location": "path",
                "name": "countryCode"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/airports/countrycode/{countryCode}",
        "desc": "Retrieve airports by country code.",
        "operation_id": "58d8bcb8a9e6240e200cff26",
        "summary": "Airport(s) by country code.",
        "api": "transavia.com__1.0.yaml",
        "canonical_expr": "get the list of airports by country code being << countryCode >>",
        "base_path": "/v2/airports"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied.",
                "location": "query",
                "name": "maxDistanceInKm"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the result, lower than 0 is not allowed. If not set, the result is not limited.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Longitude in decimals, lower than -180.0 and higher than 180.0 is not allowed.",
                "location": "query",
                "name": "longitude"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Latitude in decimals, lower than -90.0 and higher than 90.0 is not allowed.",
                "location": "query",
                "name": "latitude"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/airports/nearest",
        "desc": "Retrieve nearest airports by geo coordinates (latitude/longitude).",
        "operation_id": "58d8bcb8a9e6240e200cff27",
        "summary": "Nearest airport(s) by geo coordinates.",
        "api": "transavia.com__1.0.yaml",
        "canonical_expr": "get the list of nearest airports",
        "base_path": "/v2/airports"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied.",
                "location": "query",
                "name": "maxDistanceInKm"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Airport (IATA code) to search nearest airports for.",
                "location": "path",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limits the result, lower than 0 is not allowed. If not set, the result is not limited.",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/airports/nearest/{id}",
        "desc": "Retrieve nearest airports by station id.",
        "operation_id": "58d8bcb8a9e6240e200cff28",
        "summary": "Nearest airport(s) by airport id.",
        "api": "transavia.com__1.0.yaml",
        "canonical_expr": "get the nearest airport with id being << id >>",
        "base_path": "/v2/airports"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Airport code (3-character IATA code).",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "OK",
        "url": "/v2/airports/{id}",
        "desc": "Retrieve airport by id.",
        "operation_id": "58d8bcb7a9e6240e200cff25",
        "summary": "Airport by id.",
        "api": "transavia.com__1.0.yaml",
        "canonical_expr": "get an airport with id being << id >>",
        "base_path": "/v2/airports"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "To include any errors detected when importing this feed in the response, specify a valud of `1`.",
                "location": "query",
                "name": "err"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the `/getFeeds` call to discover feed IDs.",
                "location": "query",
                "name": "feed"
            },
            {
                "example": "YOUR_API_KEY",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your personal API key, used for authentication.",
                "location": "query",
                "name": "key"
            },
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "To include any warnings detected when importing this feed in the response, specify a valud of `1`.",
                "location": "query",
                "name": "warn"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The maximum number of results to return..",
                "location": "query",
                "name": "limit"
            },
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The page number of results to return. For example, if you specify a `page` of `2` with a `limit` of 10, then results 11-20 are returned.---The number of pages available is included in the response.---",
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "The response for a valid `/getFeedVersions` API call.",
        "url": "/v1/getFeedVersions",
        "desc": "This API call allows you to easily see every single feed update in the TranstiFeeds.com system. Since this can be quite\nlong, it's also possible to filter this list by a single feed ID.\n",
        "operation_id": "getFeedVersions",
        "summary": "Retrieve a list of versions of specified (or all) feeds.",
        "api": "transitfeeds.com__1.0.0.yaml",
        "canonical_expr": "get the feed versions",
        "base_path": "/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The type of feeds to return. If unspecified, feeds of all types are returned.",
                "location": "query",
                "name": "type"
            },
            {
                "example": "YOUR_API_KEY",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your personal API key, used for authentication.",
                "location": "query",
                "name": "key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "This is the unique ID of a location. If specified, feeds will only be returned that belong to this location---(and perhaps sub-locations too, depending on the `descendants` value). You can use the `/getLocations` API---endpoint to determine location IDs.---",
                "location": "query",
                "name": "location"
            },
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If a location is specified in `location`, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If `0`, then feeds must be assigned directly to the specified location.",
                "location": "query",
                "name": "descendants"
            },
            {
                "example": 1,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The page number of results to return. For example, if you specify a `page` of `2` with a `limit` of 10, then results 11-20 are returned.---The number of pages available is included in the response.---",
                "location": "query",
                "name": "page"
            },
            {
                "example": 10,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The maximum number of results to return..",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "The response for a valid `/getFeeds` API call.",
        "url": "/v1/getFeeds",
        "desc": "Used this API to retrieve a list of feeds in the system. Doing so can be usedful to discover feed IDs that\ncan be used in other API calls.\n",
        "operation_id": "getFeeds",
        "summary": "Retrieve a list of feeds.",
        "api": "transitfeeds.com__1.0.0.yaml",
        "canonical_expr": "get the list of feeds",
        "base_path": "/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "YOUR_API_KEY",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your personal API key, used for authentication.",
                "location": "query",
                "name": "key"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the feed to retrieve the latest feed version for. You can use the `/getFeeds` call to discover feed IDs.",
                "location": "query",
                "name": "feed"
            }
        ],
        "response_desc": "The response for a `/getLatestFeedVersion` API call that includes invalid request parameters.",
        "url": "/v1/getLatestFeedVersion",
        "desc": "Once you have used `/getFeeds` to discover a feed's URL, you can use this endpoint to download its latest version from TranstiFeeds.\nIt will be unmodified in the original format from the provider.\n",
        "operation_id": "getLatestFeedVersion",
        "summary": "Retrieve the download URL for the latest version of a feed.",
        "api": "transitfeeds.com__1.0.0.yaml",
        "canonical_expr": "get latest feed version",
        "base_path": "/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "YOUR_API_KEY",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Your personal API key, used for authentication.",
                "location": "query",
                "name": "key"
            }
        ],
        "response_desc": "The response for a valid `getLocations` API call.",
        "url": "/v1/getLocations",
        "desc": "Retrieve a list of locations. Each location (except for the root) has a parent location, and each\nlocation has zero or more child locations. This hierarchy is generally structured so countries contain\nstates, states contain cities (although this typically depends on the country).\n",
        "operation_id": "getLocations",
        "summary": "Retrieve a list of locations.",
        "api": "transitfeeds.com__1.0.0.yaml",
        "canonical_expr": "get the list of locations",
        "base_path": "/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Specifies the type of file to return. Valid Values: NEWLY_LISTED - Returns the file containing all items that were listed on the day specified by the date parameter in the category specified by the category_id parameter. The items will be Good 'Til Cancelled and non-Good 'Til Cancelled items. If the item is a non-Good 'Til Cancelled item, the item's end date will be returned in the itemEndDate column. /item?feed_scope=NEWLY_LISTED&amp;category_id=15032&amp;date=20170925 ALL_ACTIVE (bootstrap) - Returns the file containing all the 'Good 'Til Cancelled' items in the category specified by the category_id parameter. /item?feed_scope=ALL_ACTIVE&amp;category_id=15032&amp;date=20170925 Note: This file type is generated only on request. After the file is generated, you use this method and feed_scope to download the file.",
                "location": "query",
                "name": "feed_scope"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplaces, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category",
                "location": "query",
                "name": "category_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB",
                "location": "header",
                "name": "Range"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the feed file you want. This is needed only when feed_scope=NEWLY_LISTED. If you specify a date and feed_scope=ALL_ACTIVE, the date is ignored and the latest file is returned. The date of the file is returned in the Last-Modified response header. The Item feed files are generated every day and there are always 14 daily feed files available. Important: The daily generated files are available each day after 9AM MST (US Mountain Standard Time), which is -7 hours UTC time. There is a 48 hour latency when generating the files, however it can take up to 72 hours for some of the larger files. This means you can download the file for July 10th on July 12 after 9AM MST. Format: yyyyMMdd Requirements: Must be within 3-14 days in the past Required when feed_scope=NEWLY_LISTED",
                "location": "query",
                "name": "date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.",
                "location": "header",
                "name": "X-EBAY-C-MARKETPLACE-ID"
            }
        ],
        "response_desc": "Partial Content",
        "url": "/buy/feed/v1_beta/item",
        "desc": "This call lets you download a daily TSV_GZIP (tab separated value gzip) Item feed file. There are two Item feed files for every top-level (L1) category, including all its child categories: A file generated each day containing all the newly listed items for a specific category and date (feed_scope = NEWLY_LISTED) A file containing all the items in a specific category (feed_scope = ALL_ACTIVE) For each item, the primary item details are returned, except for the item description. The description of each item is excluded because these can be huge and items in an item group (an item with variations, such as size and color) can share the same description. The item descriptions are returned in a separate Item Description gzip feed file by the getItemDescriptionFeed call. To store all the item details provided by the Feed API, you would use the getItemFeed and getItemDescriptionFeed calls with the same parameters. For example: &nbsp;&nbsp;&nbsp; /item?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 &nbsp;&nbsp;&nbsp; /item_description?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 Items returned in the feed file All items in the file are: In new condition Fixed price (Buy It Now); no auctions From eBay trusted sellers Note: When curating the items returned, be sure to code as if these filters are not applied as they can be changed or removed in the future. The feed file contains all the items from all the child categories of the specified category. The first line of the file is the header, which labels the columns and indicates the order of the values on each line. Each header is described in the Response fields section. URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Downloading feed files Item feed files are binary gzip files. If the file is larger than 100 MB, the download must be streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The Content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.",
        "operation_id": "getItemFeed",
        "summary": null,
        "api": "ebay.com__buy-feed__v1_beta.9.0.yaml",
        "canonical_expr": "get item feed",
        "base_path": "/buy/feed/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Specifies the type of file to return. Valid Values: NEWLY_LISTED - Returns the file containing all items that were listed on the day specified by the date parameter in the category specified by the category_id parameter. The items will be Good 'Til Cancelled and non-Good 'Til Cancelled items. If the item is a non-Good 'Til Cancelled item, the item's end date will be returned in the itemEndDate column. /item_description?feed_scope=NEWLY_LISTED&amp;category_id=15032&amp;date=20170925 ALL_ACTIVE (bootstrap) - Returns the file containing all the 'Good 'Til Cancelled' items in the category specified by the category_id parameter. /item_description?feed_scope=ALL_ACTIVE&amp;category_id=15032&amp;date=20170925 Note: This file type is generated only on request. After the file is generated, you use this method and feed_scope to download the file.",
                "location": "query",
                "name": "feed_scope"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplace, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category",
                "location": "query",
                "name": "category_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB",
                "location": "header",
                "name": "Range"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the feed file you want. This is needed only when feed_scope=NEWLY_LISTED. If you specify a date and feed_scope=ALL_ACTIVE, the date is ignored and the latest file is returned. The date of the file is returned in the Last-Modified response header. The Description feed files are generated every day and there are always 14 daily feed files available. There is a 48 hour latency when generating the files, however it can take up to 72 hours for some of the larger files. This means on July 10, the latest feed file you can download is July 8. In other words, if you wanted the file generated on July 10th, you would need to wait until July 12th. Note: The generated files are stored using MST (US Mountain Standard Time), which is -7 hours UTC time. Format: yyyyMMdd Requirements: Must be within 3-14 days in the past Required when feed_scope=NEWLY_LISTED",
                "location": "query",
                "name": "date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.",
                "location": "header",
                "name": "X-EBAY-C-MARKETPLACE-ID"
            }
        ],
        "response_desc": "Partial Content",
        "url": "/buy/feed/v1_beta/item_description",
        "desc": "This call lets you download a daily TSV_GZIP (tab separated value gzip) Item Description feed file. There are two Item Description feed files generated for every top-level (L1) category, including all its child categories: A file generated each day containing the item descriptions for all the newly listed items for a specific category and date (feed_scope = NEWLY_LISTED) A file containing the item descriptions for all the items in a specific category (feed_scope = ALL_ACTIVE) To store all the item details provided by the Feed API, you would use the getItemFeed and getItemDescriptionFeed calls with the same parameters. For example: &nbsp;&nbsp;&nbsp; /item?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 &nbsp;&nbsp;&nbsp; /item_description?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 Combining the Description and Item feed files The Description feed file contains only the itemId, itemGroupId and description columns. The value of the description column is BASE64 encoded for security reasons. For each row, there will be values in either itemId or itemGroupId. The description column will always contain a value. itemGroupId - The value in this column is the ID of an item group (an item with variations, such as size and color) where the items in the group share the same description. Even though the itemGroupId represents more than one item, the itemGroupId and description are returned only once for the entire group. In this case, there will be values in the itemGroupId and description columns. You match the value of itemGroupId from the Description feed file with the value of primaryItemGroupId from the Item feed file for the same day and category. itemId - The value in this column is the ID of an item that is not part of an item group or (in rare cases) the item is part of an item group but does not share a description with other items in the group. In this case, there will be values in the itemId and description columns. You match the value of itemId from the Description feed file with the value of itemId from the Item feed file for the same day and category. The file will contain the descriptions for all the items or item groups from all the child categories of the category. The first line of the file is the header, which labels the columns and indicates the order of the values on each line. Each column is described in the Response fields section. URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Downloading feed files Description feed files are very large so the gzip file, which is binary, is streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The Content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.",
        "operation_id": "getItemDescriptionFeed",
        "summary": null,
        "api": "ebay.com__buy-feed__v1_beta.9.0.yaml",
        "canonical_expr": "get item description feed",
        "base_path": "/buy/feed/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Specifies the type of file to return. Valid Values: NEWLY_LISTED - Returns the file containing the item group information for items in the NEWLY_LISTED Item feed file that were associated with an item group. The items in this type of Item feed file are items that were listed on the day specified by the date parameter in the category specified by the category_id parameter. The items will be Good 'Til Cancelled and non-Good 'Til Cancelled items. If the item is a non-Good 'Til Cancelled item, the item's end date will be returned in the itemEndDate column. /item_group?feed_scope=NEWLY_LISTED&amp;category_id=15032&amp;date=20170925 ALL_ACTIVE (bootstrap) - Returns the file containing the item group information for items in the ALL_ACTIVE Item feed file that were associated with an item group. The items in this type of Item feed file are all the 'Good 'Til Cancelled' items in the category specified by the category_id parameter. /item_group?feed_scope=ALL_ACTIVE&amp;category_id=15032&amp;date=20170925 Note: This file type is generated only on request. After the file is generated, you use this method and feed_scope to download the file.",
                "location": "query",
                "name": "feed_scope"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplaces, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category",
                "location": "query",
                "name": "category_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB",
                "location": "header",
                "name": "Range"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the feed file you want. This is needed only when feed_scope=NEWLY_LISTED. If you specify a date and feed_scope=ALL_ACTIVE, the date is ignored and the latest file is returned. The date of the file is returned in the Last-Modified response header. The Item Group feed files are generated every day and there are always 14 daily feed files available. There is a 48 hour latency when generating the files. This means on July 10, the latest feed file you can download is July 8. In other words, if you wanted the file generated on July 10th, you would need to wait until July 12th. Note: The generated files are stored using MST (US Mountain Standard Time), which is -7 hours UTC time. Format: yyyyMMdd Requirement: Requirements: Must be within 3-14 days in the past Required when feed_scope=NEWLY_LISTED",
                "location": "query",
                "name": "date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.",
                "location": "header",
                "name": "X-EBAY-C-MARKETPLACE-ID"
            }
        ],
        "response_desc": "Partial Content",
        "url": "/buy/feed/v1_beta/item_group",
        "desc": "This call lets you download a daily TSV_GZIP (tab separated value gzip) Item Group feed file. There are two Item Group feed files for every top-level (L1) category, including all its child categories: A file generated each day containing item group information for all the newly listed items for a specific category and date (feed_scope = NEWLY_LISTED) A file containing item group information for all the items in a specific category (feed_scope = ALL_ACTIVE) The service reads each of the Item feed files and if an item in the feed file has a primaryItemGroupId value, which indicates the item is part of an item group, the service uses that value to return the item group (parent item) information for that item in the corresponding NEWLY_LISTED or ALL_ACTIVE Item Group feed file. This information includes a list of the aspect (variation) names for this item group. For example, if the item was a shirt some of the variation names could be Size, Color, etc., which are returned in the variesByLocalizedAspects column. (An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.) The first line in any feed file is the header, which labels the columns and indicates the order of the values on each line. Each header is described in the Response fields section. Combining the Item Group and Item feed files The Item Group feed file contains details about the item group (parent item), including the item group ID itemGroupId. You match the value of itemGroupId from the Item Group feed file with the value of primaryItemGroupId from the Item feed file for the same day and category. Downloading feed files URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Item Group feed files are binary gzip files. If the file is larger than 100 MB, the download must be streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always only a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.",
        "operation_id": "getItemGroupFeed",
        "summary": null,
        "api": "ebay.com__buy-feed__v1_beta.9.0.yaml",
        "canonical_expr": "get item group feed",
        "base_path": "/buy/feed/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplace, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category",
                "location": "query",
                "name": "category_id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB",
                "location": "header",
                "name": "Range"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The hour of the incremental feed file you want, for a particular day. There are always 14 days of Hourly Snapshot feed files available. If you specify that you want the 9AM file for July 15, 2017 (2017-07-15T09:00:00.000Z), the data in the feed file will be items that changed after 9AM on July 15, 2017. Restrictions: Files are generated on the hour, so minutes and seconds are always zeros. &nbsp;&nbsp;&nbsp;(2017-07-12T09:00:00.000Z) Format: UTC format (yyyy-MM-ddThh:00:00.000Z)",
                "location": "query",
                "name": "snapshot_date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.",
                "location": "header",
                "name": "X-EBAY-C-MARKETPLACE-ID"
            }
        ],
        "response_desc": "Partial Content",
        "url": "/buy/feed/v1_beta/item_snapshot",
        "desc": "The Hourly Snapshot feed file is generated each hour every day for all categories. This call lets you download an Hourly Snapshot TSV_GZIP (tab separated value gzip) feed file containing the details of all the items that have changed within the specified day and hour for a specific category. This means to generate the 8AM file of items that have changed from 8AM and 8:59AM, the service starts at 9AM. You can retrieve the 8AM snapshot file at 10AM. You can use the response from this call to update the item details of items stored in your database. By comparing the value of itemSnapshotDate for the same item you will be able to tell which information is the latest. Note: Currently, hourly updates for descriptions are not supported. URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Downloading feed files Hourly snapshot feed files are binary gzip files. If the file is larger than 100 MB, the download must be streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The Content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.",
        "operation_id": "getItemSnapshotFeed",
        "summary": null,
        "api": "ebay.com__buy-feed__v1_beta.9.0.yaml",
        "canonical_expr": "get item snapshot feed",
        "base_path": "/buy/feed/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "This query parameter limits the products returned to a specific eBay category. The list of eBay category Ids is not published and category Ids are not all the same across all the eBay maketplace. You can use the following techniques to find a category by site. Use the Category Changes page. Use the Taxonomy API. For details see Categories for Buy API Calls. Use the Browse API and submit the following call to get the dominantCategoryId for an item. /buy/browse/v1/item_summary/search?q=keyword&amp;fieldgroups=ASPECT_REFINEMENTS Maximum: 1 Required: 1",
                "location": "query",
                "name": "category_id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The aspect name/value pairs used to further refine product results. For example: &nbsp;&nbsp;&nbsp;/buy/marketing/v1_beta/merchandised_product?category_id=31388&amp;metric_name=BEST_SELLING&amp;aspect_filter=Brand:Canon You can use the Browse API search call with the fieldgroups=ASPECT_REFINEMENTS field to return the aspects of a product. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/marketing/types/MarketingAspectFilter.html",
                "location": "query",
                "name": "aspect_filter"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "This value filters the result set by the specified metric. Only products in this metric are returned. Currently, the only metric supported is BEST_SELLING. Default: BEST_SELLING Maximum: 1 Required: 1",
                "location": "query",
                "name": "metric_name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "This value specifies the maximum number of products to return in a result set. Note: Maximum value means the call will return up to that many products per set, but it can be less than this value. If the number of products found is less than this value, the call will return all of the products matching the criteria. Default: 8 Maximum: 100",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "OK",
        "url": "/buy/marketing/v1_beta/merchandised_product",
        "desc": "This call returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product Id (EPID), title, and user reviews and ratings for the product. You can use the epid returned by this call in the Browse API search call to retrieve items for this product. Restrictions For a list of supported sites and other restrictions, see API Restrictions.",
        "operation_id": "getMerchandisedProducts",
        "summary": null,
        "api": "ebay.com__buy-marketing__v1_beta.1.0.yaml",
        "canonical_expr": "get merchandised products",
        "base_path": "/buy/marketing/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "epid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "gtin"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The manufacturer part number of the product. Restriction: This must be used along with brand. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "mpn"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "brand"
            }
        ],
        "response_desc": "OK",
        "url": "/buy/marketing/v1_beta/merchandised_product/get_also_bought_products",
        "desc": "This call returns products that were also bought when shoppers bought the product specified in the request. Showing 'also bought' products inspires up-selling and cross-selling. You specify the product by one of the following. epid (eBay Product Id) gtin (Global Trade Item Number) brand (brand name such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Maximum: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.",
        "operation_id": "getAlsoBoughtByProduct",
        "summary": null,
        "api": "ebay.com__buy-marketing__v1_beta.1.0.yaml",
        "canonical_expr": "get also bought products",
        "base_path": "/buy/marketing/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "epid"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "gtin"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The manufacturer part number of the product. Restriction: This must be used along with brand.",
                "location": "query",
                "name": "mpn"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.",
                "location": "query",
                "name": "brand"
            }
        ],
        "response_desc": "OK",
        "url": "/buy/marketing/v1_beta/merchandised_product/get_also_viewed_products",
        "desc": "This call returns products that were also viewed when shoppers viewed the product specified in the request. Showing 'also viewed' products encourages up-selling and cross-selling. You specify the product by one of the following. epid (eBay Product Id) gtin (Global Trade Item Number) brand (brand name such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Maximum: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.",
        "operation_id": "getAlsoViewedByProduct",
        "summary": null,
        "api": "ebay.com__buy-marketing__v1_beta.1.0.yaml",
        "canonical_expr": "get also viewed products",
        "base_path": "/buy/marketing/v1_beta"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A comma-separated list of the unique identifiers of the orders to retrieve (maximum 50). These values were originally generated by eBay as a result of the buyer's checkout process; for example, 170009092860-9849164007!140000000544476. These values are also returned in the orders.orderId field by invoking this call with filter parameters. Note: If the orderIds parameter is included in the request, all other query parameters will be ignored.",
                "location": "query",
                "name": "orderIds"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The first order to return based on its position in the collection of orders. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves orders 11 thru 20 from the resulting collection of orders. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. If the orderIds parameter is included in the request, this parameter will be ignored. Default: 0 (zero)",
                "location": "query",
                "name": "offset"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "One or more comma-separated criteria for narrowing down the collection of orders returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. Note: Currently, filter returns data from only the last 90 days. If the orderIds parameter is included in the request, the filter parameter will be ignored.The available criteria are as follows: creationdate The time period during which qualifying orders were created (the orders.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock.For example: creationdate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationdate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. lastmodifieddate The time period during which qualifying orders were last modified (the orders.modifiedDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock.For example: lastmodifieddate:[2016-05-15T08:25:43.511Z..] identifies orders modified on or after the given timestamp. lastmodifieddate:[2016-05-15T08:25:43.511Z..2016-05-31T08:25:43.511Z] identifies orders modified between the given timestamps, inclusive.Note: If creationdate and lastmodifieddate are both included, only creationdate is used. orderfulfillmentstatus The degree to which qualifying orders have been shipped (the orders.orderFulfillmentStatus field). In the URI, this is expressed as one of the following value combinations: orderfulfillmentstatus:{NOT_STARTED|IN_PROGRESS} specifies orders for which no shipping fulfillments have been started, plus orders for which at least one shipping fulfillment has been started but not completed. orderfulfillmentstatus:{FULFILLED|IN_PROGRESS} specifies orders for which all shipping fulfillments have been completed, plus orders for which at least one shipping fulfillment has been started but not completed.Note: The values NOT_STARTED, IN_PROGRESS, and FULFILLED can be used in various combinations, but only the combinations shown here are currently supported.Here is an example of a getOrders call using all of these filters: GET https://api.ebay.com/sell/v1/order? filter=creationdate:%5B2016-03-21T08:25:43.511Z..2016-04-21T08:25:43.511Z%5D, lastmodifieddate:%5B2016-05-15T08:25:43.511Z..%5D, orderfulfillmentstatus:%7BNOT_STARTED%7CIN_PROGRESS%7D Note: This call requires that certain special characters in the URI query string be percent-encoded: &nbsp;&nbsp;&nbsp;&nbsp;[ = %5B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;] = %5D &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ = %7B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| = %7C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} = %7D This query filter example uses these codes. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/FilterField.html",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The number of orders to return in the current result set. Use this parameter in conjunction with the offset parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves orders 11 thru 20 from the resulting collection of orders. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. If the orderIds parameter is included in the request, this parameter will be ignored. Maximum: 1000 Default: 50",
                "location": "query",
                "name": "limit"
            }
        ],
        "response_desc": "Success",
        "url": "/sell/fulfillment/v1/order",
        "desc": "Use this call to search for and retrieve one or more orders based on their creation date, last modification date, or fulfillment status using the filter parameter. You can alternatively specify a list of orders using the orderIds parameter. The returned Order objects contain information you can use to create and process fulfillments, including: Information about the buyer and seller Information about the order's line items The plans for packaging, addressing and shipping the order The status of payment, packaging, addressing, and shipping the order A summary of monetary amounts specific to the order such as pricing, payments, and shipping costs Important: In this call, the cancelStatus.cancelRequests array is returned but is always empty. Use the getOrder call instead, which returns this array fully populated with information about any cancellation requests.",
        "operation_id": "getOrders",
        "summary": "Get Orders",
        "api": "ebay.com__sell-fulfillment__1.3.0.yaml",
        "canonical_expr": "get orders",
        "base_path": "/sell/fulfillment/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.",
                "location": "path",
                "name": "orderId"
            }
        ],
        "response_desc": "Success",
        "url": "/sell/fulfillment/v1/order/{orderId}",
        "desc": "Use this call to retrieve the contents of an order based on its unique identifier, orderId. This value was returned in the getOrders call's orders.orderId field when you searched for orders by creation date, modification date, or fulfillment status. The returned Order object contains information you can use to create and process fulfillments, including: Information about the buyer and seller Information about the order's line items The plans for packaging, addressing and shipping the order The status of payment, packaging, addressing, and shipping the order A summary of monetary amounts specific to the order such as pricing, payments, and shipping costs",
        "operation_id": "getOrder",
        "summary": "Get an Order",
        "api": "ebay.com__sell-fulfillment__1.3.0.yaml",
        "canonical_expr": "get an order with id being << orderId >>",
        "base_path": "/sell/fulfillment/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.",
                "location": "path",
                "name": "orderId"
            }
        ],
        "response_desc": "Success",
        "url": "/sell/fulfillment/v1/order/{orderId}/shipping_fulfillment",
        "desc": "Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order's unique identifier, orderId. This value is returned in the getOrders call's members.orderId field when you search for orders by creation date or shipment status.",
        "operation_id": "getShippingFulfillments",
        "summary": "Get Shipping Fulfillments",
        "api": "ebay.com__sell-fulfillment__1.3.0.yaml",
        "canonical_expr": "get shipping fulfillments for order id being << orderId >>",
        "base_path": "/sell/fulfillment/v1"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.",
                "location": "path",
                "name": "orderId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The code identifying the shipping carrier for this fulfillment. This field and the trackingNumber field are mutually dependent. If you include one, you must also include the other. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.",
                "location": "body",
                "name": "shippingCarrierCode"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "This field is reserved for internal or future use.",
                "location": "body",
                "name": "lineItems.quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The globally unique eBay-generated identifier of the line item. Note: A single line item can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller cannot distribute them among multiple shipping packages. Thus, each line item ID will appear in exactly one fulfillment.",
                "location": "body",
                "name": "lineItems.lineItemId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date and time that the fulfillment package was shipped. Default: The current date and time.",
                "location": "body",
                "name": "shippedDate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The tracking number provided by the shipping carrier for this fulfillment. This field and the shippingCarrierCode field are mutually dependent. If you include one, you must also include the other. Note: If you include trackingNumber (and shippingCarrierCode) in the request, the resulting fulfillment's ID (returned in the HTTP location code) is the tracking number. If you do not include the tracking number, the resulting fulfillment ID will default to an arbitrary number such as 999.",
                "location": "body",
                "name": "trackingNumber"
            }
        ],
        "response_desc": "",
        "url": "/sell/fulfillment/v1/order/{orderId}/shipping_fulfillment",
        "desc": "When you group an order's line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package.Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.",
        "operation_id": "createShippingFulfillment",
        "summary": "Create a Shipping Fulfillment",
        "api": "ebay.com__sell-fulfillment__1.3.0.yaml",
        "canonical_expr": "create a new shipping fulfillment for order id being << orderId >>",
        "base_path": "/sell/fulfillment/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.",
                "location": "path",
                "name": "orderId"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.",
                "location": "path",
                "name": "fulfillmentId"
            }
        ],
        "response_desc": "Success",
        "url": "/sell/fulfillment/v1/order/{orderId}/shipping_fulfillment/{fulfillmentId}",
        "desc": "Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order's orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.",
        "operation_id": "getShippingFulfillment",
        "summary": "Get a Shipping Fulfillment",
        "api": "ebay.com__sell-fulfillment__1.3.0.yaml",
        "canonical_expr": "get a shipping fulfillment with with order id being << orderId >> fulfillment id being << fulfillmentId >>",
        "base_path": "/sell/fulfillment/v1"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/client/all",
        "desc": null,
        "operation_id": "ClientApi_All",
        "summary": "Return all clients for the account",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of all clients",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/client/candelete",
        "desc": null,
        "operation_id": "ClientApi_CanDelete",
        "summary": "Check if the provided client can be deleted",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "check if the provided client can be deleted",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of client to be deleted",
                "location": "body",
                "name": "deleteModel.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/client/delete",
        "desc": null,
        "operation_id": "ClientApi_Delete",
        "summary": "Delete an existing client",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "delete a client",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/client/details",
        "desc": null,
        "operation_id": "ClientApi_Details",
        "summary": "Return client details. Activities and invoices included.",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the details of a client",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client's VAT number",
                "location": "body",
                "name": "client.Vat"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hold a value of the language in which the invoice will be sent",
                "location": "body",
                "name": "client.UiLanguageId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the client",
                "location": "body",
                "name": "client.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client additional email contact for CC",
                "location": "body",
                "name": "client.CC"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client email",
                "location": "body",
                "name": "client.Email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client phone numer",
                "location": "body",
                "name": "client.PhoneNumber"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client's Company Registration Number",
                "location": "body",
                "name": "client.CompanyRegistrationNumber"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates the default system currency used by the user for the client",
                "location": "body",
                "name": "client.ClientCurrencyId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates the country where the clients is from",
                "location": "body",
                "name": "client.ClientCountryId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client business address",
                "location": "body",
                "name": "client.Address"
            }
        ],
        "response_desc": "OK",
        "url": "/api/client/new",
        "desc": null,
        "operation_id": "ClientApi_New",
        "summary": "Create a client",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "create a new client",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client's VAT number",
                "location": "body",
                "name": "client.Vat"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hold a value of the language in which the invoice will be sent",
                "location": "body",
                "name": "client.UiLanguageId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the client",
                "location": "body",
                "name": "client.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client additional email contact for CC",
                "location": "body",
                "name": "client.CC"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client email",
                "location": "body",
                "name": "client.Email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client phone numer",
                "location": "body",
                "name": "client.PhoneNumber"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Entity id",
                "location": "body",
                "name": "client.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client's Company Registration Number",
                "location": "body",
                "name": "client.CompanyRegistrationNumber"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates the default system currency used by the user for the client",
                "location": "body",
                "name": "client.ClientCurrencyId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates the country where the clients is from",
                "location": "body",
                "name": "client.ClientCountryId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client business address",
                "location": "body",
                "name": "client.Address"
            }
        ],
        "response_desc": "",
        "url": "/api/client/update",
        "desc": null,
        "operation_id": "ClientApi_Update",
        "summary": "Update an existing client",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "update a client",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/general/countries",
        "desc": null,
        "operation_id": "GeneralApi_Countries",
        "summary": "Return all of the platform supported countries",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of countries",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/general/currencies",
        "desc": null,
        "operation_id": "GeneralApi_Currencies",
        "summary": "Return all of the platform supported currencies",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of currencies",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/general/dateformats",
        "desc": null,
        "operation_id": "GeneralApi_DateFormats",
        "summary": "Return all of the platform supported Date Formats",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of date formats",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/general/uilanguages",
        "desc": null,
        "operation_id": "GeneralApi_UiLanguages",
        "summary": "Return all of the platform supported UI languages",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of ui languages",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.pageSize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.page"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/all",
        "desc": null,
        "operation_id": "InvoiceApi_All",
        "summary": "Return all invoices for the account",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of all invoices",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "New status of the invoice",
                "location": "body",
                "name": "statusModel.Status"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice Id",
                "location": "body",
                "name": "statusModel.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/changestatus",
        "desc": null,
        "operation_id": "InvoiceApi_ChangeStatus",
        "summary": "Change invoice status",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "change invoice status",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of invoice to be deleted",
                "location": "body",
                "name": "deleteModel.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/delete",
        "desc": null,
        "operation_id": "InvoiceApi_Delete",
        "summary": "Delete an existing invoice",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "delete an invoice",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/details",
        "desc": null,
        "operation_id": "InvoiceApi_Details",
        "summary": "Return invoice data",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the details of an invoice",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The client to whom this invoice is assigned",
                "location": "body",
                "name": "invoice.ClientId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the payment gateway",
                "location": "body",
                "name": "invoice.PaymentGateways.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates when the invoice will be proclamed as due",
                "location": "body",
                "name": "invoice.Duedate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the file",
                "location": "body",
                "name": "invoice.Attachments.OriginalFileName"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Link to the file",
                "location": "body",
                "name": "invoice.Attachments.Link"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the link (Attached or external)",
                "location": "body",
                "name": "invoice.Attachments.Type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hashed file name to avoid url wildguessing",
                "location": "body",
                "name": "invoice.Attachments.ObfuscatedFileName"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "File size number in bytes",
                "location": "body",
                "name": "invoice.Attachments.Size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique invoice number",
                "location": "body",
                "name": "invoice.Number"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total number of days for the client to pay the invoice after issuing it",
                "location": "body",
                "name": "invoice.RecurringProfile.DueDateInDays"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Day of month when the recurrance should happen",
                "location": "body",
                "name": "invoice.RecurringProfile.DayOfMonth"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Month when the recurrance should happen",
                "location": "body",
                "name": "invoice.RecurringProfile.Month"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The status of the recurrance",
                "location": "body",
                "name": "invoice.RecurringProfile.Status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Day when the recurrance should happen",
                "location": "body",
                "name": "invoice.RecurringProfile.DayOfWeek"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How often the recurrance occurs",
                "location": "body",
                "name": "invoice.RecurringProfile.RecurrancePattern"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Title of the recurring profile. ------Ex: BRAND PACKAGE - 2017-08-16 - 2018-08-16",
                "location": "body",
                "name": "invoice.RecurringProfile.Title"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Recurring every [value] RecurrancePattern------Ex: Recur every 1 week",
                "location": "body",
                "name": "invoice.RecurringProfile.RecurranceValue"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indcate the date when the recurrance has started",
                "location": "body",
                "name": "invoice.RecurringProfile.StartOfRecurrance"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indcate the date when the recurrance should stop",
                "location": "body",
                "name": "invoice.RecurringProfile.EndOfRecurrance"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicate from which invoice this invoice has been cloned from",
                "location": "body",
                "name": "invoice.ClonedFromId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique number generated by the buyer",
                "location": "body",
                "name": "invoice.PoNumber"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount per unit",
                "location": "body",
                "name": "invoice.Items.Cost"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount percentage for the overall amount",
                "location": "body",
                "name": "invoice.Items.DiscountPercentage"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax applied on the item",
                "location": "body",
                "name": "invoice.Items.TaxId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional description attached to the invoice item",
                "location": "body",
                "name": "invoice.Items.Description"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity in total used for the work type",
                "location": "body",
                "name": "invoice.Items.Quantity"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Task percentage. Ex: 18%",
                "location": "body",
                "name": "invoice.Items.TaxPercentage"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Work type (Name of the service)",
                "location": "body",
                "name": "invoice.Items.WorkTypeId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicate the status of the invoice (paid/unpaid/overdue)",
                "location": "body",
                "name": "invoice.Status"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of the currency for the invoice amounts",
                "location": "body",
                "name": "invoice.CurrencyId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal note regarding the invoice",
                "location": "body",
                "name": "invoice.Notes"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hold the id of the recurring profile",
                "location": "body",
                "name": "invoice.RecurringProfileId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Terms of agreement",
                "location": "body",
                "name": "invoice.Terms"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates when the invoice was issued",
                "location": "body",
                "name": "invoice.IssuedOn"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/new",
        "desc": null,
        "operation_id": "InvoiceApi_New",
        "summary": "Create an invoice",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "create a new invoice",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of the invoice",
                "location": "body",
                "name": "invoice.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/sendtoaccountant",
        "desc": null,
        "operation_id": "InvoiceApi_SendToAccountant",
        "summary": "Send the provided invoice to the accountant",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "send the invoice to the accountant",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of the invoice",
                "location": "body",
                "name": "deliveryOptions.Id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of the invoice",
                "location": "body",
                "name": "deliveryOptions.InvoiceId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Message to be embedded in the email",
                "location": "body",
                "name": "deliveryOptions.Message"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/sendtoclient",
        "desc": null,
        "operation_id": "InvoiceApi_SendToClient",
        "summary": "Send the provided invoice to the client",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "send the invoice to the client",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/status",
        "desc": null,
        "operation_id": "InvoiceApi_Status",
        "summary": "Retrieve the status of the invoice",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the status of the invoice",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The client to whom this invoice is assigned",
                "location": "body",
                "name": "invoice.ClientId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates when the invoice will be proclamed as due",
                "location": "body",
                "name": "invoice.Duedate"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique invoice number",
                "location": "body",
                "name": "invoice.Number"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hold the id of the recurring profile",
                "location": "body",
                "name": "invoice.RecurringProfileId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Invoice id",
                "location": "body",
                "name": "invoice.Id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicate from which invoice this invoice has been cloned from",
                "location": "body",
                "name": "invoice.ClonedFromId"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount percentage for the overall amount",
                "location": "body",
                "name": "invoice.Items.DiscountPercentage"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Quantity in total used for the work type",
                "location": "body",
                "name": "invoice.Items.Quantity"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Additional description attached to the invoice item",
                "location": "body",
                "name": "invoice.Items.Description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of invoice item",
                "location": "body",
                "name": "invoice.Items.Id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Task percentage. Ex: 18%",
                "location": "body",
                "name": "invoice.Items.TaxPercentage"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Amount per unit",
                "location": "body",
                "name": "invoice.Items.Cost"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax applied on the item",
                "location": "body",
                "name": "invoice.Items.TaxId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Work type (Name of the service)",
                "location": "body",
                "name": "invoice.Items.WorkTypeId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the payment gateway",
                "location": "body",
                "name": "invoice.PaymentGateways.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hashed file name to avoid url wildguessing",
                "location": "body",
                "name": "invoice.Attachments.ObfuscatedFileName"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "File size number in bytes",
                "location": "body",
                "name": "invoice.Attachments.Size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Link to the file",
                "location": "body",
                "name": "invoice.Attachments.Link"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the link (Attached or external)",
                "location": "body",
                "name": "invoice.Attachments.Type"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of invoice attachment",
                "location": "body",
                "name": "invoice.Attachments.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the file",
                "location": "body",
                "name": "invoice.Attachments.OriginalFileName"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total number of days for the client to pay the invoice after issuing it",
                "location": "body",
                "name": "invoice.RecurringProfile.DueDateInDays"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Day of month when the recurrance should happen",
                "location": "body",
                "name": "invoice.RecurringProfile.DayOfMonth"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Month when the recurrance should happen",
                "location": "body",
                "name": "invoice.RecurringProfile.Month"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The status of the recurrance",
                "location": "body",
                "name": "invoice.RecurringProfile.Status"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Day when the recurrance should happen",
                "location": "body",
                "name": "invoice.RecurringProfile.DayOfWeek"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "How often the recurrance occurs",
                "location": "body",
                "name": "invoice.RecurringProfile.RecurrancePattern"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Title of the recurring profile. ------Ex: BRAND PACKAGE - 2017-08-16 - 2018-08-16",
                "location": "body",
                "name": "invoice.RecurringProfile.Title"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Recurring every [value] RecurrancePattern------Ex: Recur every 1 week",
                "location": "body",
                "name": "invoice.RecurringProfile.RecurranceValue"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indcate the date when the recurrance has started",
                "location": "body",
                "name": "invoice.RecurringProfile.StartOfRecurrance"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indcate the date when the recurrance should stop",
                "location": "body",
                "name": "invoice.RecurringProfile.EndOfRecurrance"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique number generated by the buyer",
                "location": "body",
                "name": "invoice.PoNumber"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicate the status of the invoice (paid/unpaid/overdue)",
                "location": "body",
                "name": "invoice.Status"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of the currency for the invoice amounts",
                "location": "body",
                "name": "invoice.CurrencyId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Internal note regarding the invoice",
                "location": "body",
                "name": "invoice.Notes"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Terms of agreement",
                "location": "body",
                "name": "invoice.Terms"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates when the invoice was issued",
                "location": "body",
                "name": "invoice.IssuedOn"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/update",
        "desc": null,
        "operation_id": "InvoiceApi_Update",
        "summary": "Update an existing invoice",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "update an invoice",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/invoice/uri",
        "desc": null,
        "operation_id": "InvoiceApi_Uri",
        "summary": "Return the unique url to the client's invoice",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the invoice uri",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.pageSize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.page"
            }
        ],
        "response_desc": "OK",
        "url": "/api/order/all",
        "desc": null,
        "operation_id": "OrderApi_All",
        "summary": "Return all orders for the account",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of all orders",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "orderId"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client email",
                "location": "body",
                "name": "shippingDetails.Email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client phone number",
                "location": "body",
                "name": "shippingDetails.PhoneNumber"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client name",
                "location": "body",
                "name": "shippingDetails.Name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client country id",
                "location": "body",
                "name": "shippingDetails.CountryId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client street and number",
                "location": "body",
                "name": "shippingDetails.Address"
            }
        ],
        "response_desc": "",
        "url": "/api/order/changeshippingdetails",
        "desc": null,
        "operation_id": "OrderApi_ChangeShippingDetails",
        "summary": "Change order shipping details",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "change order shipping details",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "New status of the order",
                "location": "body",
                "name": "status.Status"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order Id",
                "location": "body",
                "name": "status.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Reason for status change",
                "location": "body",
                "name": "status.Reason"
            }
        ],
        "response_desc": "",
        "url": "/api/order/changestatus",
        "desc": null,
        "operation_id": "OrderApi_ChangeStatus",
        "summary": "Change order status",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "change order status",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of order to be deleted",
                "location": "body",
                "name": "order.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/order/delete",
        "desc": null,
        "operation_id": "OrderApi_Delete",
        "summary": "Delete an existing order",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "delete an order",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/order/details",
        "desc": null,
        "operation_id": "OrderApi_Details",
        "summary": "Return order details",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the details of an order",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Coupon to apply in order to get the discount",
                "location": "body",
                "name": "order.CouponCode"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Cost for shipping the product",
                "location": "body",
                "name": "order.ShippingAmount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount",
                "location": "body",
                "name": "order.TotalAmount"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key product item id",
                "location": "body",
                "name": "order.Items.ProductItemId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key Tax id",
                "location": "body",
                "name": "order.Items.TaxId"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Work item quantity",
                "location": "body",
                "name": "order.Items.Quantity"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount of product",
                "location": "body",
                "name": "order.Items.TotalAmount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax percentage",
                "location": "body",
                "name": "order.Items.TaxPercentage"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Work item cost",
                "location": "body",
                "name": "order.Items.Cost"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount",
                "location": "body",
                "name": "order.Items.TaxAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order SKU",
                "location": "body",
                "name": "order.Items.ReferenceId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "General description",
                "location": "body",
                "name": "order.Items.Description"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subtotal amount of product",
                "location": "body",
                "name": "order.Items.SubTotalAmount"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key work type id",
                "location": "body",
                "name": "order.Items.WorkTypeId"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount",
                "location": "body",
                "name": "order.TaxAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product alias",
                "location": "body",
                "name": "order.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Customer note to seller",
                "location": "body",
                "name": "order.Note"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sub total amount",
                "location": "body",
                "name": "order.SubTotalAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client email",
                "location": "body",
                "name": "order.OrderShippingDetails.Email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client phone number",
                "location": "body",
                "name": "order.OrderShippingDetails.PhoneNumber"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client name",
                "location": "body",
                "name": "order.OrderShippingDetails.Name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client country id",
                "location": "body",
                "name": "order.OrderShippingDetails.CountryId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client street and number",
                "location": "body",
                "name": "order.OrderShippingDetails.Address"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "What happens next description",
                "location": "body",
                "name": "order.WhatHappensNextDescription"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product id",
                "location": "body",
                "name": "order.ProductId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client instructions for shipping",
                "location": "body",
                "name": "order.ShippingDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the file",
                "location": "body",
                "name": "order.Attachments.OriginalFileName"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Link to the file",
                "location": "body",
                "name": "order.Attachments.Link"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the link (Attached or external)",
                "location": "body",
                "name": "order.Attachments.Type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hashed file name to avoid url wildguessing",
                "location": "body",
                "name": "order.Attachments.ObfuscatedFileName"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "File size number in bytes",
                "location": "body",
                "name": "order.Attachments.Size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "After payment description",
                "location": "body",
                "name": "order.AfterPaymentDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Represent the referral for this order",
                "location": "body",
                "name": "order.Referral"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Order status",
                "location": "body",
                "name": "order.Status"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount amount",
                "location": "body",
                "name": "order.DiscountAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product description",
                "location": "body",
                "name": "order.Description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key Currency",
                "location": "body",
                "name": "order.CurrencyId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client email",
                "location": "body",
                "name": "order.OrderBillingDetails.Email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client phone number",
                "location": "body",
                "name": "order.OrderBillingDetails.PhoneNumber"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client name",
                "location": "body",
                "name": "order.OrderBillingDetails.Name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client country id",
                "location": "body",
                "name": "order.OrderBillingDetails.CountryId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client street and number",
                "location": "body",
                "name": "order.OrderBillingDetails.Address"
            }
        ],
        "response_desc": "OK",
        "url": "/api/order/new",
        "desc": null,
        "operation_id": "OrderApi_New",
        "summary": "Create an order",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "create a new order",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/payment/supported",
        "desc": null,
        "operation_id": "PaymentApi_Supported",
        "summary": "Return all supported payment gateways (no currencies means all are supported)",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of supported payment gateways",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.pageSize"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.page"
            }
        ],
        "response_desc": "OK",
        "url": "/api/product/all",
        "desc": null,
        "operation_id": "ProductApi_All",
        "summary": "Return all products for the account",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of products",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of product to be deleted",
                "location": "body",
                "name": "product.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/product/delete",
        "desc": null,
        "operation_id": "ProductApi_Delete",
        "summary": "Delete an existing product",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "delete a product",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "id"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/product/details",
        "desc": null,
        "operation_id": "ProductApi_Details",
        "summary": "Return product details",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the details of product",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Payment gateway name",
                "location": "body",
                "name": "product.PaymentGateways.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client instructions for shipping",
                "location": "body",
                "name": "product.ShippingDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hashed file name to avoid url wildguessing",
                "location": "body",
                "name": "product.Attachments.ObfuscatedFileName"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "File size number in bytes",
                "location": "body",
                "name": "product.Attachments.Size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Link to the file",
                "location": "body",
                "name": "product.Attachments.Link"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the link (Attached or external)",
                "location": "body",
                "name": "product.Attachments.Type"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product attachment id",
                "location": "body",
                "name": "product.Attachments.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the file",
                "location": "body",
                "name": "product.Attachments.OriginalFileName"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "After payment description",
                "location": "body",
                "name": "product.AfterPaymentDescription"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Cost for shipping the product",
                "location": "body",
                "name": "product.ShippingAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product alias",
                "location": "body",
                "name": "product.Name"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key Tax id",
                "location": "body",
                "name": "product.Items.TaxId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product item id",
                "location": "body",
                "name": "product.Items.Id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount of product",
                "location": "body",
                "name": "product.Items.TotalAmount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax percentage",
                "location": "body",
                "name": "product.Items.TaxPercentage"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Work item cost",
                "location": "body",
                "name": "product.Items.Cost"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount",
                "location": "body",
                "name": "product.Items.TaxAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product SKU",
                "location": "body",
                "name": "product.Items.ReferenceId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "General description",
                "location": "body",
                "name": "product.Items.Description"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Minimum required quantity in order to buy a work item",
                "location": "body",
                "name": "product.Items.MinimumQuantity"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subtotal amount of product",
                "location": "body",
                "name": "product.Items.SubTotalAmount"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key work type id",
                "location": "body",
                "name": "product.Items.WorkTypeId"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount percentage",
                "location": "body",
                "name": "product.Discounts.DiscountPercentage"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name",
                "location": "body",
                "name": "product.Discounts.Name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount amount",
                "location": "body",
                "name": "product.Discounts.DiscountAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount expiration date",
                "location": "body",
                "name": "product.Discounts.ValidTo"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product discount id",
                "location": "body",
                "name": "product.Discounts.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount start date",
                "location": "body",
                "name": "product.Discounts.ValidFrom"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product availability status",
                "location": "body",
                "name": "product.Status"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount percentage",
                "location": "body",
                "name": "product.Coupons.DiscountPercentage"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Coupon to apply in order to get the discount",
                "location": "body",
                "name": "product.Coupons.Code"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product coupon id",
                "location": "body",
                "name": "product.Coupons.Id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount amount",
                "location": "body",
                "name": "product.Coupons.DiscountAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Coupon expiration date",
                "location": "body",
                "name": "product.Coupons.ValidUntil"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product description",
                "location": "body",
                "name": "product.Description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key Currency",
                "location": "body",
                "name": "product.CurrencyId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "What happens next description",
                "location": "body",
                "name": "product.WhatHappensNextDescription"
            }
        ],
        "response_desc": "OK",
        "url": "/api/product/new",
        "desc": null,
        "operation_id": "ProductApi_New",
        "summary": "Create a product",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "create a new product",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Payment gateway name",
                "location": "body",
                "name": "product.PaymentGateways.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Client instructions for shipping",
                "location": "body",
                "name": "product.ShippingDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Hashed file name to avoid url wildguessing",
                "location": "body",
                "name": "product.Attachments.ObfuscatedFileName"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "File size number in bytes",
                "location": "body",
                "name": "product.Attachments.Size"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Link to the file",
                "location": "body",
                "name": "product.Attachments.Link"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of the link (Attached or external)",
                "location": "body",
                "name": "product.Attachments.Type"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product attachment id",
                "location": "body",
                "name": "product.Attachments.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the file",
                "location": "body",
                "name": "product.Attachments.OriginalFileName"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Cost for shipping the product",
                "location": "body",
                "name": "product.ShippingAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "After payment description",
                "location": "body",
                "name": "product.AfterPaymentDescription"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product description",
                "location": "body",
                "name": "product.Description"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product id",
                "location": "body",
                "name": "product.Id"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key Tax id",
                "location": "body",
                "name": "product.Items.TaxId"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product item id",
                "location": "body",
                "name": "product.Items.Id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Total amount of product",
                "location": "body",
                "name": "product.Items.TotalAmount"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax percentage",
                "location": "body",
                "name": "product.Items.TaxPercentage"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Work item cost",
                "location": "body",
                "name": "product.Items.Cost"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Tax amount",
                "location": "body",
                "name": "product.Items.TaxAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product SKU",
                "location": "body",
                "name": "product.Items.ReferenceId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "General description",
                "location": "body",
                "name": "product.Items.Description"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Minimum required quantity in order to buy a work item",
                "location": "body",
                "name": "product.Items.MinimumQuantity"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Subtotal amount of product",
                "location": "body",
                "name": "product.Items.SubTotalAmount"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key work type id",
                "location": "body",
                "name": "product.Items.WorkTypeId"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount percentage",
                "location": "body",
                "name": "product.Discounts.DiscountPercentage"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name",
                "location": "body",
                "name": "product.Discounts.Name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount amount",
                "location": "body",
                "name": "product.Discounts.DiscountAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount expiration date",
                "location": "body",
                "name": "product.Discounts.ValidTo"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product discount id",
                "location": "body",
                "name": "product.Discounts.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount start date",
                "location": "body",
                "name": "product.Discounts.ValidFrom"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product availability status",
                "location": "body",
                "name": "product.Status"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount percentage",
                "location": "body",
                "name": "product.Coupons.DiscountPercentage"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Coupon to apply in order to get the discount",
                "location": "body",
                "name": "product.Coupons.Code"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product coupon id",
                "location": "body",
                "name": "product.Coupons.Id"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Discount amount",
                "location": "body",
                "name": "product.Coupons.DiscountAmount"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Coupon expiration date",
                "location": "body",
                "name": "product.Coupons.ValidUntil"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Foreign key Currency",
                "location": "body",
                "name": "product.CurrencyId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Product alias",
                "location": "body",
                "name": "product.Name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "What happens next description",
                "location": "body",
                "name": "product.WhatHappensNextDescription"
            }
        ],
        "response_desc": "",
        "url": "/api/product/update",
        "desc": null,
        "operation_id": "ProductApi_Update",
        "summary": "Update an existing product",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "update a product",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/tax/all",
        "desc": null,
        "operation_id": "TaxApi_All",
        "summary": "Return all taxes for the account",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of taxes",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of tax to be deleted",
                "location": "body",
                "name": "deleteModel.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/tax/delete",
        "desc": null,
        "operation_id": "TaxApi_Delete",
        "summary": "Delete an existing tax",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "delete a tax",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the task",
                "location": "body",
                "name": "tax.Name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Task percentage. Ex: 18%",
                "location": "body",
                "name": "tax.Percentage"
            }
        ],
        "response_desc": "OK",
        "url": "/api/tax/new",
        "desc": null,
        "operation_id": "TaxApi_New",
        "summary": "Create a tax",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "create a new tax",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Entity id",
                "location": "body",
                "name": "tax.Id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the task",
                "location": "body",
                "name": "tax.Name"
            },
            {
                "example": null,
                "type": "number",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Task percentage. Ex: 18%",
                "location": "body",
                "name": "tax.Percentage"
            }
        ],
        "response_desc": "",
        "url": "/api/tax/update",
        "desc": null,
        "operation_id": "TaxApi_Update",
        "summary": "Update an existing tax",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "update a tax",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/worktype/all",
        "desc": null,
        "operation_id": "WorkTypeApi_All",
        "summary": "Return all work types for the account",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the list of work types",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Id of work type to be deleted",
                "location": "body",
                "name": "deleteModel.Id"
            }
        ],
        "response_desc": "OK",
        "url": "/api/worktype/delete",
        "desc": null,
        "operation_id": "WorkTypeApi_Delete",
        "summary": "Delete an existing work type",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "delete a work type",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "workTypeId"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            }
        ],
        "response_desc": "OK",
        "url": "/api/worktype/details",
        "desc": null,
        "operation_id": "WorkTypeApi_Details",
        "summary": "Return work type details",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "get the details of work type",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates the title of of the work type (Logo design, development...)",
                "location": "body",
                "name": "workType.Title"
            }
        ],
        "response_desc": "OK",
        "url": "/api/worktype/new",
        "desc": null,
        "operation_id": "WorkTypeApi_New",
        "summary": "Create a work type",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "create a new work type",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.pageSize"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.orderBy"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.page"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.order"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "queryOptions.query"
            },
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            }
        ],
        "response_desc": "OK",
        "url": "/api/worktype/search",
        "desc": null,
        "operation_id": "WorkTypeApi_Search",
        "summary": "Return all work types for the account that match the query param",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "search for the list of work types",
        "base_path": ""
    },
    {
        "verb": "post",
        "params": [
            {
                "example": "[authentication secret]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-secret"
            },
            {
                "example": "[authentication key]",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": true,
                "desc": "",
                "location": "header",
                "name": "x-auth-key"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Indicates the title of of the work type (Logo design, development...)",
                "location": "body",
                "name": "workType.Title"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Entity id",
                "location": "body",
                "name": "workType.Id"
            }
        ],
        "response_desc": "",
        "url": "/api/worktype/update",
        "desc": null,
        "operation_id": "WorkTypeApi_Update",
        "summary": "Update an existing work type",
        "api": "envoice.in__v1.yaml",
        "canonical_expr": "update a work type",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance statuses for 12 quarters.",
        "url": "/echo/dfr_rest_services.get_air_compliance",
        "desc": "This procedure obtains data for Air Compliance in the Environmental Conditions Section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Air Compliance Report Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get the air compliance statuses",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance statuses for 12 quarters.",
        "url": "/echo/dfr_rest_services.get_air_compliance",
        "desc": "This procedure obtains data for Air Compliance in the Environmental Conditions Section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Air Compliance Report Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get the air compliance statuses",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes information on air quality",
        "url": "/echo/dfr_rest_services.get_air_quality",
        "desc": "This procedure obtains data for Air Quality in the Environmental Conditions Section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Air Quality Report Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get air quality",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes information on air quality",
        "url": "/echo/dfr_rest_services.get_air_quality",
        "desc": "This procedure obtains data for Air Quality in the Environmental Conditions Section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Air Quality Report Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get air quality",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_case_formal_actions",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get case formal actions",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_case_formal_actions",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get case formal actions",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance histories",
        "url": "/echo/dfr_rest_services.get_compliance_history",
        "desc": "This procedure obtains data for the Compliance Monitoring History (5 years) in the Enforcement and Compliance Section of the Detailed Facility report.",
        "operation_id": null,
        "summary": "Detailed Facility Report 5 Year Compliance Monitoring History Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get compliance history",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance histories",
        "url": "/echo/dfr_rest_services.get_compliance_history",
        "desc": "This procedure obtains data for the Compliance Monitoring History (5 years) in the Enforcement and Compliance Section of the Detailed Facility report.",
        "operation_id": null,
        "summary": "Detailed Facility Report 5 Year Compliance Monitoring History Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get compliance history",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance summaries",
        "url": "/echo/dfr_rest_services.get_compliance_summary",
        "desc": "This procedure obtains data for Compliance Summary Data in the Enforcement and Compliance Section of the Detailed Facility report.",
        "operation_id": null,
        "summary": "Detailed Facility Report Compliance Summary Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get compliance summary",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance summaries",
        "url": "/echo/dfr_rest_services.get_compliance_summary",
        "desc": "This procedure obtains data for Compliance Summary Data in the Enforcement and Compliance Section of the Detailed Facility report.",
        "operation_id": null,
        "summary": "Detailed Facility Report Compliance Summary Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get compliance summary",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance statuses for 13 quarters",
        "url": "/echo/dfr_rest_services.get_cwa_3yr_compliance",
        "desc": "This procedure obtains data for the CWA Facility-Level Status section located in the Three Year Compliance Status by Quarter portion of the DFR. Valid Compliance Statuses are as follows:\n> \"In Viol\" = Facility is in violation\n> \"No Viol\" = No violation found\n> \"Unk\" = Unknown status\n> \"SNC/Cat 1\" = SNC/Category I violation found",
        "operation_id": null,
        "summary": "Detailed Facility Report 3 Year CWA Facility-Level Status Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa 3yr compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance statuses for 13 quarters",
        "url": "/echo/dfr_rest_services.get_cwa_3yr_compliance",
        "desc": "This procedure obtains data for the CWA Facility-Level Status section located in the Three Year Compliance Status by Quarter portion of the DFR. Valid Compliance Statuses are as follows:\n> \"In Viol\" = Facility is in violation\n> \"No Viol\" = No violation found\n> \"Unk\" = Unknown status\n> \"SNC/Cat 1\" = SNC/Category I violation found",
        "operation_id": null,
        "summary": "Detailed Facility Report 3 Year CWA Facility-Level Status Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa 3yr compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_cwa_3yr_d80d90_counts",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa 3yr d80d90 counts",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_cwa_3yr_d80d90_counts",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa 3yr d80d90 counts",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance statuses for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_cs_compliance",
        "desc": "This procedure obtains data for the CWA Compliance Schedule Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA CSV Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa cs compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of compliance statuses for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_cs_compliance",
        "desc": "This procedure obtains data for the CWA Compliance Schedule Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA CSV Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa cs compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of effluent ALR for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_eff_alr",
        "desc": "This procedure obtains data for the CWA Pollutant Discharge section located in the Three Year Compliance Status by Quarter portion of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA Effluent ALR Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa eff alr",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of effluent ALR for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_eff_alr",
        "desc": "This procedure obtains data for the CWA Pollutant Discharge section located in the Three Year Compliance Status by Quarter portion of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA Effluent ALR Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa eff alr",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of effluent compliance statuses for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_eff_compliance",
        "desc": "This procedure obtains data for the CWA Effluent Compliance section on the DFR.  ",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA Effluent Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa eff compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of effluent compliance statuses for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_eff_compliance",
        "desc": "This procedure obtains data for the CWA Effluent Compliance section on the DFR.  ",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA Effluent Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa eff compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of permit schedule violations for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_ps_compliance",
        "desc": "This procedure obtains data for the CWA Permit Schedule Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA PSV Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa ps compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of permit schedule violations for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_ps_compliance",
        "desc": "This procedure obtains data for the CWA Permit Schedule Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA PSV Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa ps compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of RNC compliance statuses for 12 quarters",
        "url": "/echo/dfr_rest_services.get_cwa_rnc_compliance",
        "desc": "This procedure obtains data for the CWA SNC/RNC History section located in the Three Year ompliance Status by Quarter portion of the DFR. Valid Compliance Statuses are as follows.\n> S = SNC/Category I - an enforcement action has been issued, and the facility is not meeting its compliance schedule\n> E = SNC/Category I - effluent violations of monthly average limits (Technical Review Criteria and chronic)\n> X = SNC/Category I - effluent violations of non-monthly average limits (Technical Review Criteria and chronic)\n> T = SNC/Category I - compliance schedule reporting violation\n> D = SNC/Category I - reporting violation - nonreceipt of DMR\n> N = RNC/Category II - reportable non-compliance\n> P = Resolved Pending - an enforcement action has been issued, and facility compliance with the action is pending final completion\n> R = Resolved - the facility has returned to compliance with its permit conditions, either with or without issuance of an enforcement action\n> C = Not considered in RNC/SNC based on manual review of data by state or EPA region. This manual override status is also indicated by a superscripted \"m\".\n> Blank = Not considered in RNC/SNC\n> N/A = EPA's data system is not able to determine the facility-level compliance status based upon the information available. This information may be available from a state database.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA RNC Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa rnc compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of RNC compliance statuses for 12 quarters",
        "url": "/echo/dfr_rest_services.get_cwa_rnc_compliance",
        "desc": "This procedure obtains data for the CWA SNC/RNC History section located in the Three Year ompliance Status by Quarter portion of the DFR. Valid Compliance Statuses are as follows.\n> S = SNC/Category I - an enforcement action has been issued, and the facility is not meeting its compliance schedule\n> E = SNC/Category I - effluent violations of monthly average limits (Technical Review Criteria and chronic)\n> X = SNC/Category I - effluent violations of non-monthly average limits (Technical Review Criteria and chronic)\n> T = SNC/Category I - compliance schedule reporting violation\n> D = SNC/Category I - reporting violation - nonreceipt of DMR\n> N = RNC/Category II - reportable non-compliance\n> P = Resolved Pending - an enforcement action has been issued, and facility compliance with the action is pending final completion\n> R = Resolved - the facility has returned to compliance with its permit conditions, either with or without issuance of an enforcement action\n> C = Not considered in RNC/SNC based on manual review of data by state or EPA region. This manual override status is also indicated by a superscripted \"m\".\n> Blank = Not considered in RNC/SNC\n> N/A = EPA's data system is not able to determine the facility-level compliance status based upon the information available. This information may be available from a state database.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA RNC Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa rnc compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of single-event statuses for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_se_compliance",
        "desc": "This procedure obtains data for the CWA Single Event Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA SEV Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa se compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of single-event statuses for 13 quarters.",
        "url": "/echo/dfr_rest_services.get_cwa_se_compliance",
        "desc": "This procedure obtains data for the CWA Single Event Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report CWA SEV Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get cwa se compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "p_radius"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes demographics",
        "url": "/echo/dfr_rest_services.get_demographics_by_id",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get demographics by id",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "p_radius"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes demographics",
        "url": "/echo/dfr_rest_services.get_demographics_by_id",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get demographics by id",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "System Acronym Filter.  Enter a single system acronym to filter results.",
                "location": "query",
                "name": "p_system"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns a complex object (Detailed Facility Report) composed of objects from all of the other procedures.",
        "url": "/echo/dfr_rest_services.get_dfr",
        "desc": "This procedure is the overall service for the Detailed Facility Report. It returns all of the data displayed in the DFR web report by invoking individual procedures that each return a targeted portion of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get dfr",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "System Acronym Filter.  Enter a single system acronym to filter results.",
                "location": "query",
                "name": "p_system"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns a complex object (Detailed Facility Report) composed of objects from all of the other procedures.",
        "url": "/echo/dfr_rest_services.get_dfr",
        "desc": "This procedure is the overall service for the Detailed Facility Report. It returns all of the data displayed in the DFR web report by invoking individual procedures that each return a targeted portion of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get dfr",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of enforcement compliance summaries",
        "url": "/echo/dfr_rest_services.get_enforcement_summary",
        "desc": "This procedure obtains data for the Enforcement and Compliance Summary in the Facility Summary section of the Detailed Facility Report.",
        "operation_id": null,
        "summary": "Detailed Facility Report Enforcement Summary Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get enforcement summary",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of enforcement compliance summaries",
        "url": "/echo/dfr_rest_services.get_enforcement_summary",
        "desc": "This procedure obtains data for the Enforcement and Compliance Summary in the Facility Summary section of the Detailed Facility Report.",
        "operation_id": null,
        "summary": "Detailed Facility Report Enforcement Summary Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get enforcement summary",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_extract_dates",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get extract dates",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_extract_dates",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get extract dates",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of formal actions.",
        "url": "/echo/dfr_rest_services.get_formal_actions",
        "desc": "This procedure obtains data for the Formal Enforcement Actions section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Formal Actions Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get formal actions",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of formal actions.",
        "url": "/echo/dfr_rest_services.get_formal_actions",
        "desc": "This procedure obtains data for the Formal Enforcement Actions section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Formal Actions Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get formal actions",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of ICIS formal actions.",
        "url": "/echo/dfr_rest_services.get_icis_formal_actions",
        "desc": "This procedure obtains data for the Integrated Compliance Information System, Formal Enforcement Actions section of the DFR. ",
        "operation_id": null,
        "summary": "Detailed Facility Report ICIS Formal Actions Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get icis formal actions",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of ICIS formal actions.",
        "url": "/echo/dfr_rest_services.get_icis_formal_actions",
        "desc": "This procedure obtains data for the Integrated Compliance Information System, Formal Enforcement Actions section of the DFR. ",
        "operation_id": null,
        "summary": "Detailed Facility Report ICIS Formal Actions Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get icis formal actions",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of inspection enforcement summaries",
        "url": "/echo/dfr_rest_services.get_inspections",
        "desc": "This procedure obtains data for Enforcement and Compliance Summary Section of the Detailed Facility report.",
        "operation_id": null,
        "summary": "Detailed Facility Report Inspections Summary Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get inspections",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of inspection enforcement summaries",
        "url": "/echo/dfr_rest_services.get_inspections",
        "desc": "This procedure obtains data for Enforcement and Compliance Summary Section of the Detailed Facility report.",
        "operation_id": null,
        "summary": "Detailed Facility Report Inspections Summary Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get inspections",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes information for displaying a map",
        "url": "/echo/dfr_rest_services.get_map",
        "desc": "Returns an object with the facility's latitude and longitude coordinates.",
        "operation_id": null,
        "summary": "Detailed Facility Report Map Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get map",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes information for displaying a map",
        "url": "/echo/dfr_rest_services.get_map",
        "desc": "Returns an object with the facility's latitude and longitude coordinates.",
        "operation_id": null,
        "summary": "Detailed Facility Report Map Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get map",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of NAICS codes",
        "url": "/echo/dfr_rest_services.get_naics",
        "desc": "This procedure obtains data for the Facility NAICS Codes section in Facility/System Characteristics of the Detailed Facility Report.",
        "operation_id": null,
        "summary": "Detailed Facility Report NAICS Code Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get naics",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of NAICS codes",
        "url": "/echo/dfr_rest_services.get_naics",
        "desc": "This procedure obtains data for the Facility NAICS Codes section in Facility/System Characteristics of the Detailed Facility Report.",
        "operation_id": null,
        "summary": "Detailed Facility Report NAICS Code Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get naics",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of notices",
        "url": "/echo/dfr_rest_services.get_notices",
        "desc": "This procedure obtains data for the Notices/Informal Actions section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Notices Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get notices",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of notices",
        "url": "/echo/dfr_rest_services.get_notices",
        "desc": "This procedure obtains data for the Notices/Informal Actions section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Notices Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get notices",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of permits",
        "url": "/echo/dfr_rest_services.get_permits",
        "desc": "This procedure obtains data for the following sections of the Detailed Facility Report.\n> Facility Information (FRS) in the Facility Summary.\n> Regulatory Interests in the Facility Summary.\n> Also Reports in the Facility Summary.\n> Facility/System Characteristics in Facility/System Characteristics.\n> Facility Contact Information in Facility/System Characteristics.\n> Facility SIC Codes in Facility/System Characteristics section.\n> Facility NAICS Codes in Facility/System Characteristics section.",
        "operation_id": null,
        "summary": "Detailed Facility Report Permits Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get permits",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of permits",
        "url": "/echo/dfr_rest_services.get_permits",
        "desc": "This procedure obtains data for the following sections of the Detailed Facility Report.\n> Facility Information (FRS) in the Facility Summary.\n> Regulatory Interests in the Facility Summary.\n> Also Reports in the Facility Summary.\n> Facility/System Characteristics in Facility/System Characteristics.\n> Facility Contact Information in Facility/System Characteristics.\n> Facility SIC Codes in Facility/System Characteristics section.\n> Facility NAICS Codes in Facility/System Characteristics section.",
        "operation_id": null,
        "summary": "Detailed Facility Report Permits Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get permits",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes RCRA compliance statuses",
        "url": "/echo/dfr_rest_services.get_rcra_compliance",
        "desc": "This procedure obtains data for the RCRA Compliance section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report RCRA Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get rcra compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes RCRA compliance statuses",
        "url": "/echo/dfr_rest_services.get_rcra_compliance",
        "desc": "This procedure obtains data for the RCRA Compliance section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report RCRA Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get rcra compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of lead and copper rules",
        "url": "/echo/dfr_rest_services.get_sdwa_lead_and_copper",
        "desc": "This procedure obtains data for the SDWA, Lead and Copper Rule section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Lead and Copper Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa lead and copper",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of lead and copper rules",
        "url": "/echo/dfr_rest_services.get_sdwa_lead_and_copper",
        "desc": "This procedure obtains data for the SDWA, Lead and Copper Rule section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Lead and Copper Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa lead and copper",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of sanitary surveys",
        "url": "/echo/dfr_rest_services.get_sdwa_sanitary_surveys",
        "desc": "This procedure obtains data for the SDWA, Sanitary Surveys section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Sanitary Surveys Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa sanitary surveys",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of sanitary surveys",
        "url": "/echo/dfr_rest_services.get_sdwa_sanitary_surveys",
        "desc": "This procedure obtains data for the SDWA, Sanitary Surveys section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Sanitary Surveys Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa sanitary surveys",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of site visits",
        "url": "/echo/dfr_rest_services.get_sdwa_site_visits",
        "desc": "This procedure obtains data for the SDWA, Sanitary Site Visits section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Sanitary Site Visits Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa site visits",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of site visits",
        "url": "/echo/dfr_rest_services.get_sdwa_site_visits",
        "desc": "This procedure obtains data for the SDWA, Sanitary Site Visits section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Sanitary Site Visits Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa site visits",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes SDWA violations",
        "url": "/echo/dfr_rest_services.get_sdwa_violations",
        "desc": "This procedure obtains data for the SDWA Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Violations Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa violations",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes SDWA violations",
        "url": "/echo/dfr_rest_services.get_sdwa_violations",
        "desc": "This procedure obtains data for the SDWA Violations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWA Violations Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwa violations",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of SDWIS compliance summaries",
        "url": "/echo/dfr_rest_services.get_sdwis_compliance",
        "desc": "This procedure obtains data for the SDWA Compliance section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWIS Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwis compliance",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of SDWIS compliance summaries",
        "url": "/echo/dfr_rest_services.get_sdwis_compliance",
        "desc": "This procedure obtains data for the SDWA Compliance section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report SDWIS Compliance Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sdwis compliance",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of SIC codes",
        "url": "/echo/dfr_rest_services.get_sic_codes",
        "desc": "This procedure obtains data for the Facility SIC Codes section in Facility/System Characteristics of the Detailed Facility Report.",
        "operation_id": null,
        "summary": "Detailed Facility Report SIC Code Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sic codes",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of SIC codes",
        "url": "/echo/dfr_rest_services.get_sic_codes",
        "desc": "This procedure obtains data for the Facility SIC Codes section in Facility/System Characteristics of the Detailed Facility Report.",
        "operation_id": null,
        "summary": "Detailed Facility Report SIC Code Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get sic codes",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes spatial metadata",
        "url": "/echo/dfr_rest_services.get_spatial_metadata",
        "desc": "Returns an object with the facility coordinate spatial metadata.",
        "operation_id": null,
        "summary": "Detailed Facility Report Spatial Metadata Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get spatial metadata",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes spatial metadata",
        "url": "/echo/dfr_rest_services.get_spatial_metadata",
        "desc": "Returns an object with the facility coordinate spatial metadata.",
        "operation_id": null,
        "summary": "Detailed Facility Report Spatial Metadata Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get spatial metadata",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes TRI history",
        "url": "/echo/dfr_rest_services.get_tri_history",
        "desc": "This procedure obtains data for the TRI History section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report TRI History Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get tri history",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes TRI history",
        "url": "/echo/dfr_rest_services.get_tri_history",
        "desc": "This procedure obtains data for the TRI History section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report TRI History Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get tri history",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes TRI releases",
        "url": "/echo/dfr_rest_services.get_tri_releases",
        "desc": "This procedrue obtains data for the TRI Releases section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report TRI Releases Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get tri releases",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes TRI releases",
        "url": "/echo/dfr_rest_services.get_tri_releases",
        "desc": "This procedrue obtains data for the TRI Releases section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report TRI Releases Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get tri releases",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of tribal location information.",
        "url": "/echo/dfr_rest_services.get_tribes",
        "desc": "This procedure obtains data for the Tribes and Reservations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Tribes Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get tribes",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of tribal location information.",
        "url": "/echo/dfr_rest_services.get_tribes",
        "desc": "This procedure obtains data for the Tribes and Reservations section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Tribes Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get tribes",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "p_radius"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of water quality information.",
        "url": "/echo/dfr_rest_services.get_water_quality",
        "desc": "This procedure obtains data for the Water Quality section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Water Quality Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get water quality",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "p_radius"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Returns an object that includes an array of water quality information.",
        "url": "/echo/dfr_rest_services.get_water_quality",
        "desc": "This procedure obtains data for the Water Quality section of the DFR.",
        "operation_id": null,
        "summary": "Detailed Facility Report Water Quality Service",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get water quality",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "p_radius"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_water_quality_details",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get water quality details",
        "base_path": "/echo"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": null,
                "location": "query",
                "name": "p_radius"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Output Format Flag.  Enter one of the following keywords:---- JSON = Data model formatted as Javascript Object Notation (default).---- JSONP = Data model formatted as Javascript Object Notation with Padding.  ---- XML = Data model formatted as Extensible Markup Language.",
                "location": "query",
                "name": "output"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.",
                "location": "query",
                "name": "callback"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Either the EPA Facility Registry System's REGISTRY_ID for a facility or the facility identifier from the following EPA Systems: RCRAINFO (HANDLER_ID), AFS (SCSC), ICIS NPDES (NPDES_ID), or SDWIS (PWS_ID).",
                "location": "query",
                "name": "p_id"
            }
        ],
        "response_desc": "Results",
        "url": "/echo/dfr_rest_services.get_water_quality_details",
        "desc": null,
        "operation_id": null,
        "summary": "Placeholder",
        "api": "epa.gov__dfr__0.0.0.yaml",
        "canonical_expr": "get water quality details",
        "base_path": "/echo"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "cinema_name"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/cinema-detail/search/{cinema_name}",
        "desc": "Return cinema details search result\n\n### Response Class (Status 200)\n\n* __{cinema_name}__: Used as a key word to search cinemas,\n\nFor more details on how cinemas are listed [see here][ref].\n[ref]: https://etmdb.com/en/cinema-list/-updated_date",
        "operation_id": "cinema-detail_search_read",
        "summary": "Return cinema details search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cinema detail by cinema name being << cinema_name >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/cinema-schedule/search/{movie_title}",
        "desc": "Return cinema schedule search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search movie cast\n* You can use both Amharic or English charset/font to search\n\nFor more details about cinema schedule, check each cinema from the cinema list [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "cinema-schedule_search_read",
        "summary": "Return cinema schedule search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cinema schedule by movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/cinema-schedule/searchall/{param}",
        "desc": "Return cinema schedule search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* movie title\n* cinema name\n* cinema hall name or\n* cinema technology\n\nFor more details about cinema schedule, check each cinema from the cinema list [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "cinema-schedule_searchall_read",
        "summary": "Return cinema schedule search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cinema schedule by param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/cinema-shedule-showtime/search/{movie_title}",
        "desc": "Return cinema schedule and showtime search result\n\n### Response Class (Status 200)\n* __{movie_title}__: Used as a key word to search movie cast\n* You can use both Amharic or English charset/font to search\n\nFor more details about cinema schedule showtime, check each cinema from the cinema list [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "cinema-shedule-showtime_search_read",
        "summary": "Return cinema schedule and showtime search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cinema schedule and showtime for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/cinema-shedule-showtime/searchall/{param}",
        "desc": "Return cinema schedule and showtime search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* movie title\n* cinema name\n* cinema hall name\n* showtime starting date\n* showtime ending date or\n* cinema technology\n\nFor more details about cinema schedule, check each cinema from the cinema list [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "cinema-shedule-showtime_searchall_read",
        "summary": "Return cinema schedule and showtime search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cinema schedule and showtime by param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "id"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/cinema/search/{id}",
        "desc": "Return cinema search result\n\n### Response Class (Status 200)\n\n* __{id}__: Used as a key to search cinemas,\n\nFor more details on how cinemas are listed [see here][ref].\n[ref]: https://etmdb.com/en/cinema-list/-updated_date",
        "operation_id": "cinema_search_read",
        "summary": "Return cinema search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for a cinema for id being << id >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/company-credits/search/{movie_title}",
        "desc": "Return company credits search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search company credits for the movie\n* You can use both Amharic or English charset/font to search\n\nFor more details on how company credits are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "company-credits_search_read",
        "summary": "Return company credits search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for company credits for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/company-credits/searchall/{param}",
        "desc": "Return company credits search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* company name\n* movie title or\n* company credit description (such as production, cinematography, etc)\n\nFor more details on how company credits are listed [see here][ref].\n[ref]: https://etmdb.com/en/company-list/company_name",
        "operation_id": "company-credits_searchall_read",
        "summary": "Return company credits search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for company credits for param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "company_name"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/company/search/{company_name}",
        "desc": "Return company search result\n\n### Response Class (Status 200)\n\n* __{company_name}__: Used as a key word to search companies,\n\nFor more details on how companies are listed [see here][ref].\n[ref]: https://etmdb.com/en/company-list/-updated_date",
        "operation_id": "company_search_read",
        "summary": "Return company search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for company for company name being << company_name >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "filmography_description"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/filmography-type/search/{filmography_description}",
        "desc": "Return filmography type search result\n\n### Response Class (Status 200)\n\n* __{filmography_description}__: Used as a key word to search filmography types\n\nFor more details on how filmography types are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "filmography-type_search_read",
        "summary": "Return filmography type search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for filmography type with filmography description being << filmography_description >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/filmography/search/{movie_title}",
        "desc": "Return filmography search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search movies\n* You can use both Amharic or English charset/font to search\n\nFor more details on how filmographies are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "filmography_search_read",
        "summary": "Return filmography search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for filmography for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/filmography/searchall/{param}",
        "desc": "Return filmography search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* artist first name\n* artist last name\n* artist username\n* movie title or\n* filmography description (such as director, actor, producer, etc)\n\nFor more details on how filmographies are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "filmography_searchall_read",
        "summary": "Return filmography search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for filmography for param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "genre_description"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/genre-type/search/{genre_description}",
        "desc": "Return genre type search result\n\n### Response Class (Status 200)\n\n* __{genre_description}__: Used as a key word to search genre types\n\nFor more details on how genre types are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "genre-type_search_read",
        "summary": "Return genre type search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for genre type with genre description being << genre_description >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/genre/search/{movie_title}",
        "desc": "Return movie genre search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search movie genres\n* You can use both Amharic or English charset/font to search\n\nFor more details on how movies are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "genre_search_read",
        "summary": "Return movie genre search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for movie genre for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_genre_type"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/genre/searchall/{movie_genre_type}",
        "desc": "Return movie genre search result\n\n### Response Class (Status 200)\n\n* __{movie_genre_type}__: Used as a key word to search movie genres\n\nFor more details on how movies are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "genre_searchall_read",
        "summary": "Return movie genre search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for movie genre for movie genre type being << movie_genre_type >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "job_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/job/search/{job_title}",
        "desc": "Return job details search result\n\n### Response Class (Status 200)\n\n* __{job_title}__: Used as a key word to search jobs,\n\nFor more details on how job are listed [see here][ref].\n[ref]: https://etmdb.com/en/job-list/-updated_date",
        "operation_id": "job_search_read",
        "summary": "Return job details search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for job for job title being << job_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "company_name"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/job/searchall/{company_name}",
        "desc": "Return job details search result\n\n### Response Class (Status 200)\n\n* __{company_name}__: Used as a key word to search jobs,\n\nFor more details on how job are listed [see here][ref].\n[ref]: https://etmdb.com/en/job-list/-updated_date",
        "operation_id": "job_searchall_read",
        "summary": "Return job details search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for job for company name being << company_name >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/media/search/{movie_title}",
        "desc": "Return movie media search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search media for movies\n* You can use both Amharic or English charset/font to search\n\nFor more details on how media is listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "media_search_read",
        "summary": "Return movie media search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for movie media for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "user"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/media/searchall/{user}",
        "desc": "Return cast media search result\n\n### Response Class (Status 200)\n__{user}__ argument can be\n* artist first name\n* artist last name\n* artist username\n\nFor more details on how cast media is listed [see here][ref].\n[ref]: https://etmdb.com/en/cast-list/-updated_date",
        "operation_id": "media_searchall_read",
        "summary": "Return cast media search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cast media for user being << user >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/movie-cast/search/{movie_title}",
        "desc": "Return movie cast search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search movie cast\n* You can use both Amharic or English charset/font to search\n\nFor more details on how movie casts are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "movie-cast_search_read",
        "summary": "Return movie cast search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for movie cast for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/movie-cast/searchall/{param}",
        "desc": "Return movie cast search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* artist first name\n* artist last name\n* artist username\n* movie title or\n* character name\n\nFor more details on how movie casts are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "movie-cast_searchall_read",
        "summary": "Return movie cast search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for movie cast for param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/movie/search/{movie_title}",
        "desc": "Return movie search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search movies\n* You can use both Amharic or English charset/font to search\n\nFor more details on how movies are listed [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "movie_search_read",
        "summary": "Return movie search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for movie for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/news/search/{title}",
        "desc": "Return news or article search result\n\n### Response Class (Status 200)\n\n* __{title}__: Used as a key word to search news and articles,\n\nFor more details on how news & articles are listed [see here][ref].\n[ref]: https://etmdb.com/en/news-list/-updated_date",
        "operation_id": "news_search_read",
        "summary": "Return news or article search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for news or article for title being << title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "user"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/people/search/{user}",
        "desc": "Return cast search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* artist first name\n* artist last name\n* artist username\n\nFor more details on how cast are listed [see here][ref].\n[ref]: https://etmdb.com/en/cast-list/-updated_date",
        "operation_id": "people_search_read",
        "summary": "Return cast search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for cast for user being << user >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/showtime/searchall/{param}",
        "desc": "Return showtime search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* show time or\n* day of the week [Mon=1, Tue=2, Wed=3, Thu=4, Fri=5, Sat=6, Sun=7]\n\nFor more details about showtime, check each cinema from the cinema list [see here][ref].\n[ref]: https://etmdb.com/en/movie-list/-updated_date",
        "operation_id": "showtime_searchall_read",
        "summary": "Return showtime search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for showtime for param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "movie_title"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/watchlist/search/{movie_title}",
        "desc": "Return watchlist search result\n\n### Response Class (Status 200)\n\n* __{movie_title}__: Used as a key word to search movies on watchlist\n* You can use both Amharic or English charset/font to search\n\nFor more details on how watchlist are listed [see here][ref].\n[ref]: https://etmdb.com/en/movies/watchlist/id",
        "operation_id": "watchlist_search_read",
        "summary": "Return watchlist search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for watchlist for movie title being << movie_title >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "",
                "location": "path",
                "name": "param"
            }
        ],
        "response_desc": "",
        "url": "/api/v1/watchlist/searchall/{param}",
        "desc": "Return watchlist search result\n\n### Response Class (Status 200)\n__{param}__ argument can be\n* artist first name\n* artist last name\n* artist username\n* movie title or\n\nFor more details on how watchlist are listed [see here][ref].\n[ref]: https://etmdb.com/en/movies/watchlist/id",
        "operation_id": "watchlist_searchall_read",
        "summary": "Return watchlist search result",
        "api": "etmdb.com__1.0.0.yaml",
        "canonical_expr": "search for watchlist for param being << param >>",
        "base_path": ""
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request):---typeid=34&typeid=35 or typeid=34,35---",
                "location": "query",
                "name": "typeid"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single solar system.",
                "location": "query",
                "name": "usesystem"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single region.",
                "location": "query",
                "name": "regionlimit"
            }
        ],
        "response_desc": "Successful Request",
        "url": "/ec/marketstat",
        "desc": null,
        "operation_id": null,
        "summary": "XML Marketstat",
        "api": "evemarketer.com__1.0.1.yaml",
        "canonical_expr": "get market stat",
        "base_path": "/ec"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request):---typeid=34&typeid=35 or typeid=34,35---",
                "location": "formData",
                "name": "typeid"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single solar system.",
                "location": "formData",
                "name": "usesystem"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single region.",
                "location": "formData",
                "name": "regionlimit"
            }
        ],
        "response_desc": "Successful Request",
        "url": "/ec/marketstat",
        "desc": null,
        "operation_id": null,
        "summary": "XML Marketstat",
        "api": "evemarketer.com__1.0.1.yaml",
        "canonical_expr": "get market stat",
        "base_path": "/ec"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request):---typeid=34&typeid=35 or typeid=34,35---",
                "location": "formData",
                "name": "typeid"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single region.",
                "location": "formData",
                "name": "usesystem"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single region.",
                "location": "formData",
                "name": "regionlimit"
            }
        ],
        "response_desc": "Successful Request",
        "url": "/ec/marketstat/json",
        "desc": null,
        "operation_id": null,
        "summary": "JSON Marketstat",
        "api": "evemarketer.com__1.0.1.yaml",
        "canonical_expr": "get market stat",
        "base_path": "/ec"
    },
    {
        "verb": "post",
        "params": [
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request):---typeid=34&typeid=35 or typeid=34,35---",
                "location": "query",
                "name": "typeid"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single region.",
                "location": "query",
                "name": "usesystem"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Limit the statistics to a single region.",
                "location": "query",
                "name": "regionlimit"
            }
        ],
        "response_desc": "Successful Request",
        "url": "/ec/marketstat/json",
        "desc": null,
        "operation_id": null,
        "summary": "JSON Marketstat",
        "api": "evemarketer.com__1.0.1.yaml",
        "canonical_expr": "get market stat",
        "base_path": "/ec"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "User's password",
                "location": "query",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of of user to authenticate",
                "location": "query",
                "name": "username"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/authenticateUser",
        "desc": "Returns access token in the Response object",
        "operation_id": "authenticateUser",
        "summary": "Authenticates a user into the API",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "authenticate user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Array containing paths of the files or folders to check",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/checkFilesExist",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "checkFilesExist",
        "summary": "Checks to see if each file or folder in the array exists",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "check if file exists",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Remote destination path to copy files/folders to",
                "location": "query",
                "name": "destinationPath"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Remote paths of the files or folders to copy",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/copyResources",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'upload' permission.",
        "operation_id": "copyResources",
        "summary": "Copies files, folders to the destination path",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the copy resources",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the folder to create",
                "location": "query",
                "name": "folderName"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Where to create the folder",
                "location": "query",
                "name": "path"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/createFolder",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'upload' permission.",
        "operation_id": "createFolder",
        "summary": "Create a folder at a specified path",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "create a new folder",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Full path of file/folder where notification is set.",
                "location": "query",
                "name": "path"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of action to filter on: 'upload', 'download', 'delete', 'all'",
                "location": "query",
                "name": "action"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Email addresses to send notification to. If not specified, sends to owner by default.",
                "location": "query",
                "name": "emails"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "User type to filter on: 'notice_user_all', 'notice_user_all_recipients', 'notice_user_all_users'",
                "location": "query",
                "name": "usernames"
            },
            {
                "example": null,
                "type": "boolean",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if the user should be notified by email when the notification is triggered.",
                "location": "query",
                "name": "sendEmail"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/createNotification",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'notification' permission",
        "operation_id": "createNotification",
        "summary": "Creates a new Notification object",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "create a new notification",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The type of share to create: shared_folder, send, receive.",
                "location": "query",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the Share.",
                "location": "query",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Specifies a CC email recipient.",
                "location": "query",
                "name": "ccEmail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of permissions share recipients have: upload, download, download_upload, download_upload_modify, download_upload_modify_delete. Defaults to download if no option specified.",
                "location": "query",
                "name": "accessMode"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if share has a public URL, otherwise defaults to false",
                "location": "query",
                "name": "isPublic"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Allows user to embed a widget with the share. Defaults to false if not specified.",
                "location": "query",
                "name": "embed"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, all receive folder submissions will be uploaded separate folders (only applicable for Receive folder types)",
                "location": "query",
                "name": "fileDropCreateFolders"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Requires a user's email to access (defaults to false if not specified).",
                "location": "query",
                "name": "requireEmail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Share message contents (for email invitations).",
                "location": "query",
                "name": "message"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the user should be notified about activity on this Share.",
                "location": "query",
                "name": "hasNotification"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "An array of recipients who should receive notification emails.",
                "location": "query",
                "name": "notificationEmails"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If not null, value of password is required to access this Share",
                "location": "query",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Share message subject (for email invitations).",
                "location": "query",
                "name": "subject"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date the current Share should expire, formatted YYYY-mm-dd",
                "location": "query",
                "name": "expiration"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Array of strings for email recipients (for email invitations).",
                "location": "query",
                "name": "emails"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Array of strings containing the file paths to share.",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/createShare",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'share' permission",
        "operation_id": "createShare",
        "summary": "Create a new Share object",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "create a new share",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "America/Los_Angeles",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's timezone, used for accurate time display within SWFT. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values",
                "location": "query",
                "name": "timeZone"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date when the user should expire, formatted YYYY-mm-dd",
                "location": "query",
                "name": "expiration"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's email address",
                "location": "query",
                "name": "email"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's home folder",
                "location": "query",
                "name": "destinationFolder"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's role, i.e: 'user' or 'admin'",
                "location": "query",
                "name": "role"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "A CSV string of user permissions. The following values are supported: upload, download, delete, modify, list, changePassword, share, notification.",
                "location": "query",
                "name": "permissions"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the subaccount user to create",
                "location": "query",
                "name": "username"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, send a user email upon creation",
                "location": "query",
                "name": "welcomeEmail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's nickname",
                "location": "query",
                "name": "nickname"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's password",
                "location": "query",
                "name": "password"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, the user's account is locked by default",
                "location": "query",
                "name": "locked"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/createUser",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'manage users' permission",
        "operation_id": "createUser",
        "summary": "Adds a new subaccount user to the current account",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "create a new user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the Notification to delete.",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/deleteNotification",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'notification' permission",
        "operation_id": "deleteNotification",
        "summary": "Deletes a Notification by ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "delete a notification",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Array containing paths of the files or folder to delete",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/deleteResources",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'delete' permission",
        "operation_id": "deleteResources",
        "summary": "Delete the specified files/folders",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the list of resources",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the Share to delete.",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/deleteShare",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'share' permission",
        "operation_id": "deleteShare",
        "summary": "Deletes a Share by ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "delete a share",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the subaccount user to delete",
                "location": "query",
                "name": "username"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/deleteUser",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'manage users' permission",
        "operation_id": "deleteUser",
        "summary": "Deletes a subaccount user for the current account",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "delete a user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getAccount",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "getAccount",
        "summary": "Gets the account object for the currently logged in user",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the account",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getCurrentUser",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "getCurrentUser",
        "summary": "Gets the user object for the currently logged in user",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get current user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The name of the file to be downloaded",
                "location": "query",
                "name": "downloadName"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Path of file to be downloaded",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getDownloadFileUrl",
        "desc": "Requires access token obtained via the authenticateUser operation. URL points at the appropriate storage server for file download.",
        "operation_id": "getDownloadFileUrl",
        "summary": "Returns a unique URL for handling file downloads",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get a unique url for handling file downloads",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "desc",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort in either ascending or descending order: asc, desc",
                "location": "query",
                "name": "sortOrder"
            },
            {
                "example": 0,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Starting record in the result set. Can be used for pagination.",
                "location": "query",
                "name": "offset"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Field to search on ['filter_logs_date' or 'filter_logs_ip_address' or 'filter_logs_username' or 'filter_logs_operation' or 'filter_logs_file']",
                "location": "query",
                "name": "filterBy"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Number of logs to return. Can be used for pagination.",
                "location": "query",
                "name": "itemLimit"
            },
            {
                "example": "sort_logs_date",
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort method ['sort_logs_date' or 'sort_logs_ip_address' or 'sort_logs_username' or 'sort_logs_file' or 'sort_logs_file_source' or 'sort_logs_operation', or 'sort_logs_duration', or 'sort_logs_size', or 'sort_logs_protocol']",
                "location": "query",
                "name": "sortBy"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Search criteria. For date ranges, use format 'start_date::end_date'",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getFileActivityLogs",
        "desc": null,
        "operation_id": "getFileActivityLogs",
        "summary": "Returns a list of account activity. Allows for searching the activity log.",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the file activity logs",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The remote file path",
                "location": "query",
                "name": "path"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getFolders",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "getFolders",
        "summary": "Get folders for a specified path",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the list of folders",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the Notification",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getNotification",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'notification' permission",
        "operation_id": "getNotification",
        "summary": "Returns a notification based on the given ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get a notification",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getNotificationActivity",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'notification' permission",
        "operation_id": "getNotificationActivity",
        "summary": "Returns all notification activity for the current user",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get notification activity",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of notification to filter on: 'file', 'folder', 'shared_folder', 'send_receipt', 'share_receipt', 'file_drop'",
                "location": "query",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort by 'asc' or 'desc' order.",
                "location": "query",
                "name": "sortOrder"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort by one of the following: 'sort_notifications_folder_name', 'sort_notifications_path', 'sort_notifications_date'",
                "location": "query",
                "name": "sortBy"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by the provided search terms.",
                "location": "query",
                "name": "filter"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getNotifications",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'notification' permission",
        "operation_id": "getNotifications",
        "summary": "Returns all notifications for the current user",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the list of notifications",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Regex string. If not null, perform a search with specified pattern",
                "location": "query",
                "name": "pattern"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort in either ascending or descending order: asc, desc",
                "location": "query",
                "name": "sortOrder"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The remote file path",
                "location": "query",
                "name": "path"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, returns sharedFolder, notifications or other objects associated with specified path",
                "location": "query",
                "name": "detailed"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort according to attribute: sort_files_name, sort_files_size, sort_files_date, sort_files_type, sort_files_timeline",
                "location": "query",
                "name": "sortBy"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The number of files to limit the result",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Determines which item to start on for pagination",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getResourceList",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'list files' permission.",
        "operation_id": "getResourceList",
        "summary": "Get a listing of files/folders for the specified path",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get a list of files and folders",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Array containing paths of the files or folder to get",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getResourceProperties",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "getResourceProperties",
        "summary": "Get the properties for each of the specified files/folders",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the resource properties",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the requested Share",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getShare",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'share' permission",
        "operation_id": "getShare",
        "summary": "Returns a share by the specified ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get a share",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "ID of the Share",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getShareActivity",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'share' permission",
        "operation_id": "getShareActivity",
        "summary": "Return activity log entries for the specified Share ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get share activity",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by all, active-only, or current user's only.",
                "location": "query",
                "name": "include"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The type of share to return: 'shared_folder', 'send', or 'receive'. If no argument specified, will return all Shares types.",
                "location": "query",
                "name": "type"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort by 'asc' or 'desc' order.",
                "location": "query",
                "name": "sortOrder"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Filter by the provided search terms.",
                "location": "query",
                "name": "filter"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Sort by one of the following: 'sort_shares_name', 'sort_shares_date', 'sort_shares_user', 'sort_shares_access_mode'.",
                "location": "query",
                "name": "sortBy"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Maximum number of elements to return or 0 if no limit.",
                "location": "query",
                "name": "limit"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Start position of results to return, for pagination.",
                "location": "query",
                "name": "offset"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getShares",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'share' permission",
        "operation_id": "getShares",
        "summary": "Returns all Shares for the current user",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the list of shares",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Size of the file to upload, in bytes",
                "location": "query",
                "name": "fileSize"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Path relative to account's home directory, including file name",
                "location": "query",
                "name": "destinationPath"
            },
            {
                "example": false,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if upload resume is supported, false if it isn't",
                "location": "query",
                "name": "resume"
            },
            {
                "example": true,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the file should be overwritten, false if different file names should be generated",
                "location": "query",
                "name": "allowOverwrite"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getUploadFileUrl",
        "desc": "Requires access token obtained via the authenticateUser operation. Called before an upload is started to get URL to appropriate storage server. Available to users with the 'write' permission.",
        "operation_id": "getUploadFileUrl",
        "summary": "Returns a unique URL for handling file uploads",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get a unique url for handling file uploads",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the subaccount user to get",
                "location": "query",
                "name": "username"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getUser",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "getUser",
        "summary": "Get the specified subaccount user for the current account",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get a user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "sort method ['sort_users_username' or 'sort_users_nickname' or 'sort_users_email' or 'sort_users_home_folder']",
                "location": "query",
                "name": "sortBy"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "sort order, i.e. 'asc' or 'desc'",
                "location": "query",
                "name": "sortOrder"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/getUsers",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'manage users' permission set",
        "operation_id": "getUsers",
        "summary": "Gets the user object for the currently logged in user",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the list of users",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/logoutUser",
        "desc": "Requires access token obtained via the authenticateUser operation",
        "operation_id": "logoutUser",
        "summary": "Removes user's access token from database, logging them out of API",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "logout user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Remote destination path to move files/folders to",
                "location": "query",
                "name": "destinationPath"
            },
            {
                "example": null,
                "type": "array",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Remote paths of the files or folders to move",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/moveResources",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'upload' permission",
        "operation_id": "moveResources",
        "summary": "Moves files, folders to the destination path",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "get the move resources",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The size of the image: small, medium, large",
                "location": "query",
                "name": "size"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Overrides sizes. Sets to a specific width",
                "location": "query",
                "name": "width"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Path of the image relative to the user's home directory",
                "location": "query",
                "name": "path"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Overrides sizes. Sets to a specific height",
                "location": "query",
                "name": "height"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "integer",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Page number for the document",
                "location": "query",
                "name": "page"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/previewFile",
        "desc": "Requires access token obtained via authenticateUser operation",
        "operation_id": "previewFile",
        "summary": "Returns a resized image of the specified document for support file types",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "preview file",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Remote path of the files or folder to rename",
                "location": "query",
                "name": "filePath"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The new name of the file or folder",
                "location": "query",
                "name": "newName"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/renameResource",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'modify' permission",
        "operation_id": "renameResource",
        "summary": "Rename a file or folder at the specified path",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "rename a file or folder",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The notification ID",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Full path of file/folder where notification is set.",
                "location": "query",
                "name": "path"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Set to true if the user should be notified by email when the notification is triggered.",
                "location": "query",
                "name": "sendEmail"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Email addresses to send notification to. If not specified, sends to owner by default.",
                "location": "query",
                "name": "emails"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "User type to filter on: 'notice_user_all', 'notice_user_all_recipients', 'notice_user_all_users'",
                "location": "query",
                "name": "usernames"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of action to filter on: 'upload', 'download', 'delete', 'all'",
                "location": "query",
                "name": "action"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/updateNotification",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'notification' permission",
        "operation_id": "updateNotification",
        "summary": "Updates an existing notification by ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "update a notification",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The ID of the Share to update.",
                "location": "query",
                "name": "id"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Share message contents (for email invitations).",
                "location": "query",
                "name": "message"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the Share.",
                "location": "query",
                "name": "name"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Specifies a CC email recipient.",
                "location": "query",
                "name": "ccEmail"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Type of permissions share recipients have: upload, download, download_upload, download_upload_modify, download_upload_modify_delete.",
                "location": "query",
                "name": "accessMode"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Allows user to embed a widget with the share.",
                "location": "query",
                "name": "embed"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, all receive folder submissions will be uploaded separate folders (only applicable for Receive folder types)",
                "location": "query",
                "name": "fileDropCreateFolders"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Requires a user's email to access.",
                "location": "query",
                "name": "requireEmail"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if share has a public URL, otherwise defaults to false",
                "location": "query",
                "name": "isPublic"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "True if the user should be notified about activity on this Share.",
                "location": "query",
                "name": "hasNotification"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "An array of recipients who should receive notification emails.",
                "location": "query",
                "name": "notificationEmails"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If not null, value of password is required to access this Share",
                "location": "query",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Share message subject (for email invitations).",
                "location": "query",
                "name": "subject"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date the current Share should expire, formatted YYYY-mm-dd",
                "location": "query",
                "name": "expiration"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Array of strings for email recipients (for email invitations).",
                "location": "query",
                "name": "emails"
            },
            {
                "example": null,
                "type": "array",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Array of strings containing the file paths to share.",
                "location": "query",
                "name": "filePaths"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/updateShare",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'share' permission",
        "operation_id": "updateShare",
        "summary": "Update an existing Share by ID",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "update a share",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "integer",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The user ID, must be obtained from getUser method first",
                "location": "query",
                "name": "userId"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The date when use should expire in format: YYYY-MM-DD",
                "location": "query",
                "name": "expiration"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's email",
                "location": "query",
                "name": "email"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's nickname",
                "location": "query",
                "name": "nickname"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's role, i.e: 'user', 'admin', 'master'",
                "location": "query",
                "name": "role"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "Name of the subaccount user to modify",
                "location": "query",
                "name": "username"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's password",
                "location": "query",
                "name": "password"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "A CSV string of user permissions.",
                "location": "query",
                "name": "permissions"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "boolean",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "If true, the user's account is locked by default",
                "location": "query",
                "name": "locked"
            },
            {
                "example": null,
                "type": "string",
                "required": false,
                "pattern": null,
                "for_auth": false,
                "desc": "The user's home folder",
                "location": "query",
                "name": "destinationFolder"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/updateUser",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with 'manage users' permission",
        "operation_id": "updateUser",
        "summary": "Updates a subaccount user for the current account",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "update a user",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Access token required to make the API call",
                "location": "query",
                "name": "access_token"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Username to check",
                "location": "query",
                "name": "username"
            }
        ],
        "response_desc": "No response was specified",
        "url": "//v1/userAvailable",
        "desc": "Requires access token obtained via the authenticateUser operation. Available to users with the 'manage users' permission",
        "operation_id": "userAvailable",
        "summary": "Returns true if requested username has not already been taken in the system",
        "api": "exavault.com__1.0.0.yaml",
        "canonical_expr": "is user available",
        "base_path": "/"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/AreAnyGamesInProgress",
        "desc": "Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.",
        "operation_id": "AreGamesInProgress",
        "summary": "Are Games In Progress",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "are any games in progress",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/CurrentSeason",
        "desc": null,
        "operation_id": "CurrentSeason",
        "summary": "Current Season",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get current season",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/Games/{season}",
        "desc": null,
        "operation_id": "Schedules",
        "summary": "Schedules",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get schedules for a season by season being << season >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/GamesByDate/{date}",
        "desc": null,
        "operation_id": "GamesByDate",
        "summary": "Games by Date",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get games by date being << date >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/LeagueHierarchy",
        "desc": null,
        "operation_id": "LeagueHierarchy",
        "summary": "League Hierarchy",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get league hierarchy",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>60003802</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/Player/{playerid}",
        "desc": null,
        "operation_id": "PlayerDetailsByPlayer",
        "summary": "Player Details by Player",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get a player with player id being << playerid >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/Players",
        "desc": null,
        "operation_id": "PlayerDetailsByActive",
        "summary": "Player Details by Active",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get the list of players",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The abbreviation of the requested team.---<br>Examples: <code>SF</code>, <code>NYY</code>.",
                "location": "path",
                "name": "team"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/Players/{team}",
        "desc": null,
        "operation_id": "PlayerDetailsByTeam",
        "summary": "Player Details by Team",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get the list of players by team being << team >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/TeamGameStatsByDate/{date}",
        "desc": null,
        "operation_id": "TeamGameStatsByDate",
        "summary": "Team Game Stats by Date",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get team game stats by date being << date >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/TeamSeasonStats/{season}",
        "desc": null,
        "operation_id": "TeamSeasonStats",
        "summary": "Team Season Stats",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get team game stats by season being << season >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/Tournament/{season}",
        "desc": null,
        "operation_id": "TournamentHierarchy",
        "summary": "Tournament Hierarchy",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get tournament by season being << season >>",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/scores/{format}/teams",
        "desc": null,
        "operation_id": "Teams",
        "summary": "Teams",
        "api": "fantasydata.net__cbb-v3-scores__1.0.yaml",
        "canonical_expr": "get the list of teams",
        "base_path": "/v3/cbb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/AreAnyGamesInProgress",
        "desc": "Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.",
        "operation_id": "AreGamesInProgress",
        "summary": "Are Games In Progress",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "are any games in progress",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The GameID of an CBB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code>",
                "location": "path",
                "name": "gameid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/BoxScore/{gameid}",
        "desc": null,
        "operation_id": "BoxScore",
        "summary": "Box Score",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get box score by game id being << gameid >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/BoxScores/{date}",
        "desc": null,
        "operation_id": "BoxScoresByDate",
        "summary": "Box Scores by Date",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get the list of box scores by date being << date >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:---<code>1</code> or <code>2</code>.",
                "location": "path",
                "name": "minutes"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/BoxScoresDelta/{date}/{minutes}",
        "desc": null,
        "operation_id": "BoxScoresByDateDelta",
        "summary": "Box Scores by Date Delta",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get box scores delta by date being << date >> and minutes being << minutes >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/CurrentSeason",
        "desc": null,
        "operation_id": "CurrentSeason",
        "summary": "Current Season",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get current season",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/Games/{season}",
        "desc": null,
        "operation_id": "Schedules",
        "summary": "Schedules",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get the list of games by season being << season >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/GamesByDate/{date}",
        "desc": null,
        "operation_id": "GamesByDate",
        "summary": "Games by Date",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get games by date being << date >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/LeagueHierarchy",
        "desc": null,
        "operation_id": "LeagueHierarchy",
        "summary": "League Hierarchy",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get league hierarchy",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>60003802</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/Player/{playerid}",
        "desc": null,
        "operation_id": "PlayerDetailsByPlayer",
        "summary": "Player Details by Player",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get a player with player id being << playerid >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerGameProjectionStatsByDate/{date}",
        "desc": null,
        "operation_id": "ProjectedPlayerGameStatsByDate",
        "summary": "Projected Player Game Stats by Date",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player game projection stats by date being << date >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>60003802</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}",
        "desc": null,
        "operation_id": "ProjectedPlayerGameStatsByPlayer",
        "summary": "Projected Player Game Stats by Player",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player game projection stats by date being << date >> and player id being << playerid >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerGameStatsByDate/{date}",
        "desc": null,
        "operation_id": "PlayerGameStatsByDate",
        "summary": "Player Game Stats by Date",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player game stats by date being << date >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>60003802</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerGameStatsByPlayer/{date}/{playerid}",
        "desc": null,
        "operation_id": "PlayerGameStatsByPlayer",
        "summary": "Player Game Stats by Player",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player game stats by date being << date >> and player id being << playerid >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerSeasonStats/{season}",
        "desc": null,
        "operation_id": "PlayerSeasonStats",
        "summary": "Player Season Stats",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player season stats by season being << season >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>60003802</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerSeasonStatsByPlayer/{season}/{playerid}",
        "desc": null,
        "operation_id": "PlayerSeasonStatsByPlayer",
        "summary": "Player Season Stats By Player",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player season stats by player id being << playerid >> and season being << season >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The abbreviation of the requested team.---<br>Examples: <code>SF</code>, <code>NYY</code>.",
                "location": "path",
                "name": "team"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/PlayerSeasonStatsByTeam/{season}/{team}",
        "desc": null,
        "operation_id": "PlayerSeasonStatsByTeam",
        "summary": "Player Season Stats by Team",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get player season stats by team being << team >> and season being << season >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/Players",
        "desc": null,
        "operation_id": "PlayerDetailsByActive",
        "summary": "Player Details by Active",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get the list of players",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The abbreviation of the requested team.---<br>Examples: <code>SF</code>, <code>NYY</code>.",
                "location": "path",
                "name": "team"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/Players/{team}",
        "desc": null,
        "operation_id": "PlayerDetailsByTeam",
        "summary": "Player Details by Team",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get the list of players by team being << team >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2018-FEB-27</code>, <code>2017-DEC-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/TeamGameStatsByDate/{date}",
        "desc": null,
        "operation_id": "TeamGameStatsByDate",
        "summary": "Team Game Stats by Date",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get team game stats by date being << date >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/TeamSeasonStats/{season}",
        "desc": null,
        "operation_id": "TeamSeasonStats",
        "summary": "Team Season Stats",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get team season stats by season being << season >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018POST</code>, <code>2019</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/Tournament/{season}",
        "desc": null,
        "operation_id": "TournamentHierarchy",
        "summary": "Tournament Hierarchy",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get tournament by season being << season >>",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cbb/stats/{format}/teams",
        "desc": null,
        "operation_id": "Teams",
        "summary": "Teams",
        "api": "fantasydata.net__cbb-v3-stats__1.0.yaml",
        "canonical_expr": "get the list of teams",
        "base_path": "/v3/cbb/stats"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/AreAnyGamesInProgress",
        "desc": "Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.",
        "operation_id": "AreGamesInProgress",
        "summary": "Are Games In Progress",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "are any games in progress",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/CurrentSeason",
        "desc": null,
        "operation_id": "CurrentSeason",
        "summary": "Current Season",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get current season",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/CurrentWeek",
        "desc": null,
        "operation_id": "CurrentWeek",
        "summary": "Current Week",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get current week",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/Games/{season}",
        "desc": null,
        "operation_id": "Schedules",
        "summary": "Schedules",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get the list of games by season being << season >>",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "---The date of the game(s).---<br>Examples: <code>2016-SEP-01</code>, <code>2017-SEP-10</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/GamesByDate/{date}",
        "desc": null,
        "operation_id": "GamesByDate",
        "summary": "Games by Date",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get games by date being << date >>",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "---Year of the season.---<br>Examples: <code>2015</code>, <code>2016</code>, etc.",
                "location": "path",
                "name": "season"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "---The week of the game(s).---<br>Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc.",
                "location": "path",
                "name": "week"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/GamesByWeek/{season}/{week}",
        "desc": null,
        "operation_id": "GamesByWeek",
        "summary": "Games by Week",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get games by week being << week >>",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/LeagueHierarchy",
        "desc": null,
        "operation_id": "ConferenceHierarchyWithTeams",
        "summary": "Conference Hierarchy (with Teams)",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get league hierarchy",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/Stadiums",
        "desc": null,
        "operation_id": "Stadiums",
        "summary": "Stadiums",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get the list of stadiums",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "---Year of the season.---<br>Examples: <code>2015</code>, <code>2016</code>, etc.",
                "location": "path",
                "name": "season"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "---The week of the game(s).---<br>Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc.",
                "location": "path",
                "name": "week"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/TeamGameStatsByWeek/{season}/{week}",
        "desc": null,
        "operation_id": "TeamGameStatsByWeek",
        "summary": "Team Game Stats by Week",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get team game stats by week being << week >> and season being << season >>",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season (with optional season type).<br>Examples: <code>2017</code>, <code>2017POST</code>, <code>2018</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/TeamSeasonStats/{season}",
        "desc": null,
        "operation_id": "TeamSeasonStatsStandings",
        "summary": "Team Season Stats & Standings",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get team season stats by season being << season >>",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>xml</code> or <code>json</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/v3/cfb/scores/{format}/Teams",
        "desc": null,
        "operation_id": "Teams",
        "summary": "Teams",
        "api": "fantasydata.net__cfb-v3-scores__1.0.yaml",
        "canonical_expr": "get the list of teams",
        "base_path": "/v3/cfb/scores"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>58</code>, <code>61</code>, etc.",
                "location": "path",
                "name": "tournamentid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/DfsSlatesByTournament/{tournamentid}",
        "desc": null,
        "operation_id": "DfsSlates",
        "summary": "DFS Slates",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get dfs slates by tournament being << tournamentid >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/Injuries",
        "desc": null,
        "operation_id": "Injuries",
        "summary": "Injuries",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the list of injuries",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/InjuriesByHistorical",
        "desc": null,
        "operation_id": "InjuriesHistorical",
        "summary": "Injuries (Historical)",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the list of injuries by historical",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>58</code>, <code>61</code>, etc.",
                "location": "path",
                "name": "tournamentid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/Leaderboard/{tournamentid}",
        "desc": null,
        "operation_id": "Leaderboard",
        "summary": "Leaderboard",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the leader board by tournament id being << tournamentid >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/News",
        "desc": null,
        "operation_id": "News",
        "summary": "News",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the list of news",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The date of the game(s).---<br>Examples: <code>2015-JUL-31</code>, <code>2015-SEP-01</code>.",
                "location": "path",
                "name": "date"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/NewsByDate/{date}",
        "desc": null,
        "operation_id": "NewsByDate",
        "summary": "News by Date",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get news by date being << date >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>40000019</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/NewsByPlayerID/{playerid}",
        "desc": null,
        "operation_id": "NewsByPlayer",
        "summary": "News by Player",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get news by player id being << playerid >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>40000019</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/Player/{playerid}",
        "desc": null,
        "operation_id": "Player",
        "summary": "Player",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get a player by player id being << playerid >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season.---<br>Examples: <code>2016</code>, <code>2017</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/PlayerSeasonStats/{season}",
        "desc": null,
        "operation_id": "PlayerSeasonStatsWWorldGolfRankings",
        "summary": "Player Season Stats (w/ World Golf Rankings)",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get player season stats by season being << season >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>78</code>, <code>79</code>, <code>80</code>, etc.",
                "location": "path",
                "name": "tournamentid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/PlayerTournamentProjectionStats/{tournamentid}",
        "desc": null,
        "operation_id": "PlayerTournamentProjectedStatsWDraftkingsSalaries",
        "summary": "Player Tournament Projected Stats (w/ DraftKings Salaries)",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get player tournament projection stats by tournament id being << tournamentid >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Unique FantasyData Player ID.---Example:<code>40000019</code>.",
                "location": "path",
                "name": "playerid"
            },
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>58</code>, <code>61</code>, etc.",
                "location": "path",
                "name": "tournamentid"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/PlayerTournamentStatsByPlayer/{tournamentid}/{playerid}",
        "desc": null,
        "operation_id": "PlayerTournamentStatsByPlayer",
        "summary": "Player Tournament Stats By Player",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get player tournament stats by tournament id being << tournamentid >> and player id being << playerid >>",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/Players",
        "desc": null,
        "operation_id": "Players",
        "summary": "Players",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the list of players",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/Tournaments",
        "desc": null,
        "operation_id": "Schedule",
        "summary": "Schedule",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the list of tournaments",
        "base_path": "/golf/v2"
    },
    {
        "verb": "get",
        "params": [
            {
                "example": null,
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Year of the season.---<br>Examples: <code>2016</code>, <code>2017</code>.",
                "location": "path",
                "name": "season"
            },
            {
                "example": "XML",
                "type": "string",
                "required": true,
                "pattern": null,
                "for_auth": false,
                "desc": "Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.",
                "location": "path",
                "name": "format"
            }
        ],
        "response_desc": "",
        "url": "/golf/v2/{format}/Tournaments/{season}",
        "desc": null,
        "operation_id": "ScheduleBySeason",
        "summary": "Schedule by Season",
        "api": "fantasydata.net__golf-v2__1.0.yaml",
        "canonical_expr": "get the list of tournaments by season being << season >>",
        "base_path": "/golf/v2"
    }
]